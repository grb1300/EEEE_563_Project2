
Project2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018cc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08001a5c  08001a5c  00002a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c10  08001c10  00003058  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001c10  08001c10  00002c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001c18  08001c18  00003058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c18  08001c18  00002c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001c1c  08001c1c  00002c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000058  20000000  08001c20  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000058  08001c78  00003058  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08001c78  00003300  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003058  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002b58  00000000  00000000  00003088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ba3  00000000  00000000  00005be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000268  00000000  00000000  00006788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001a0  00000000  00000000  000069f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000259ae  00000000  00000000  00006b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004af0  00000000  00000000  0002c53e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5e4e  00000000  00000000  0003102e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00116e7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000bdc  00000000  00000000  00116ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00117a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000058 	.word	0x20000058
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001a44 	.word	0x08001a44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	08001a44 	.word	0x08001a44

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <LED_Init>:
// User LED = LD2 Green LED = PA.5
//******************************************************************************************
#define LED_PIN 5

void LED_Init(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
	// Enable the peripheral clock of GPIO Port
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80002a4:	4b1d      	ldr	r3, [pc, #116]	@ (800031c <LED_Init+0x7c>)
 80002a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002a8:	4a1c      	ldr	r2, [pc, #112]	@ (800031c <LED_Init+0x7c>)
 80002aa:	f043 0301 	orr.w	r3, r3, #1
 80002ae:	64d3      	str	r3, [r2, #76]	@ 0x4c

	// GPIO Mode: Input(00), Output(01), AlterFunc(10), Analog(11, reset)
	GPIOA->MODER &= ~(3U<<(2*LED_PIN));
 80002b0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002ba:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80002be:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 1U<<(2*LED_PIN);      //  Output(01)
 80002c0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002ce:	6013      	str	r3, [r2, #0]

	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR &= ~(3U<<(2*LED_PIN));
 80002d0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002d4:	689b      	ldr	r3, [r3, #8]
 80002d6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002da:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80002de:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |=   3U<<(2*LED_PIN);  // High speed
 80002e0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002e4:	689b      	ldr	r3, [r3, #8]
 80002e6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002ea:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 80002ee:	6093      	str	r3, [r2, #8]

	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1)
	GPIOA->OTYPER &= ~(1U<<LED_PIN);       // Push-pull
 80002f0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002f4:	685b      	ldr	r3, [r3, #4]
 80002f6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002fa:	f023 0320 	bic.w	r3, r3, #32
 80002fe:	6053      	str	r3, [r2, #4]

	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3U<<(2*LED_PIN));  // No pull-up, no pull-down
 8000300:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000304:	68db      	ldr	r3, [r3, #12]
 8000306:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800030a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800030e:	60d3      	str	r3, [r2, #12]
}
 8000310:	bf00      	nop
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	40021000 	.word	0x40021000

08000320 <led_set>:

//******************************************************************************************
// Set/Reset LED
//******************************************************************************************
void led_set(_Bool isOn )
{
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	4603      	mov	r3, r0
 8000328:	71fb      	strb	r3, [r7, #7]
	if(isOn)
 800032a:	79fb      	ldrb	r3, [r7, #7]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d008      	beq.n	8000342 <led_set+0x22>
		GPIOA->ODR |=  (1 << LED_PIN);
 8000330:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000334:	695b      	ldr	r3, [r3, #20]
 8000336:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800033a:	f043 0320 	orr.w	r3, r3, #32
 800033e:	6153      	str	r3, [r2, #20]
	else
		GPIOA->ODR &= ~(1 << LED_PIN);
}
 8000340:	e007      	b.n	8000352 <led_set+0x32>
		GPIOA->ODR &= ~(1 << LED_PIN);
 8000342:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000346:	695b      	ldr	r3, [r3, #20]
 8000348:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800034c:	f023 0320 	bic.w	r3, r3, #32
 8000350:	6153      	str	r3, [r2, #20]
}
 8000352:	bf00      	nop
 8000354:	370c      	adds	r7, #12
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr

0800035e <led_isOn>:

//******************************************************************************************
// LED Status
//******************************************************************************************
_Bool led_isOn(void )
{
 800035e:	b480      	push	{r7}
 8000360:	b083      	sub	sp, #12
 8000362:	af00      	add	r7, sp, #0
	uint32_t bit = GPIOA->ODR & (1<<LED_PIN);
 8000364:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f003 0320 	and.w	r3, r3, #32
 800036e:	607b      	str	r3, [r7, #4]

	return (bit != 0);
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	2b00      	cmp	r3, #0
 8000374:	bf14      	ite	ne
 8000376:	2301      	movne	r3, #1
 8000378:	2300      	moveq	r3, #0
 800037a:	b2db      	uxtb	r3, r3
}
 800037c:	4618      	mov	r0, r3
 800037e:	370c      	adds	r7, #12
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr

08000388 <clock_init>:


#include "stm32l476xx.h"

void clock_init(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
    RCC->CR |= ((uint32_t)RCC_CR_HSION);
 800038c:	4b18      	ldr	r3, [pc, #96]	@ (80003f0 <clock_init+0x68>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a17      	ldr	r2, [pc, #92]	@ (80003f0 <clock_init+0x68>)
 8000392:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000396:	6013      	str	r3, [r2, #0]

    // wait until HSI is ready
    while ( (RCC->CR & (uint32_t) RCC_CR_HSIRDY) == 0 ) {;}
 8000398:	bf00      	nop
 800039a:	4b15      	ldr	r3, [pc, #84]	@ (80003f0 <clock_init+0x68>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d0f9      	beq.n	800039a <clock_init+0x12>

    // Select HSI as system clock source
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80003a6:	4b12      	ldr	r3, [pc, #72]	@ (80003f0 <clock_init+0x68>)
 80003a8:	689b      	ldr	r3, [r3, #8]
 80003aa:	4a11      	ldr	r2, [pc, #68]	@ (80003f0 <clock_init+0x68>)
 80003ac:	f023 0303 	bic.w	r3, r3, #3
 80003b0:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_HSI;     // 01: HSI16 oscillator used as system clock
 80003b2:	4b0f      	ldr	r3, [pc, #60]	@ (80003f0 <clock_init+0x68>)
 80003b4:	689b      	ldr	r3, [r3, #8]
 80003b6:	4a0e      	ldr	r2, [pc, #56]	@ (80003f0 <clock_init+0x68>)
 80003b8:	f043 0301 	orr.w	r3, r3, #1
 80003bc:	6093      	str	r3, [r2, #8]

    // Wait till HSI is used as system clock source
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) == 0 ) {;}
 80003be:	bf00      	nop
 80003c0:	4b0b      	ldr	r3, [pc, #44]	@ (80003f0 <clock_init+0x68>)
 80003c2:	689b      	ldr	r3, [r3, #8]
 80003c4:	f003 030c 	and.w	r3, r3, #12
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d0f9      	beq.n	80003c0 <clock_init+0x38>

    // Enable the clock to GPIO Ports A, and C
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;    // enable clock for the User LED, UART
 80003cc:	4b08      	ldr	r3, [pc, #32]	@ (80003f0 <clock_init+0x68>)
 80003ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003d0:	4a07      	ldr	r2, [pc, #28]	@ (80003f0 <clock_init+0x68>)
 80003d2:	f043 0301 	orr.w	r3, r3, #1
 80003d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;    // enable clock for the User Button
 80003d8:	4b05      	ldr	r3, [pc, #20]	@ (80003f0 <clock_init+0x68>)
 80003da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003dc:	4a04      	ldr	r2, [pc, #16]	@ (80003f0 <clock_init+0x68>)
 80003de:	f043 0304 	orr.w	r3, r3, #4
 80003e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80003e4:	bf00      	nop
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	40021000 	.word	0x40021000

080003f4 <init_systick>:
};

enum Mode OP_MODE = AUTO_MODE;
// This function is to Initialize SysTick registers
void init_systick()
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
	// Use the SysTick global structure pointer to do the following in this
	// exact order with separate lines for each step:
	//
	// Disable SysTick by clearing the CTRL (CSR) register.
	SysTick->CTRL = 0UL;
 80003f8:	4b10      	ldr	r3, [pc, #64]	@ (800043c <init_systick+0x48>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]

	// Set the LOAD (RVR) to 15,999 to give us a 1 millisecond timer
	// System clock is 16MHz
	SysTick->LOAD |= (SysTick_LOAD_RELOAD_Msk & 15999UL);
 80003fe:	4b0f      	ldr	r3, [pc, #60]	@ (800043c <init_systick+0x48>)
 8000400:	685b      	ldr	r3, [r3, #4]
 8000402:	4a0e      	ldr	r2, [pc, #56]	@ (800043c <init_systick+0x48>)
 8000404:	f443 5379 	orr.w	r3, r3, #15936	@ 0x3e40
 8000408:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 800040c:	6053      	str	r3, [r2, #4]

	// Set the clock source bit in the CTRL (CSR) to the internal clock.
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 800040e:	4b0b      	ldr	r3, [pc, #44]	@ (800043c <init_systick+0x48>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	4a0a      	ldr	r2, [pc, #40]	@ (800043c <init_systick+0x48>)
 8000414:	f043 0304 	orr.w	r3, r3, #4
 8000418:	6013      	str	r3, [r2, #0]

	// Enable the interrupt bit
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 800041a:	4b08      	ldr	r3, [pc, #32]	@ (800043c <init_systick+0x48>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4a07      	ldr	r2, [pc, #28]	@ (800043c <init_systick+0x48>)
 8000420:	f043 0302 	orr.w	r3, r3, #2
 8000424:	6013      	str	r3, [r2, #0]

	// Set the enable bit in the CTRL (CSR) to start the timer.
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk ;
 8000426:	4b05      	ldr	r3, [pc, #20]	@ (800043c <init_systick+0x48>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4a04      	ldr	r2, [pc, #16]	@ (800043c <init_systick+0x48>)
 800042c:	f043 0301 	orr.w	r3, r3, #1
 8000430:	6013      	str	r3, [r2, #0]
}
 8000432:	bf00      	nop
 8000434:	46bd      	mov	sp, r7
 8000436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043a:	4770      	bx	lr
 800043c:	e000e010 	.word	0xe000e010

08000440 <SysTick_Handler>:

//******************************************************************************************
// This function is to handle SysTick Timer
//******************************************************************************************
void SysTick_Handler(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
	//In this example, we will have LED blinking at One second interval so first Update One Second Counter
	two_second_counter++;
 8000444:	4b12      	ldr	r3, [pc, #72]	@ (8000490 <SysTick_Handler+0x50>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	3301      	adds	r3, #1
 800044a:	4a11      	ldr	r2, [pc, #68]	@ (8000490 <SysTick_Handler+0x50>)
 800044c:	6013      	str	r3, [r2, #0]
	one_second_counter++;
 800044e:	4b11      	ldr	r3, [pc, #68]	@ (8000494 <SysTick_Handler+0x54>)
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	3301      	adds	r3, #1
 8000454:	4a0f      	ldr	r2, [pc, #60]	@ (8000494 <SysTick_Handler+0x54>)
 8000456:	6013      	str	r3, [r2, #0]

	// Set a global One second elapsed flag when the handler has been called 1000 times
	// Once flag is set, reset the counter
	if (one_second_counter == 1000)
 8000458:	4b0e      	ldr	r3, [pc, #56]	@ (8000494 <SysTick_Handler+0x54>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000460:	d105      	bne.n	800046e <SysTick_Handler+0x2e>
	{
		one_second_elapsed = true;
 8000462:	4b0d      	ldr	r3, [pc, #52]	@ (8000498 <SysTick_Handler+0x58>)
 8000464:	2201      	movs	r2, #1
 8000466:	701a      	strb	r2, [r3, #0]
		one_second_counter = 0;
 8000468:	4b0a      	ldr	r3, [pc, #40]	@ (8000494 <SysTick_Handler+0x54>)
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
	}
	if (two_second_counter == 2000)
 800046e:	4b08      	ldr	r3, [pc, #32]	@ (8000490 <SysTick_Handler+0x50>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000476:	d105      	bne.n	8000484 <SysTick_Handler+0x44>
	{
		two_second_elapsed = true;
 8000478:	4b08      	ldr	r3, [pc, #32]	@ (800049c <SysTick_Handler+0x5c>)
 800047a:	2201      	movs	r2, #1
 800047c:	701a      	strb	r2, [r3, #0]
		two_second_counter = 0;
 800047e:	4b04      	ldr	r3, [pc, #16]	@ (8000490 <SysTick_Handler+0x50>)
 8000480:	2200      	movs	r2, #0
 8000482:	601a      	str	r2, [r3, #0]
	}
}
 8000484:	bf00      	nop
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	20000080 	.word	0x20000080
 8000494:	20000078 	.word	0x20000078
 8000498:	2000007c 	.word	0x2000007c
 800049c:	2000007d 	.word	0x2000007d

080004a0 <printf>:
// For USART Print -- Could be moved to UART module
//******************************************************************************************
static uint8_t buffer[200];
static char command_buffer[100];

int printf (const char *format, ...) {
 80004a0:	b40f      	push	{r0, r1, r2, r3}
 80004a2:	b580      	push	{r7, lr}
 80004a4:	b082      	sub	sp, #8
 80004a6:	af00      	add	r7, sp, #0
    va_list aptr;
    int ret;

    va_start (aptr, format);
 80004a8:	f107 0314 	add.w	r3, r7, #20
 80004ac:	603b      	str	r3, [r7, #0]
    ret = vsprintf ((char*)buffer, format, aptr);
 80004ae:	683a      	ldr	r2, [r7, #0]
 80004b0:	6939      	ldr	r1, [r7, #16]
 80004b2:	4809      	ldr	r0, [pc, #36]	@ (80004d8 <printf+0x38>)
 80004b4:	f000 fe3e 	bl	8001134 <vsiprintf>
 80004b8:	6078      	str	r0, [r7, #4]
    va_end (aptr);

    USART_Write (USART2, buffer, ret);
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	461a      	mov	r2, r3
 80004be:	4906      	ldr	r1, [pc, #24]	@ (80004d8 <printf+0x38>)
 80004c0:	4806      	ldr	r0, [pc, #24]	@ (80004dc <printf+0x3c>)
 80004c2:	f000 fdc5 	bl	8001050 <USART_Write>

    return ret;
 80004c6:	687b      	ldr	r3, [r7, #4]
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	3708      	adds	r7, #8
 80004cc:	46bd      	mov	sp, r7
 80004ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80004d2:	b004      	add	sp, #16
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	20000088 	.word	0x20000088
 80004dc:	40004400 	.word	0x40004400

080004e0 <parse_pattern>:

static int parse_pattern(const char *s, uint8_t *out_bits) {
 80004e0:	b480      	push	{r7}
 80004e2:	b087      	sub	sp, #28
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	6039      	str	r1, [r7, #0]
    uint8_t b = 0;
 80004ea:	2300      	movs	r3, #0
 80004ec:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < 4; i++){
 80004ee:	2300      	movs	r3, #0
 80004f0:	613b      	str	r3, [r7, #16]
 80004f2:	e01a      	b.n	800052a <parse_pattern+0x4a>
        char c = s[i];
 80004f4:	693b      	ldr	r3, [r7, #16]
 80004f6:	687a      	ldr	r2, [r7, #4]
 80004f8:	4413      	add	r3, r2
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	73fb      	strb	r3, [r7, #15]
        if (c != '0' && c != '1') return 0;
 80004fe:	7bfb      	ldrb	r3, [r7, #15]
 8000500:	2b30      	cmp	r3, #48	@ 0x30
 8000502:	d004      	beq.n	800050e <parse_pattern+0x2e>
 8000504:	7bfb      	ldrb	r3, [r7, #15]
 8000506:	2b31      	cmp	r3, #49	@ 0x31
 8000508:	d001      	beq.n	800050e <parse_pattern+0x2e>
 800050a:	2300      	movs	r3, #0
 800050c:	e014      	b.n	8000538 <parse_pattern+0x58>
        b = (uint8_t)((b << 1) | (c - '0'));
 800050e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000512:	005b      	lsls	r3, r3, #1
 8000514:	b25a      	sxtb	r2, r3
 8000516:	7bfb      	ldrb	r3, [r7, #15]
 8000518:	3b30      	subs	r3, #48	@ 0x30
 800051a:	b2db      	uxtb	r3, r3
 800051c:	b25b      	sxtb	r3, r3
 800051e:	4313      	orrs	r3, r2
 8000520:	b25b      	sxtb	r3, r3
 8000522:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < 4; i++){
 8000524:	693b      	ldr	r3, [r7, #16]
 8000526:	3301      	adds	r3, #1
 8000528:	613b      	str	r3, [r7, #16]
 800052a:	693b      	ldr	r3, [r7, #16]
 800052c:	2b03      	cmp	r3, #3
 800052e:	dde1      	ble.n	80004f4 <parse_pattern+0x14>
    }
    *out_bits = b;
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	7dfa      	ldrb	r2, [r7, #23]
 8000534:	701a      	strb	r2, [r3, #0]
    return 1;
 8000536:	2301      	movs	r3, #1
}
 8000538:	4618      	mov	r0, r3
 800053a:	371c      	adds	r7, #28
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr

08000544 <HAL_GPIO_EXTI_Callback>:

//******************************************************************************************
// This function is to handle interrupts generated because of pressing B1 switch
//******************************************************************************************
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 800054e:	88fb      	ldrh	r3, [r7, #6]
 8000550:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000554:	d158      	bne.n	8000608 <HAL_GPIO_EXTI_Callback+0xc4>
		// Add your code ---

		// If more than 2 second then Switch to Pattern Mode

		// Reset Switch time (in milliseconds)
		B1_Switch_Press_time_ms = 0;
 8000556:	4b2e      	ldr	r3, [pc, #184]	@ (8000610 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]

		while(GPIO_PIN_RESET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 800055c:	e00b      	b.n	8000576 <HAL_GPIO_EXTI_Callback+0x32>
		{
			// Blocking code --

			// We can use SysTick Interrupt to keep track of time
			while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
 800055e:	bf00      	nop
 8000560:	4b2c      	ldr	r3, [pc, #176]	@ (8000614 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000568:	2b00      	cmp	r3, #0
 800056a:	d0f9      	beq.n	8000560 <HAL_GPIO_EXTI_Callback+0x1c>
			{
				// do nothing -- Blocking code -- 1ms timer
			}
			B1_Switch_Press_time_ms++;
 800056c:	4b28      	ldr	r3, [pc, #160]	@ (8000610 <HAL_GPIO_EXTI_Callback+0xcc>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	3301      	adds	r3, #1
 8000572:	4a27      	ldr	r2, [pc, #156]	@ (8000610 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000574:	6013      	str	r3, [r2, #0]
		while(GPIO_PIN_RESET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 8000576:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800057a:	4827      	ldr	r0, [pc, #156]	@ (8000618 <HAL_GPIO_EXTI_Callback+0xd4>)
 800057c:	f000 fbda 	bl	8000d34 <HAL_GPIO_ReadPin>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d0eb      	beq.n	800055e <HAL_GPIO_EXTI_Callback+0x1a>

			// If we are in Auto mode and B1 Switch is Pressed for 2 Seconds or more then Switch to Pattern Mode
			// ---- Add your code
		}
		if (B1_Switch_Press_time_ms >= 2000){
 8000586:	4b22      	ldr	r3, [pc, #136]	@ (8000610 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800058e:	d30e      	bcc.n	80005ae <HAL_GPIO_EXTI_Callback+0x6a>
			OP_MODE = PATTERN_MODE;
 8000590:	4b22      	ldr	r3, [pc, #136]	@ (800061c <HAL_GPIO_EXTI_Callback+0xd8>)
 8000592:	2202      	movs	r2, #2
 8000594:	701a      	strb	r2, [r3, #0]
			printf("%s\r\n", "***PATTERN MODE***");
 8000596:	4922      	ldr	r1, [pc, #136]	@ (8000620 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000598:	4822      	ldr	r0, [pc, #136]	@ (8000624 <HAL_GPIO_EXTI_Callback+0xe0>)
 800059a:	f7ff ff81 	bl	80004a0 <printf>
			pattern_idx = 0;
 800059e:	4b22      	ldr	r3, [pc, #136]	@ (8000628 <HAL_GPIO_EXTI_Callback+0xe4>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	701a      	strb	r2, [r3, #0]
			printf("%s\r\n","Entered Pattern Mode. When ready pleas type Pxxxx (x in {0,1}) or EXIT, then Enter.");
 80005a4:	4921      	ldr	r1, [pc, #132]	@ (800062c <HAL_GPIO_EXTI_Callback+0xe8>)
 80005a6:	481f      	ldr	r0, [pc, #124]	@ (8000624 <HAL_GPIO_EXTI_Callback+0xe0>)
 80005a8:	f7ff ff7a 	bl	80004a0 <printf>
//		else{
//			OP_MODE = MANUAL_MODE;
//			printf("%s\r\n", "***MANUAL MODE***");
//		}
	}
}
 80005ac:	e02c      	b.n	8000608 <HAL_GPIO_EXTI_Callback+0xc4>
		else if(auto_mode && (B1_Switch_Press_time_ms <= 3000)){
 80005ae:	4b20      	ldr	r3, [pc, #128]	@ (8000630 <HAL_GPIO_EXTI_Callback+0xec>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d010      	beq.n	80005d8 <HAL_GPIO_EXTI_Callback+0x94>
 80005b6:	4b16      	ldr	r3, [pc, #88]	@ (8000610 <HAL_GPIO_EXTI_Callback+0xcc>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80005be:	4293      	cmp	r3, r2
 80005c0:	d80a      	bhi.n	80005d8 <HAL_GPIO_EXTI_Callback+0x94>
		    		printf("%s\r\n", "SWITCHING TO MANUAL MODE");
 80005c2:	491c      	ldr	r1, [pc, #112]	@ (8000634 <HAL_GPIO_EXTI_Callback+0xf0>)
 80005c4:	4817      	ldr	r0, [pc, #92]	@ (8000624 <HAL_GPIO_EXTI_Callback+0xe0>)
 80005c6:	f7ff ff6b 	bl	80004a0 <printf>
		    		auto_mode = 0;
 80005ca:	4b19      	ldr	r3, [pc, #100]	@ (8000630 <HAL_GPIO_EXTI_Callback+0xec>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
		    		OP_MODE = MANUAL_MODE;
 80005d0:	4b12      	ldr	r3, [pc, #72]	@ (800061c <HAL_GPIO_EXTI_Callback+0xd8>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	701a      	strb	r2, [r3, #0]
}
 80005d6:	e017      	b.n	8000608 <HAL_GPIO_EXTI_Callback+0xc4>
		else if ((OP_MODE == MANUAL_MODE || OP_MODE == PATTERN_MODE) && (B1_Switch_Press_time_ms <= 3000)){
 80005d8:	4b10      	ldr	r3, [pc, #64]	@ (800061c <HAL_GPIO_EXTI_Callback+0xd8>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d003      	beq.n	80005e8 <HAL_GPIO_EXTI_Callback+0xa4>
 80005e0:	4b0e      	ldr	r3, [pc, #56]	@ (800061c <HAL_GPIO_EXTI_Callback+0xd8>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b02      	cmp	r3, #2
 80005e6:	d10f      	bne.n	8000608 <HAL_GPIO_EXTI_Callback+0xc4>
 80005e8:	4b09      	ldr	r3, [pc, #36]	@ (8000610 <HAL_GPIO_EXTI_Callback+0xcc>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d809      	bhi.n	8000608 <HAL_GPIO_EXTI_Callback+0xc4>
		    		printf("%s\r\n", "SWITCHING TO AUTO MODE");
 80005f4:	4910      	ldr	r1, [pc, #64]	@ (8000638 <HAL_GPIO_EXTI_Callback+0xf4>)
 80005f6:	480b      	ldr	r0, [pc, #44]	@ (8000624 <HAL_GPIO_EXTI_Callback+0xe0>)
 80005f8:	f7ff ff52 	bl	80004a0 <printf>
		    		auto_mode = 1;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000630 <HAL_GPIO_EXTI_Callback+0xec>)
 80005fe:	2201      	movs	r2, #1
 8000600:	601a      	str	r2, [r3, #0]
		    		OP_MODE = AUTO_MODE;
 8000602:	4b06      	ldr	r3, [pc, #24]	@ (800061c <HAL_GPIO_EXTI_Callback+0xd8>)
 8000604:	2200      	movs	r2, #0
 8000606:	701a      	strb	r2, [r3, #0]
}
 8000608:	bf00      	nop
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000074 	.word	0x20000074
 8000614:	e000e010 	.word	0xe000e010
 8000618:	48000800 	.word	0x48000800
 800061c:	20000085 	.word	0x20000085
 8000620:	08001a5c 	.word	0x08001a5c
 8000624:	08001a70 	.word	0x08001a70
 8000628:	20000084 	.word	0x20000084
 800062c:	08001a78 	.word	0x08001a78
 8000630:	20000000 	.word	0x20000000
 8000634:	08001acc 	.word	0x08001acc
 8000638:	08001ae8 	.word	0x08001ae8

0800063c <run_demo>:

//******************************************************************************************
// Run Demo -- main function with forever loop
//******************************************************************************************
void run_demo( void )
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af02      	add	r7, sp, #8
	// Default mode is Auto Mode
	printf("%s\r\n", "STARTING IN AUTO MODE");
 8000642:	4985      	ldr	r1, [pc, #532]	@ (8000858 <run_demo+0x21c>)
 8000644:	4885      	ldr	r0, [pc, #532]	@ (800085c <run_demo+0x220>)
 8000646:	f7ff ff2b 	bl	80004a0 <printf>

	// Set buffer for Command Buffer
	uint32_t input_index = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	60fb      	str	r3, [r7, #12]
	memset(command_buffer, 0, 100);
 800064e:	2264      	movs	r2, #100	@ 0x64
 8000650:	2100      	movs	r1, #0
 8000652:	4883      	ldr	r0, [pc, #524]	@ (8000860 <run_demo+0x224>)
 8000654:	f000 fd78 	bl	8001148 <memset>

	// Start forever loop
	while(1)
	{
		// Read USART to see if USER typed any commands
		char one_char = USART_Read_NB(USART2);
 8000658:	4882      	ldr	r0, [pc, #520]	@ (8000864 <run_demo+0x228>)
 800065a:	f000 fce3 	bl	8001024 <USART_Read_NB>
 800065e:	4603      	mov	r3, r0
 8000660:	72fb      	strb	r3, [r7, #11]
		if(auto_mode && two_second_elapsed)
 8000662:	4b81      	ldr	r3, [pc, #516]	@ (8000868 <run_demo+0x22c>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d013      	beq.n	8000692 <run_demo+0x56>
 800066a:	4b80      	ldr	r3, [pc, #512]	@ (800086c <run_demo+0x230>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d00f      	beq.n	8000692 <run_demo+0x56>
		{
			if(led_isOn())
 8000672:	f7ff fe74 	bl	800035e <led_isOn>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d003      	beq.n	8000684 <run_demo+0x48>
			{
				led_set(0);
 800067c:	2000      	movs	r0, #0
 800067e:	f7ff fe4f 	bl	8000320 <led_set>
 8000682:	e002      	b.n	800068a <run_demo+0x4e>
			}
			else
			{
				led_set(1);
 8000684:	2001      	movs	r0, #1
 8000686:	f7ff fe4b 	bl	8000320 <led_set>
			}
			two_second_elapsed = 0;
 800068a:	4b78      	ldr	r3, [pc, #480]	@ (800086c <run_demo+0x230>)
 800068c:	2200      	movs	r2, #0
 800068e:	701a      	strb	r2, [r3, #0]
 8000690:	e0e1      	b.n	8000856 <run_demo+0x21a>
		}
		else if(OP_MODE == PATTERN_MODE){
 8000692:	4b77      	ldr	r3, [pc, #476]	@ (8000870 <run_demo+0x234>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b02      	cmp	r3, #2
 8000698:	f040 80a1 	bne.w	80007de <run_demo+0x1a2>
			if (one_second_elapsed) { //Execute the current pattern
 800069c:	4b75      	ldr	r3, [pc, #468]	@ (8000874 <run_demo+0x238>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d021      	beq.n	80006e8 <run_demo+0xac>
		        uint8_t bit = (current_pattern >> (3 - pattern_idx)) & 0x1;
 80006a4:	4b74      	ldr	r3, [pc, #464]	@ (8000878 <run_demo+0x23c>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	461a      	mov	r2, r3
 80006aa:	4b74      	ldr	r3, [pc, #464]	@ (800087c <run_demo+0x240>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	f1c3 0303 	rsb	r3, r3, #3
 80006b2:	fa42 f303 	asr.w	r3, r2, r3
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	f003 0301 	and.w	r3, r3, #1
 80006bc:	72bb      	strb	r3, [r7, #10]
		        led_set(bit);
 80006be:	7abb      	ldrb	r3, [r7, #10]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	bf14      	ite	ne
 80006c4:	2301      	movne	r3, #1
 80006c6:	2300      	moveq	r3, #0
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	4618      	mov	r0, r3
 80006cc:	f7ff fe28 	bl	8000320 <led_set>
		        pattern_idx = (uint8_t)((pattern_idx + 1) & 0x3);
 80006d0:	4b6a      	ldr	r3, [pc, #424]	@ (800087c <run_demo+0x240>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	3301      	adds	r3, #1
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	f003 0303 	and.w	r3, r3, #3
 80006dc:	b2da      	uxtb	r2, r3
 80006de:	4b67      	ldr	r3, [pc, #412]	@ (800087c <run_demo+0x240>)
 80006e0:	701a      	strb	r2, [r3, #0]
		        one_second_elapsed = 0;
 80006e2:	4b64      	ldr	r3, [pc, #400]	@ (8000874 <run_demo+0x238>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	701a      	strb	r2, [r3, #0]
			}
			if (one_char == 0x0D){
 80006e8:	7afb      	ldrb	r3, [r7, #11]
 80006ea:	2b0d      	cmp	r3, #13
 80006ec:	d15f      	bne.n	80007ae <run_demo+0x172>
				printf("%s\r\n", "\0");
 80006ee:	4964      	ldr	r1, [pc, #400]	@ (8000880 <run_demo+0x244>)
 80006f0:	485a      	ldr	r0, [pc, #360]	@ (800085c <run_demo+0x220>)
 80006f2:	f7ff fed5 	bl	80004a0 <printf>
				printf("%s\r", "enter pattern");
 80006f6:	4963      	ldr	r1, [pc, #396]	@ (8000884 <run_demo+0x248>)
 80006f8:	4863      	ldr	r0, [pc, #396]	@ (8000888 <run_demo+0x24c>)
 80006fa:	f7ff fed1 	bl	80004a0 <printf>
				printf("%s\r\n", "\0");
 80006fe:	4960      	ldr	r1, [pc, #384]	@ (8000880 <run_demo+0x244>)
 8000700:	4856      	ldr	r0, [pc, #344]	@ (800085c <run_demo+0x220>)
 8000702:	f7ff fecd 	bl	80004a0 <printf>

				if (!strcmp("EXIT", command_buffer)) {
 8000706:	4956      	ldr	r1, [pc, #344]	@ (8000860 <run_demo+0x224>)
 8000708:	4860      	ldr	r0, [pc, #384]	@ (800088c <run_demo+0x250>)
 800070a:	f7ff fd61 	bl	80001d0 <strcmp>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d111      	bne.n	8000738 <run_demo+0xfc>
							printf("%s\r\n", "Exiting PATTERN MODE -> AUTO MODE");
 8000714:	495e      	ldr	r1, [pc, #376]	@ (8000890 <run_demo+0x254>)
 8000716:	4851      	ldr	r0, [pc, #324]	@ (800085c <run_demo+0x220>)
 8000718:	f7ff fec2 	bl	80004a0 <printf>
							auto_mode = 1; //was this why we couldnt leave?
 800071c:	4b52      	ldr	r3, [pc, #328]	@ (8000868 <run_demo+0x22c>)
 800071e:	2201      	movs	r2, #1
 8000720:	601a      	str	r2, [r3, #0]
				            OP_MODE = AUTO_MODE;
 8000722:	4b53      	ldr	r3, [pc, #332]	@ (8000870 <run_demo+0x234>)
 8000724:	2200      	movs	r2, #0
 8000726:	701a      	strb	r2, [r3, #0]
				            memset(command_buffer, 0, sizeof(command_buffer));
 8000728:	2264      	movs	r2, #100	@ 0x64
 800072a:	2100      	movs	r1, #0
 800072c:	484c      	ldr	r0, [pc, #304]	@ (8000860 <run_demo+0x224>)
 800072e:	f000 fd0b 	bl	8001148 <memset>
				            input_index = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
				            continue; //still stuck in auto mode, force leave?
 8000736:	e08e      	b.n	8000856 <run_demo+0x21a>
				} else if (command_buffer[0] == 'P') {
 8000738:	4b49      	ldr	r3, [pc, #292]	@ (8000860 <run_demo+0x224>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2b50      	cmp	r3, #80	@ 0x50
 800073e:	d12e      	bne.n	800079e <run_demo+0x162>
					size_t len = strlen(command_buffer);
 8000740:	4847      	ldr	r0, [pc, #284]	@ (8000860 <run_demo+0x224>)
 8000742:	f7ff fd4f 	bl	80001e4 <strlen>
 8000746:	6078      	str	r0, [r7, #4]
					if (len == 5) {
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2b05      	cmp	r3, #5
 800074c:	d123      	bne.n	8000796 <run_demo+0x15a>
						uint8_t bits;
					    if (parse_pattern(&command_buffer[1], &bits)) {
 800074e:	1cfb      	adds	r3, r7, #3
 8000750:	4619      	mov	r1, r3
 8000752:	4850      	ldr	r0, [pc, #320]	@ (8000894 <run_demo+0x258>)
 8000754:	f7ff fec4 	bl	80004e0 <parse_pattern>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d016      	beq.n	800078c <run_demo+0x150>
					    	current_pattern = bits;
 800075e:	78fa      	ldrb	r2, [r7, #3]
 8000760:	4b45      	ldr	r3, [pc, #276]	@ (8000878 <run_demo+0x23c>)
 8000762:	701a      	strb	r2, [r3, #0]
					        pattern_idx = 0;
 8000764:	4b45      	ldr	r3, [pc, #276]	@ (800087c <run_demo+0x240>)
 8000766:	2200      	movs	r2, #0
 8000768:	701a      	strb	r2, [r3, #0]
					        printf("OK: Pattern set to P%c%c%c%c\r\n",command_buffer[1], command_buffer[2],command_buffer[3], command_buffer[4]);
 800076a:	4b3d      	ldr	r3, [pc, #244]	@ (8000860 <run_demo+0x224>)
 800076c:	785b      	ldrb	r3, [r3, #1]
 800076e:	4619      	mov	r1, r3
 8000770:	4b3b      	ldr	r3, [pc, #236]	@ (8000860 <run_demo+0x224>)
 8000772:	789b      	ldrb	r3, [r3, #2]
 8000774:	461a      	mov	r2, r3
 8000776:	4b3a      	ldr	r3, [pc, #232]	@ (8000860 <run_demo+0x224>)
 8000778:	78db      	ldrb	r3, [r3, #3]
 800077a:	4618      	mov	r0, r3
 800077c:	4b38      	ldr	r3, [pc, #224]	@ (8000860 <run_demo+0x224>)
 800077e:	791b      	ldrb	r3, [r3, #4]
 8000780:	9300      	str	r3, [sp, #0]
 8000782:	4603      	mov	r3, r0
 8000784:	4844      	ldr	r0, [pc, #272]	@ (8000898 <run_demo+0x25c>)
 8000786:	f7ff fe8b 	bl	80004a0 <printf>
 800078a:	e008      	b.n	800079e <run_demo+0x162>
					    } else {
					    	printf("%s\r\n", "Bad Pattern");
 800078c:	4943      	ldr	r1, [pc, #268]	@ (800089c <run_demo+0x260>)
 800078e:	4833      	ldr	r0, [pc, #204]	@ (800085c <run_demo+0x220>)
 8000790:	f7ff fe86 	bl	80004a0 <printf>
 8000794:	e003      	b.n	800079e <run_demo+0x162>
					    }
					} else {
						printf("%s\r\n", "Pattern too long or short");
 8000796:	4942      	ldr	r1, [pc, #264]	@ (80008a0 <run_demo+0x264>)
 8000798:	4830      	ldr	r0, [pc, #192]	@ (800085c <run_demo+0x220>)
 800079a:	f7ff fe81 	bl	80004a0 <printf>
					}
				}
		        memset(command_buffer, 0, 100);
 800079e:	2264      	movs	r2, #100	@ 0x64
 80007a0:	2100      	movs	r1, #0
 80007a2:	482f      	ldr	r0, [pc, #188]	@ (8000860 <run_demo+0x224>)
 80007a4:	f000 fcd0 	bl	8001148 <memset>
		        input_index = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	e754      	b.n	8000658 <run_demo+0x1c>
			//} else if(one_char != '\0') {
			} else if (one_char != '\0' && input_index < sizeof(command_buffer)-1) {
 80007ae:	7afb      	ldrb	r3, [r7, #11]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	f43f af51 	beq.w	8000658 <run_demo+0x1c>
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	2b62      	cmp	r3, #98	@ 0x62
 80007ba:	f63f af4d 	bhi.w	8000658 <run_demo+0x1c>
				command_buffer[input_index++] = one_char;
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	1c5a      	adds	r2, r3, #1
 80007c2:	60fa      	str	r2, [r7, #12]
 80007c4:	4926      	ldr	r1, [pc, #152]	@ (8000860 <run_demo+0x224>)
 80007c6:	7afa      	ldrb	r2, [r7, #11]
 80007c8:	54ca      	strb	r2, [r1, r3]
				command_buffer[input_index]   = '\0';
 80007ca:	4a25      	ldr	r2, [pc, #148]	@ (8000860 <run_demo+0x224>)
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	4413      	add	r3, r2
 80007d0:	2200      	movs	r2, #0
 80007d2:	701a      	strb	r2, [r3, #0]
				printf("\r%s", command_buffer);
 80007d4:	4922      	ldr	r1, [pc, #136]	@ (8000860 <run_demo+0x224>)
 80007d6:	4833      	ldr	r0, [pc, #204]	@ (80008a4 <run_demo+0x268>)
 80007d8:	f7ff fe62 	bl	80004a0 <printf>
 80007dc:	e73c      	b.n	8000658 <run_demo+0x1c>
			}
		}
		else if(!auto_mode)
 80007de:	4b22      	ldr	r3, [pc, #136]	@ (8000868 <run_demo+0x22c>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	f47f af38 	bne.w	8000658 <run_demo+0x1c>
		{
			// toggle User LED based on user input
			if(one_char == 0x0D) // Enter Key
 80007e8:	7afb      	ldrb	r3, [r7, #11]
 80007ea:	2b0d      	cmp	r3, #13
 80007ec:	d125      	bne.n	800083a <run_demo+0x1fe>
			{
				printf("%s\r\n","\0");
 80007ee:	4924      	ldr	r1, [pc, #144]	@ (8000880 <run_demo+0x244>)
 80007f0:	481a      	ldr	r0, [pc, #104]	@ (800085c <run_demo+0x220>)
 80007f2:	f7ff fe55 	bl	80004a0 <printf>
				if(!strcmp("ON",command_buffer))
 80007f6:	491a      	ldr	r1, [pc, #104]	@ (8000860 <run_demo+0x224>)
 80007f8:	482b      	ldr	r0, [pc, #172]	@ (80008a8 <run_demo+0x26c>)
 80007fa:	f7ff fce9 	bl	80001d0 <strcmp>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d103      	bne.n	800080c <run_demo+0x1d0>
				{
					led_set(1);
 8000804:	2001      	movs	r0, #1
 8000806:	f7ff fd8b 	bl	8000320 <led_set>
 800080a:	e00e      	b.n	800082a <run_demo+0x1ee>
				}
				else if(!strcmp("OFF",command_buffer))
 800080c:	4914      	ldr	r1, [pc, #80]	@ (8000860 <run_demo+0x224>)
 800080e:	4827      	ldr	r0, [pc, #156]	@ (80008ac <run_demo+0x270>)
 8000810:	f7ff fcde 	bl	80001d0 <strcmp>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d103      	bne.n	8000822 <run_demo+0x1e6>
				{
					led_set(0);
 800081a:	2000      	movs	r0, #0
 800081c:	f7ff fd80 	bl	8000320 <led_set>
 8000820:	e003      	b.n	800082a <run_demo+0x1ee>
				}
				else
				{
					printf("Invalid Command: %s\r\n", command_buffer);
 8000822:	490f      	ldr	r1, [pc, #60]	@ (8000860 <run_demo+0x224>)
 8000824:	4822      	ldr	r0, [pc, #136]	@ (80008b0 <run_demo+0x274>)
 8000826:	f7ff fe3b 	bl	80004a0 <printf>
				}
				memset(command_buffer, 0, 100);
 800082a:	2264      	movs	r2, #100	@ 0x64
 800082c:	2100      	movs	r1, #0
 800082e:	480c      	ldr	r0, [pc, #48]	@ (8000860 <run_demo+0x224>)
 8000830:	f000 fc8a 	bl	8001148 <memset>
				input_index = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	e70e      	b.n	8000658 <run_demo+0x1c>
			}
			else if(one_char != '\0')
 800083a:	7afb      	ldrb	r3, [r7, #11]
 800083c:	2b00      	cmp	r3, #0
 800083e:	f43f af0b 	beq.w	8000658 <run_demo+0x1c>
			{
				command_buffer[input_index++] = one_char;
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	1c5a      	adds	r2, r3, #1
 8000846:	60fa      	str	r2, [r7, #12]
 8000848:	4905      	ldr	r1, [pc, #20]	@ (8000860 <run_demo+0x224>)
 800084a:	7afa      	ldrb	r2, [r7, #11]
 800084c:	54ca      	strb	r2, [r1, r3]
				printf("\r%s", command_buffer);
 800084e:	4904      	ldr	r1, [pc, #16]	@ (8000860 <run_demo+0x224>)
 8000850:	4814      	ldr	r0, [pc, #80]	@ (80008a4 <run_demo+0x268>)
 8000852:	f7ff fe25 	bl	80004a0 <printf>
	{
 8000856:	e6ff      	b.n	8000658 <run_demo+0x1c>
 8000858:	08001b00 	.word	0x08001b00
 800085c:	08001a70 	.word	0x08001a70
 8000860:	20000150 	.word	0x20000150
 8000864:	40004400 	.word	0x40004400
 8000868:	20000000 	.word	0x20000000
 800086c:	2000007d 	.word	0x2000007d
 8000870:	20000085 	.word	0x20000085
 8000874:	2000007c 	.word	0x2000007c
 8000878:	20000004 	.word	0x20000004
 800087c:	20000084 	.word	0x20000084
 8000880:	08001b18 	.word	0x08001b18
 8000884:	08001b1c 	.word	0x08001b1c
 8000888:	08001b2c 	.word	0x08001b2c
 800088c:	08001b30 	.word	0x08001b30
 8000890:	08001b38 	.word	0x08001b38
 8000894:	20000151 	.word	0x20000151
 8000898:	08001b5c 	.word	0x08001b5c
 800089c:	08001b7c 	.word	0x08001b7c
 80008a0:	08001b88 	.word	0x08001b88
 80008a4:	08001ba4 	.word	0x08001ba4
 80008a8:	08001ba8 	.word	0x08001ba8
 80008ac:	08001bac 	.word	0x08001bac
 80008b0:	08001bb0 	.word	0x08001bb0

080008b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	db0b      	blt.n	80008de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	f003 021f 	and.w	r2, r3, #31
 80008cc:	4907      	ldr	r1, [pc, #28]	@ (80008ec <__NVIC_EnableIRQ+0x38>)
 80008ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d2:	095b      	lsrs	r3, r3, #5
 80008d4:	2001      	movs	r0, #1
 80008d6:	fa00 f202 	lsl.w	r2, r0, r2
 80008da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	e000e100 	.word	0xe000e100

080008f0 <GPIO_Init>:

/*----------------------------------------------------------------------------*/
/* Configure GPIO                                                             */
/*----------------------------------------------------------------------------*/
void GPIO_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	@ 0x28
 80008f4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
 8000904:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000906:	4b22      	ldr	r3, [pc, #136]	@ (8000990 <GPIO_Init+0xa0>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090a:	4a21      	ldr	r2, [pc, #132]	@ (8000990 <GPIO_Init+0xa0>)
 800090c:	f043 0304 	orr.w	r3, r3, #4
 8000910:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000912:	4b1f      	ldr	r3, [pc, #124]	@ (8000990 <GPIO_Init+0xa0>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000916:	f003 0304 	and.w	r3, r3, #4
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800091e:	4b1c      	ldr	r3, [pc, #112]	@ (8000990 <GPIO_Init+0xa0>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000922:	4a1b      	ldr	r2, [pc, #108]	@ (8000990 <GPIO_Init+0xa0>)
 8000924:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000928:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800092a:	4b19      	ldr	r3, [pc, #100]	@ (8000990 <GPIO_Init+0xa0>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	4b16      	ldr	r3, [pc, #88]	@ (8000990 <GPIO_Init+0xa0>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800093a:	4a15      	ldr	r2, [pc, #84]	@ (8000990 <GPIO_Init+0xa0>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000942:	4b13      	ldr	r3, [pc, #76]	@ (8000990 <GPIO_Init+0xa0>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094e:	4b10      	ldr	r3, [pc, #64]	@ (8000990 <GPIO_Init+0xa0>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000952:	4a0f      	ldr	r2, [pc, #60]	@ (8000990 <GPIO_Init+0xa0>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800095a:	4b0d      	ldr	r3, [pc, #52]	@ (8000990 <GPIO_Init+0xa0>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000966:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800096a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800096c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000970:	61bb      	str	r3, [r7, #24]


	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	4619      	mov	r1, r3
 800097c:	4805      	ldr	r0, [pc, #20]	@ (8000994 <GPIO_Init+0xa4>)
 800097e:	f000 f82f 	bl	80009e0 <HAL_GPIO_Init>

	/* EXTI15_10_IRQn interrupt init */

	// Note you will have to add EXTI15_10_IRQn Interrupt handler function as well
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000982:	2028      	movs	r0, #40	@ 0x28
 8000984:	f7ff ff96 	bl	80008b4 <__NVIC_EnableIRQ>
}
 8000988:	bf00      	nop
 800098a:	3728      	adds	r7, #40	@ 0x28
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40021000 	.word	0x40021000
 8000994:	48000800 	.word	0x48000800

08000998 <EXTI15_10_IRQHandler>:

//******************************************************************************************
// This function is to handle GPIO Extended Interrupt
//******************************************************************************************
void EXTI15_10_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800099c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80009a0:	f000 f9e0 	bl	8000d64 <HAL_GPIO_EXTI_IRQHandler>
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <main>:

#define LED_PIN 5

// Default Entry Point
int main(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
	// initialization Clock, LED, SysTick, USART and GPIO Modules
	clock_init();
 80009ac:	f7ff fcec 	bl	8000388 <clock_init>
	LED_Init();
 80009b0:	f7ff fc76 	bl	80002a0 <LED_Init>
	init_systick() ;
 80009b4:	f7ff fd1e 	bl	80003f4 <init_systick>
	USART2_Init(115200);
 80009b8:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 80009bc:	f000 fa5c 	bl	8000e78 <USART2_Init>
	GPIO_Init();
 80009c0:	f7ff ff96 	bl	80008f0 <GPIO_Init>

	// Run Demo
	printf("%s\r\n", "*** TEST ***");
 80009c4:	4904      	ldr	r1, [pc, #16]	@ (80009d8 <main+0x30>)
 80009c6:	4805      	ldr	r0, [pc, #20]	@ (80009dc <main+0x34>)
 80009c8:	f7ff fd6a 	bl	80004a0 <printf>
	run_demo();
 80009cc:	f7ff fe36 	bl	800063c <run_demo>
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	08001bc8 	.word	0x08001bc8
 80009dc:	08001bd8 	.word	0x08001bd8

080009e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b087      	sub	sp, #28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009ea:	2300      	movs	r3, #0
 80009ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009ee:	e17f      	b.n	8000cf0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	2101      	movs	r1, #1
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	fa01 f303 	lsl.w	r3, r1, r3
 80009fc:	4013      	ands	r3, r2
 80009fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	f000 8171 	beq.w	8000cea <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	f003 0303 	and.w	r3, r3, #3
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d005      	beq.n	8000a20 <HAL_GPIO_Init+0x40>
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	685b      	ldr	r3, [r3, #4]
 8000a18:	f003 0303 	and.w	r3, r3, #3
 8000a1c:	2b02      	cmp	r3, #2
 8000a1e:	d130      	bne.n	8000a82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	689b      	ldr	r3, [r3, #8]
 8000a24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	2203      	movs	r2, #3
 8000a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a30:	43db      	mvns	r3, r3
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	4013      	ands	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	68da      	ldr	r2, [r3, #12]
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	fa02 f303 	lsl.w	r3, r2, r3
 8000a44:	693a      	ldr	r2, [r7, #16]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	693a      	ldr	r2, [r7, #16]
 8000a4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a56:	2201      	movs	r2, #1
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	43db      	mvns	r3, r3
 8000a60:	693a      	ldr	r2, [r7, #16]
 8000a62:	4013      	ands	r3, r2
 8000a64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	091b      	lsrs	r3, r3, #4
 8000a6c:	f003 0201 	and.w	r2, r3, #1
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	fa02 f303 	lsl.w	r3, r2, r3
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f003 0303 	and.w	r3, r3, #3
 8000a8a:	2b03      	cmp	r3, #3
 8000a8c:	d118      	bne.n	8000ac0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000a94:	2201      	movs	r2, #1
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9c:	43db      	mvns	r3, r3
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	08db      	lsrs	r3, r3, #3
 8000aaa:	f003 0201 	and.w	r2, r3, #1
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	f003 0303 	and.w	r3, r3, #3
 8000ac8:	2b03      	cmp	r3, #3
 8000aca:	d017      	beq.n	8000afc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	005b      	lsls	r3, r3, #1
 8000ad6:	2203      	movs	r2, #3
 8000ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8000adc:	43db      	mvns	r3, r3
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	689a      	ldr	r2, [r3, #8]
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	fa02 f303 	lsl.w	r3, r2, r3
 8000af0:	693a      	ldr	r2, [r7, #16]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	f003 0303 	and.w	r3, r3, #3
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	d123      	bne.n	8000b50 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	08da      	lsrs	r2, r3, #3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3208      	adds	r2, #8
 8000b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b14:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	f003 0307 	and.w	r3, r3, #7
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	220f      	movs	r2, #15
 8000b20:	fa02 f303 	lsl.w	r3, r2, r3
 8000b24:	43db      	mvns	r3, r3
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	691a      	ldr	r2, [r3, #16]
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	f003 0307 	and.w	r3, r3, #7
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3c:	693a      	ldr	r2, [r7, #16]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	08da      	lsrs	r2, r3, #3
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	3208      	adds	r2, #8
 8000b4a:	6939      	ldr	r1, [r7, #16]
 8000b4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	2203      	movs	r2, #3
 8000b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b60:	43db      	mvns	r3, r3
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	4013      	ands	r3, r2
 8000b66:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	f003 0203 	and.w	r2, r3, #3
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	fa02 f303 	lsl.w	r3, r2, r3
 8000b78:	693a      	ldr	r2, [r7, #16]
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	693a      	ldr	r2, [r7, #16]
 8000b82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	f000 80ac 	beq.w	8000cea <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b92:	4b5f      	ldr	r3, [pc, #380]	@ (8000d10 <HAL_GPIO_Init+0x330>)
 8000b94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b96:	4a5e      	ldr	r2, [pc, #376]	@ (8000d10 <HAL_GPIO_Init+0x330>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b9e:	4b5c      	ldr	r3, [pc, #368]	@ (8000d10 <HAL_GPIO_Init+0x330>)
 8000ba0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000baa:	4a5a      	ldr	r2, [pc, #360]	@ (8000d14 <HAL_GPIO_Init+0x334>)
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	089b      	lsrs	r3, r3, #2
 8000bb0:	3302      	adds	r3, #2
 8000bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	f003 0303 	and.w	r3, r3, #3
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	220f      	movs	r2, #15
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43db      	mvns	r3, r3
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000bd4:	d025      	beq.n	8000c22 <HAL_GPIO_Init+0x242>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4a4f      	ldr	r2, [pc, #316]	@ (8000d18 <HAL_GPIO_Init+0x338>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d01f      	beq.n	8000c1e <HAL_GPIO_Init+0x23e>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4a4e      	ldr	r2, [pc, #312]	@ (8000d1c <HAL_GPIO_Init+0x33c>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d019      	beq.n	8000c1a <HAL_GPIO_Init+0x23a>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4a4d      	ldr	r2, [pc, #308]	@ (8000d20 <HAL_GPIO_Init+0x340>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d013      	beq.n	8000c16 <HAL_GPIO_Init+0x236>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a4c      	ldr	r2, [pc, #304]	@ (8000d24 <HAL_GPIO_Init+0x344>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d00d      	beq.n	8000c12 <HAL_GPIO_Init+0x232>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a4b      	ldr	r2, [pc, #300]	@ (8000d28 <HAL_GPIO_Init+0x348>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d007      	beq.n	8000c0e <HAL_GPIO_Init+0x22e>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a4a      	ldr	r2, [pc, #296]	@ (8000d2c <HAL_GPIO_Init+0x34c>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d101      	bne.n	8000c0a <HAL_GPIO_Init+0x22a>
 8000c06:	2306      	movs	r3, #6
 8000c08:	e00c      	b.n	8000c24 <HAL_GPIO_Init+0x244>
 8000c0a:	2307      	movs	r3, #7
 8000c0c:	e00a      	b.n	8000c24 <HAL_GPIO_Init+0x244>
 8000c0e:	2305      	movs	r3, #5
 8000c10:	e008      	b.n	8000c24 <HAL_GPIO_Init+0x244>
 8000c12:	2304      	movs	r3, #4
 8000c14:	e006      	b.n	8000c24 <HAL_GPIO_Init+0x244>
 8000c16:	2303      	movs	r3, #3
 8000c18:	e004      	b.n	8000c24 <HAL_GPIO_Init+0x244>
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	e002      	b.n	8000c24 <HAL_GPIO_Init+0x244>
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e000      	b.n	8000c24 <HAL_GPIO_Init+0x244>
 8000c22:	2300      	movs	r3, #0
 8000c24:	697a      	ldr	r2, [r7, #20]
 8000c26:	f002 0203 	and.w	r2, r2, #3
 8000c2a:	0092      	lsls	r2, r2, #2
 8000c2c:	4093      	lsls	r3, r2
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c34:	4937      	ldr	r1, [pc, #220]	@ (8000d14 <HAL_GPIO_Init+0x334>)
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	089b      	lsrs	r3, r3, #2
 8000c3a:	3302      	adds	r3, #2
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c42:	4b3b      	ldr	r3, [pc, #236]	@ (8000d30 <HAL_GPIO_Init+0x350>)
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	43db      	mvns	r3, r3
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d003      	beq.n	8000c66 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c66:	4a32      	ldr	r2, [pc, #200]	@ (8000d30 <HAL_GPIO_Init+0x350>)
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c6c:	4b30      	ldr	r3, [pc, #192]	@ (8000d30 <HAL_GPIO_Init+0x350>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	43db      	mvns	r3, r3
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d003      	beq.n	8000c90 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c90:	4a27      	ldr	r2, [pc, #156]	@ (8000d30 <HAL_GPIO_Init+0x350>)
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000c96:	4b26      	ldr	r3, [pc, #152]	@ (8000d30 <HAL_GPIO_Init+0x350>)
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d003      	beq.n	8000cba <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000cba:	4a1d      	ldr	r2, [pc, #116]	@ (8000d30 <HAL_GPIO_Init+0x350>)
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000cc0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d30 <HAL_GPIO_Init+0x350>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	693a      	ldr	r2, [r7, #16]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d003      	beq.n	8000ce4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ce4:	4a12      	ldr	r2, [pc, #72]	@ (8000d30 <HAL_GPIO_Init+0x350>)
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	3301      	adds	r3, #1
 8000cee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	f47f ae78 	bne.w	80009f0 <HAL_GPIO_Init+0x10>
  }
}
 8000d00:	bf00      	nop
 8000d02:	bf00      	nop
 8000d04:	371c      	adds	r7, #28
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40021000 	.word	0x40021000
 8000d14:	40010000 	.word	0x40010000
 8000d18:	48000400 	.word	0x48000400
 8000d1c:	48000800 	.word	0x48000800
 8000d20:	48000c00 	.word	0x48000c00
 8000d24:	48001000 	.word	0x48001000
 8000d28:	48001400 	.word	0x48001400
 8000d2c:	48001800 	.word	0x48001800
 8000d30:	40010400 	.word	0x40010400

08000d34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	691a      	ldr	r2, [r3, #16]
 8000d44:	887b      	ldrh	r3, [r7, #2]
 8000d46:	4013      	ands	r3, r2
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d002      	beq.n	8000d52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	73fb      	strb	r3, [r7, #15]
 8000d50:	e001      	b.n	8000d56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d52:	2300      	movs	r3, #0
 8000d54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d6e:	4b08      	ldr	r3, [pc, #32]	@ (8000d90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d70:	695a      	ldr	r2, [r3, #20]
 8000d72:	88fb      	ldrh	r3, [r7, #6]
 8000d74:	4013      	ands	r3, r2
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d006      	beq.n	8000d88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d7a:	4a05      	ldr	r2, [pc, #20]	@ (8000d90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d7c:	88fb      	ldrh	r3, [r7, #6]
 8000d7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d80:	88fb      	ldrh	r3, [r7, #6]
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff fbde 	bl	8000544 <HAL_GPIO_EXTI_Callback>
  }
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40010400 	.word	0x40010400

08000d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <NMI_Handler+0x4>

08000d9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <HardFault_Handler+0x4>

08000da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <MemManage_Handler+0x4>

08000dac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db0:	bf00      	nop
 8000db2:	e7fd      	b.n	8000db0 <BusFault_Handler+0x4>

08000db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <UsageFault_Handler+0x4>

08000dbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
	...

08000de8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df0:	4a14      	ldr	r2, [pc, #80]	@ (8000e44 <_sbrk+0x5c>)
 8000df2:	4b15      	ldr	r3, [pc, #84]	@ (8000e48 <_sbrk+0x60>)
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dfc:	4b13      	ldr	r3, [pc, #76]	@ (8000e4c <_sbrk+0x64>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d102      	bne.n	8000e0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e04:	4b11      	ldr	r3, [pc, #68]	@ (8000e4c <_sbrk+0x64>)
 8000e06:	4a12      	ldr	r2, [pc, #72]	@ (8000e50 <_sbrk+0x68>)
 8000e08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e0a:	4b10      	ldr	r3, [pc, #64]	@ (8000e4c <_sbrk+0x64>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4413      	add	r3, r2
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d207      	bcs.n	8000e28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e18:	f000 f99e 	bl	8001158 <__errno>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	220c      	movs	r2, #12
 8000e20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e22:	f04f 33ff 	mov.w	r3, #4294967295
 8000e26:	e009      	b.n	8000e3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e28:	4b08      	ldr	r3, [pc, #32]	@ (8000e4c <_sbrk+0x64>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e2e:	4b07      	ldr	r3, [pc, #28]	@ (8000e4c <_sbrk+0x64>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4413      	add	r3, r2
 8000e36:	4a05      	ldr	r2, [pc, #20]	@ (8000e4c <_sbrk+0x64>)
 8000e38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20018000 	.word	0x20018000
 8000e48:	00000400 	.word	0x00000400
 8000e4c:	200001b4 	.word	0x200001b4
 8000e50:	20000300 	.word	0x20000300

08000e54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e58:	4b06      	ldr	r3, [pc, #24]	@ (8000e74 <SystemInit+0x20>)
 8000e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e5e:	4a05      	ldr	r2, [pc, #20]	@ (8000e74 <SystemInit+0x20>)
 8000e60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000e68:	bf00      	nop
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <USART2_Init>:
// UART Ports:
// ===================================================
// PD.5 = USART2_TX (AF7)  |  PD.6 = USART2_RX (AF7)

void USART2_Init(int baudrate)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b087      	sub	sp, #28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
	/* Init the low level hardware : GPIO, CLOCK */
	uint32_t tmpreg;
	(void) tmpreg;	/// avoid compiler warning

	// enable USART2 CLK
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;
 8000e80:	4b65      	ldr	r3, [pc, #404]	@ (8001018 <USART2_Init+0x1a0>)
 8000e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e84:	4a64      	ldr	r2, [pc, #400]	@ (8001018 <USART2_Init+0x1a0>)
 8000e86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e8a:	6593      	str	r3, [r2, #88]	@ 0x58
	tmpreg = RCC->APB1ENR1 & RCC_APB1ENR1_USART2EN;	// Delay after an RCC peripheral clock enabling
 8000e8c:	4b62      	ldr	r3, [pc, #392]	@ (8001018 <USART2_Init+0x1a0>)
 8000e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e94:	617b      	str	r3, [r7, #20]

	// enable GPIOA CLK
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000e96:	4b60      	ldr	r3, [pc, #384]	@ (8001018 <USART2_Init+0x1a0>)
 8000e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9a:	4a5f      	ldr	r2, [pc, #380]	@ (8001018 <USART2_Init+0x1a0>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	64d3      	str	r3, [r2, #76]	@ 0x4c
	tmpreg = RCC->AHB2ENR & RCC_AHB2ENR_GPIOAEN;		// Delay after an RCC peripheral clock enabling
 8000ea2:	4b5d      	ldr	r3, [pc, #372]	@ (8001018 <USART2_Init+0x1a0>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	617b      	str	r3, [r7, #20]

	//////////// CONFIGURE GPIO /////////////////
	/* Configure the IO Speed */
	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED2_Msk | GPIO_OSPEEDR_OSPEED3_Msk);
 8000eac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000eb0:	689b      	ldr	r3, [r3, #8]
 8000eb2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000eb6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000eba:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= (0x00000003u) << GPIO_OSPEEDR_OSPEED2_Pos;
 8000ebc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000ec6:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000eca:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |= (0x00000003u) << GPIO_OSPEEDR_OSPEED3_Pos;
 8000ecc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000ed6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000eda:	6093      	str	r3, [r2, #8]

	/* Configure the IO Output Type to Push-Pull */
	GPIOA->OTYPER &= ~(GPIO_OTYPER_OT2_Msk | GPIO_OTYPER_OT3_Msk);
 8000edc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000ee6:	f023 030c 	bic.w	r3, r3, #12
 8000eea:	6053      	str	r3, [r2, #4]

	/* Set the Pull-up/down  to none */
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD2_Msk | GPIO_PUPDR_PUPD3_Msk);
 8000eec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000ef6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000efa:	60d3      	str	r3, [r2, #12]

	/* Configure Alternate functions */
	GPIOA->AFR[0] &=  ~(GPIO_AFRL_AFSEL2_Msk | GPIO_AFRL_AFSEL3_Msk);
 8000efc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f00:	6a1b      	ldr	r3, [r3, #32]
 8000f02:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000f0a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  GPIO_AF7_USART2 << GPIO_AFRL_AFSEL2_Pos;
 8000f0c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f10:	6a1b      	ldr	r3, [r3, #32]
 8000f12:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f16:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000f1a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=  GPIO_AF7_USART2 << GPIO_AFRL_AFSEL3_Pos;
 8000f1c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f20:	6a1b      	ldr	r3, [r3, #32]
 8000f22:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f26:	f443 43e0 	orr.w	r3, r3, #28672	@ 0x7000
 8000f2a:	6213      	str	r3, [r2, #32]

	/* Configure IO Direction mode to Alternate */
	GPIOA->MODER &= ~(GPIO_MODER_MODE2_Msk  | GPIO_MODER_MODE3_Msk);
 8000f2c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000f3a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x00000002u) << GPIO_MODER_MODE2_Pos;
 8000f3c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f46:	f043 0320 	orr.w	r3, r3, #32
 8000f4a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x00000002u) << GPIO_MODER_MODE3_Pos;
 8000f4c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f5a:	6013      	str	r3, [r2, #0]

	//////////// CONFIGURE USART2 /////////////////
	// Disable UART
	USART2->CR1 &= ~USART_CR1_UE;
 8000f5c:	4b2f      	ldr	r3, [pc, #188]	@ (800101c <USART2_Init+0x1a4>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a2e      	ldr	r2, [pc, #184]	@ (800101c <USART2_Init+0x1a4>)
 8000f62:	f023 0301 	bic.w	r3, r3, #1
 8000f66:	6013      	str	r3, [r2, #0]

	/* Set the UART Communication parameters */
	USART2->CR1 &= ~(USART_CR1_M1_Pos | USART_CR1_PCE_Msk | USART_CR1_OVER8_Msk | USART_CR1_TE_Msk | USART_CR1_RE_Msk);
 8000f68:	4b2c      	ldr	r3, [pc, #176]	@ (800101c <USART2_Init+0x1a4>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a2b      	ldr	r2, [pc, #172]	@ (800101c <USART2_Init+0x1a4>)
 8000f6e:	f423 4304 	bic.w	r3, r3, #33792	@ 0x8400
 8000f72:	f023 031c 	bic.w	r3, r3, #28
 8000f76:	6013      	str	r3, [r2, #0]
	USART2->CR1 |= UART_WORDLENGTH_8B | UART_PARITY_NONE | UART_OVERSAMPLING_16 | USART_CR1_TE | USART_CR1_RE;
 8000f78:	4b28      	ldr	r3, [pc, #160]	@ (800101c <USART2_Init+0x1a4>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a27      	ldr	r2, [pc, #156]	@ (800101c <USART2_Init+0x1a4>)
 8000f7e:	f043 030c 	orr.w	r3, r3, #12
 8000f82:	6013      	str	r3, [r2, #0]

	/*-------------------------- USART CR2 Configuration -----------------------*/
	/* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
	USART2->CR2 &= ~USART_CR2_STOP;
 8000f84:	4b25      	ldr	r3, [pc, #148]	@ (800101c <USART2_Init+0x1a4>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	4a24      	ldr	r2, [pc, #144]	@ (800101c <USART2_Init+0x1a4>)
 8000f8a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000f8e:	6053      	str	r3, [r2, #4]
	USART2->CR2 |= UART_STOPBITS_1 ;
 8000f90:	4b22      	ldr	r3, [pc, #136]	@ (800101c <USART2_Init+0x1a4>)
 8000f92:	4a22      	ldr	r2, [pc, #136]	@ (800101c <USART2_Init+0x1a4>)
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	6053      	str	r3, [r2, #4]

	/*-------------------------- USART CR3 Configuration -----------------------*/
	/* Configure
	 * - UART HardWare Flow Control: set CTSE and RTSE bits according to HwFlowCtl value
	 * - One-bit sampling method versus three samples' majority rule according to huart->Init.OneBitSampling */
	USART2->CR3 &= ~(USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT);
 8000f98:	4b20      	ldr	r3, [pc, #128]	@ (800101c <USART2_Init+0x1a4>)
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	4a1f      	ldr	r2, [pc, #124]	@ (800101c <USART2_Init+0x1a4>)
 8000f9e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8000fa2:	6093      	str	r3, [r2, #8]
	USART2->CR3 |= UART_HWCONTROL_NONE | UART_OVERSAMPLING_16;
 8000fa4:	4b1d      	ldr	r3, [pc, #116]	@ (800101c <USART2_Init+0x1a4>)
 8000fa6:	4a1d      	ldr	r2, [pc, #116]	@ (800101c <USART2_Init+0x1a4>)
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	6093      	str	r3, [r2, #8]

	/*-------------------------- USART BRR Configuration -----------------------*/
#define UART_DIV_SAMPLING16(__PCLK__, __BAUD__)  (((__PCLK__) + ((__BAUD__)/2U)) / (__BAUD__))
	uint32_t pclk = 16000000;		//PCLK1Freq;
 8000fac:	4b1c      	ldr	r3, [pc, #112]	@ (8001020 <USART2_Init+0x1a8>)
 8000fae:	613b      	str	r3, [r7, #16]
	uint32_t usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, baudrate));
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	085a      	lsrs	r2, r3, #1
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	441a      	add	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	60fb      	str	r3, [r7, #12]
	USART2->BRR = usartdiv;
 8000fc2:	4a16      	ldr	r2, [pc, #88]	@ (800101c <USART2_Init+0x1a4>)
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	60d3      	str	r3, [r2, #12]

	/* In asynchronous mode, the following bits must be kept cleared:
	 *  - LINEN and CLKEN bits in the USART_CR2 register
	 *  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
	USART2->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8000fc8:	4b14      	ldr	r3, [pc, #80]	@ (800101c <USART2_Init+0x1a4>)
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	4a13      	ldr	r2, [pc, #76]	@ (800101c <USART2_Init+0x1a4>)
 8000fce:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8000fd2:	6053      	str	r3, [r2, #4]
	USART2->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8000fd4:	4b11      	ldr	r3, [pc, #68]	@ (800101c <USART2_Init+0x1a4>)
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	4a10      	ldr	r2, [pc, #64]	@ (800101c <USART2_Init+0x1a4>)
 8000fda:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8000fde:	6093      	str	r3, [r2, #8]

	// Enable UART
	USART2->CR1 |= USART_CR1_UE;
 8000fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800101c <USART2_Init+0x1a4>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a0d      	ldr	r2, [pc, #52]	@ (800101c <USART2_Init+0x1a4>)
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	6013      	str	r3, [r2, #0]

	while ( (USART2->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
 8000fec:	bf00      	nop
 8000fee:	4b0b      	ldr	r3, [pc, #44]	@ (800101c <USART2_Init+0x1a4>)
 8000ff0:	69db      	ldr	r3, [r3, #28]
 8000ff2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d0f9      	beq.n	8000fee <USART2_Init+0x176>
	while ( (USART2->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
 8000ffa:	bf00      	nop
 8000ffc:	4b07      	ldr	r3, [pc, #28]	@ (800101c <USART2_Init+0x1a4>)
 8000ffe:	69db      	ldr	r3, [r3, #28]
 8001000:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d0f9      	beq.n	8000ffc <USART2_Init+0x184>
}
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	371c      	adds	r7, #28
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40021000 	.word	0x40021000
 800101c:	40004400 	.word	0x40004400
 8001020:	00f42400 	.word	0x00f42400

08001024 <USART_Read_NB>:
	// Reading USART_DR automatically clears the RXNE flag 
}

//Read from USART - Non-Blocking
uint8_t USART_Read_NB (USART_TypeDef * USARTx)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
    // SR_RXNE (Read data register not empty) bit is set by hardware
    if (!(USARTx->ISR & USART_ISR_RXNE)) {
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	69db      	ldr	r3, [r3, #28]
 8001030:	f003 0320 	and.w	r3, r3, #32
 8001034:	2b00      	cmp	r3, #0
 8001036:	d101      	bne.n	800103c <USART_Read_NB+0x18>
        // USART resets the RXNE flag automatically after reading DR
        return 0;
 8001038:	2300      	movs	r3, #0
 800103a:	e003      	b.n	8001044 <USART_Read_NB+0x20>
    }
    else {
        return ((uint8_t)(USARTx->RDR & 0xFF));
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001040:	b29b      	uxth	r3, r3
 8001042:	b2db      	uxtb	r3, r3
    // Reading USART_DR automatically clears the RXNE flag
    }
}
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <USART_Write>:

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes)
{
 8001050:	b480      	push	{r7}
 8001052:	b087      	sub	sp, #28
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
	int i;
	// A byte to be transmitted is written to the TDR (transmit data register), and the TXE (transmit empty) bit is cleared.
	// The TDR is copied to an output shift register for serialization when that register is empty, and the TXE bit is set.
	for (i = 0; i < nBytes; i++) {
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]
 8001060:	e010      	b.n	8001084 <USART_Write+0x34>
		while (!(USARTx->ISR & USART_ISR_TXE))
 8001062:	bf00      	nop
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	69db      	ldr	r3, [r3, #28]
 8001068:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800106c:	2b00      	cmp	r3, #0
 800106e:	d0f9      	beq.n	8001064 <USART_Write+0x14>
			;   							// wait until TXE (TX empty) bit is set
		USARTx->TDR = buffer[i] & 0xFF;		// writing USART_TDR automatically clears the TXE flag
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	4413      	add	r3, r2
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	461a      	mov	r2, r3
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	851a      	strh	r2, [r3, #40]	@ 0x28
	for (i = 0; i < nBytes; i++) {
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	3301      	adds	r3, #1
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	429a      	cmp	r2, r3
 800108a:	d8ea      	bhi.n	8001062 <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC))
 800108c:	bf00      	nop
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	69db      	ldr	r3, [r3, #28]
 8001092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001096:	2b00      	cmp	r3, #0
 8001098:	d0f9      	beq.n	800108e <USART_Write+0x3e>
		;  									// wait until TC bit is set
	USARTx->ISR &= ~USART_ISR_TC;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	61da      	str	r2, [r3, #28]
}   
 80010a6:	bf00      	nop
 80010a8:	371c      	adds	r7, #28
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
	...

080010b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010b8:	f7ff fecc 	bl	8000e54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010bc:	480c      	ldr	r0, [pc, #48]	@ (80010f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80010be:	490d      	ldr	r1, [pc, #52]	@ (80010f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010c0:	4a0d      	ldr	r2, [pc, #52]	@ (80010f8 <LoopForever+0xe>)
  movs r3, #0
 80010c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c4:	e002      	b.n	80010cc <LoopCopyDataInit>

080010c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ca:	3304      	adds	r3, #4

080010cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d0:	d3f9      	bcc.n	80010c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010d2:	4a0a      	ldr	r2, [pc, #40]	@ (80010fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80010d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001100 <LoopForever+0x16>)
  movs r3, #0
 80010d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d8:	e001      	b.n	80010de <LoopFillZerobss>

080010da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010dc:	3204      	adds	r2, #4

080010de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e0:	d3fb      	bcc.n	80010da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010e2:	f000 f83f 	bl	8001164 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010e6:	f7ff fc5f 	bl	80009a8 <main>

080010ea <LoopForever>:

LoopForever:
    b LoopForever
 80010ea:	e7fe      	b.n	80010ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010ec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80010f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f4:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 80010f8:	08001c20 	.word	0x08001c20
  ldr r2, =_sbss
 80010fc:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8001100:	20000300 	.word	0x20000300

08001104 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001104:	e7fe      	b.n	8001104 <ADC1_2_IRQHandler>
	...

08001108 <_vsiprintf_r>:
 8001108:	b510      	push	{r4, lr}
 800110a:	b09a      	sub	sp, #104	@ 0x68
 800110c:	2400      	movs	r4, #0
 800110e:	9100      	str	r1, [sp, #0]
 8001110:	9104      	str	r1, [sp, #16]
 8001112:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001116:	9105      	str	r1, [sp, #20]
 8001118:	9102      	str	r1, [sp, #8]
 800111a:	4905      	ldr	r1, [pc, #20]	@ (8001130 <_vsiprintf_r+0x28>)
 800111c:	9103      	str	r1, [sp, #12]
 800111e:	4669      	mov	r1, sp
 8001120:	9419      	str	r4, [sp, #100]	@ 0x64
 8001122:	f000 f999 	bl	8001458 <_svfiprintf_r>
 8001126:	9b00      	ldr	r3, [sp, #0]
 8001128:	701c      	strb	r4, [r3, #0]
 800112a:	b01a      	add	sp, #104	@ 0x68
 800112c:	bd10      	pop	{r4, pc}
 800112e:	bf00      	nop
 8001130:	ffff0208 	.word	0xffff0208

08001134 <vsiprintf>:
 8001134:	4613      	mov	r3, r2
 8001136:	460a      	mov	r2, r1
 8001138:	4601      	mov	r1, r0
 800113a:	4802      	ldr	r0, [pc, #8]	@ (8001144 <vsiprintf+0x10>)
 800113c:	6800      	ldr	r0, [r0, #0]
 800113e:	f7ff bfe3 	b.w	8001108 <_vsiprintf_r>
 8001142:	bf00      	nop
 8001144:	20000008 	.word	0x20000008

08001148 <memset>:
 8001148:	4402      	add	r2, r0
 800114a:	4603      	mov	r3, r0
 800114c:	4293      	cmp	r3, r2
 800114e:	d100      	bne.n	8001152 <memset+0xa>
 8001150:	4770      	bx	lr
 8001152:	f803 1b01 	strb.w	r1, [r3], #1
 8001156:	e7f9      	b.n	800114c <memset+0x4>

08001158 <__errno>:
 8001158:	4b01      	ldr	r3, [pc, #4]	@ (8001160 <__errno+0x8>)
 800115a:	6818      	ldr	r0, [r3, #0]
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20000008 	.word	0x20000008

08001164 <__libc_init_array>:
 8001164:	b570      	push	{r4, r5, r6, lr}
 8001166:	4d0d      	ldr	r5, [pc, #52]	@ (800119c <__libc_init_array+0x38>)
 8001168:	4c0d      	ldr	r4, [pc, #52]	@ (80011a0 <__libc_init_array+0x3c>)
 800116a:	1b64      	subs	r4, r4, r5
 800116c:	10a4      	asrs	r4, r4, #2
 800116e:	2600      	movs	r6, #0
 8001170:	42a6      	cmp	r6, r4
 8001172:	d109      	bne.n	8001188 <__libc_init_array+0x24>
 8001174:	4d0b      	ldr	r5, [pc, #44]	@ (80011a4 <__libc_init_array+0x40>)
 8001176:	4c0c      	ldr	r4, [pc, #48]	@ (80011a8 <__libc_init_array+0x44>)
 8001178:	f000 fc64 	bl	8001a44 <_init>
 800117c:	1b64      	subs	r4, r4, r5
 800117e:	10a4      	asrs	r4, r4, #2
 8001180:	2600      	movs	r6, #0
 8001182:	42a6      	cmp	r6, r4
 8001184:	d105      	bne.n	8001192 <__libc_init_array+0x2e>
 8001186:	bd70      	pop	{r4, r5, r6, pc}
 8001188:	f855 3b04 	ldr.w	r3, [r5], #4
 800118c:	4798      	blx	r3
 800118e:	3601      	adds	r6, #1
 8001190:	e7ee      	b.n	8001170 <__libc_init_array+0xc>
 8001192:	f855 3b04 	ldr.w	r3, [r5], #4
 8001196:	4798      	blx	r3
 8001198:	3601      	adds	r6, #1
 800119a:	e7f2      	b.n	8001182 <__libc_init_array+0x1e>
 800119c:	08001c18 	.word	0x08001c18
 80011a0:	08001c18 	.word	0x08001c18
 80011a4:	08001c18 	.word	0x08001c18
 80011a8:	08001c1c 	.word	0x08001c1c

080011ac <__retarget_lock_acquire_recursive>:
 80011ac:	4770      	bx	lr

080011ae <__retarget_lock_release_recursive>:
 80011ae:	4770      	bx	lr

080011b0 <_free_r>:
 80011b0:	b538      	push	{r3, r4, r5, lr}
 80011b2:	4605      	mov	r5, r0
 80011b4:	2900      	cmp	r1, #0
 80011b6:	d041      	beq.n	800123c <_free_r+0x8c>
 80011b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80011bc:	1f0c      	subs	r4, r1, #4
 80011be:	2b00      	cmp	r3, #0
 80011c0:	bfb8      	it	lt
 80011c2:	18e4      	addlt	r4, r4, r3
 80011c4:	f000 f8e0 	bl	8001388 <__malloc_lock>
 80011c8:	4a1d      	ldr	r2, [pc, #116]	@ (8001240 <_free_r+0x90>)
 80011ca:	6813      	ldr	r3, [r2, #0]
 80011cc:	b933      	cbnz	r3, 80011dc <_free_r+0x2c>
 80011ce:	6063      	str	r3, [r4, #4]
 80011d0:	6014      	str	r4, [r2, #0]
 80011d2:	4628      	mov	r0, r5
 80011d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011d8:	f000 b8dc 	b.w	8001394 <__malloc_unlock>
 80011dc:	42a3      	cmp	r3, r4
 80011de:	d908      	bls.n	80011f2 <_free_r+0x42>
 80011e0:	6820      	ldr	r0, [r4, #0]
 80011e2:	1821      	adds	r1, r4, r0
 80011e4:	428b      	cmp	r3, r1
 80011e6:	bf01      	itttt	eq
 80011e8:	6819      	ldreq	r1, [r3, #0]
 80011ea:	685b      	ldreq	r3, [r3, #4]
 80011ec:	1809      	addeq	r1, r1, r0
 80011ee:	6021      	streq	r1, [r4, #0]
 80011f0:	e7ed      	b.n	80011ce <_free_r+0x1e>
 80011f2:	461a      	mov	r2, r3
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	b10b      	cbz	r3, 80011fc <_free_r+0x4c>
 80011f8:	42a3      	cmp	r3, r4
 80011fa:	d9fa      	bls.n	80011f2 <_free_r+0x42>
 80011fc:	6811      	ldr	r1, [r2, #0]
 80011fe:	1850      	adds	r0, r2, r1
 8001200:	42a0      	cmp	r0, r4
 8001202:	d10b      	bne.n	800121c <_free_r+0x6c>
 8001204:	6820      	ldr	r0, [r4, #0]
 8001206:	4401      	add	r1, r0
 8001208:	1850      	adds	r0, r2, r1
 800120a:	4283      	cmp	r3, r0
 800120c:	6011      	str	r1, [r2, #0]
 800120e:	d1e0      	bne.n	80011d2 <_free_r+0x22>
 8001210:	6818      	ldr	r0, [r3, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	6053      	str	r3, [r2, #4]
 8001216:	4408      	add	r0, r1
 8001218:	6010      	str	r0, [r2, #0]
 800121a:	e7da      	b.n	80011d2 <_free_r+0x22>
 800121c:	d902      	bls.n	8001224 <_free_r+0x74>
 800121e:	230c      	movs	r3, #12
 8001220:	602b      	str	r3, [r5, #0]
 8001222:	e7d6      	b.n	80011d2 <_free_r+0x22>
 8001224:	6820      	ldr	r0, [r4, #0]
 8001226:	1821      	adds	r1, r4, r0
 8001228:	428b      	cmp	r3, r1
 800122a:	bf04      	itt	eq
 800122c:	6819      	ldreq	r1, [r3, #0]
 800122e:	685b      	ldreq	r3, [r3, #4]
 8001230:	6063      	str	r3, [r4, #4]
 8001232:	bf04      	itt	eq
 8001234:	1809      	addeq	r1, r1, r0
 8001236:	6021      	streq	r1, [r4, #0]
 8001238:	6054      	str	r4, [r2, #4]
 800123a:	e7ca      	b.n	80011d2 <_free_r+0x22>
 800123c:	bd38      	pop	{r3, r4, r5, pc}
 800123e:	bf00      	nop
 8001240:	200002fc 	.word	0x200002fc

08001244 <sbrk_aligned>:
 8001244:	b570      	push	{r4, r5, r6, lr}
 8001246:	4e0f      	ldr	r6, [pc, #60]	@ (8001284 <sbrk_aligned+0x40>)
 8001248:	460c      	mov	r4, r1
 800124a:	6831      	ldr	r1, [r6, #0]
 800124c:	4605      	mov	r5, r0
 800124e:	b911      	cbnz	r1, 8001256 <sbrk_aligned+0x12>
 8001250:	f000 fba4 	bl	800199c <_sbrk_r>
 8001254:	6030      	str	r0, [r6, #0]
 8001256:	4621      	mov	r1, r4
 8001258:	4628      	mov	r0, r5
 800125a:	f000 fb9f 	bl	800199c <_sbrk_r>
 800125e:	1c43      	adds	r3, r0, #1
 8001260:	d103      	bne.n	800126a <sbrk_aligned+0x26>
 8001262:	f04f 34ff 	mov.w	r4, #4294967295
 8001266:	4620      	mov	r0, r4
 8001268:	bd70      	pop	{r4, r5, r6, pc}
 800126a:	1cc4      	adds	r4, r0, #3
 800126c:	f024 0403 	bic.w	r4, r4, #3
 8001270:	42a0      	cmp	r0, r4
 8001272:	d0f8      	beq.n	8001266 <sbrk_aligned+0x22>
 8001274:	1a21      	subs	r1, r4, r0
 8001276:	4628      	mov	r0, r5
 8001278:	f000 fb90 	bl	800199c <_sbrk_r>
 800127c:	3001      	adds	r0, #1
 800127e:	d1f2      	bne.n	8001266 <sbrk_aligned+0x22>
 8001280:	e7ef      	b.n	8001262 <sbrk_aligned+0x1e>
 8001282:	bf00      	nop
 8001284:	200002f8 	.word	0x200002f8

08001288 <_malloc_r>:
 8001288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800128c:	1ccd      	adds	r5, r1, #3
 800128e:	f025 0503 	bic.w	r5, r5, #3
 8001292:	3508      	adds	r5, #8
 8001294:	2d0c      	cmp	r5, #12
 8001296:	bf38      	it	cc
 8001298:	250c      	movcc	r5, #12
 800129a:	2d00      	cmp	r5, #0
 800129c:	4606      	mov	r6, r0
 800129e:	db01      	blt.n	80012a4 <_malloc_r+0x1c>
 80012a0:	42a9      	cmp	r1, r5
 80012a2:	d904      	bls.n	80012ae <_malloc_r+0x26>
 80012a4:	230c      	movs	r3, #12
 80012a6:	6033      	str	r3, [r6, #0]
 80012a8:	2000      	movs	r0, #0
 80012aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80012ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001384 <_malloc_r+0xfc>
 80012b2:	f000 f869 	bl	8001388 <__malloc_lock>
 80012b6:	f8d8 3000 	ldr.w	r3, [r8]
 80012ba:	461c      	mov	r4, r3
 80012bc:	bb44      	cbnz	r4, 8001310 <_malloc_r+0x88>
 80012be:	4629      	mov	r1, r5
 80012c0:	4630      	mov	r0, r6
 80012c2:	f7ff ffbf 	bl	8001244 <sbrk_aligned>
 80012c6:	1c43      	adds	r3, r0, #1
 80012c8:	4604      	mov	r4, r0
 80012ca:	d158      	bne.n	800137e <_malloc_r+0xf6>
 80012cc:	f8d8 4000 	ldr.w	r4, [r8]
 80012d0:	4627      	mov	r7, r4
 80012d2:	2f00      	cmp	r7, #0
 80012d4:	d143      	bne.n	800135e <_malloc_r+0xd6>
 80012d6:	2c00      	cmp	r4, #0
 80012d8:	d04b      	beq.n	8001372 <_malloc_r+0xea>
 80012da:	6823      	ldr	r3, [r4, #0]
 80012dc:	4639      	mov	r1, r7
 80012de:	4630      	mov	r0, r6
 80012e0:	eb04 0903 	add.w	r9, r4, r3
 80012e4:	f000 fb5a 	bl	800199c <_sbrk_r>
 80012e8:	4581      	cmp	r9, r0
 80012ea:	d142      	bne.n	8001372 <_malloc_r+0xea>
 80012ec:	6821      	ldr	r1, [r4, #0]
 80012ee:	1a6d      	subs	r5, r5, r1
 80012f0:	4629      	mov	r1, r5
 80012f2:	4630      	mov	r0, r6
 80012f4:	f7ff ffa6 	bl	8001244 <sbrk_aligned>
 80012f8:	3001      	adds	r0, #1
 80012fa:	d03a      	beq.n	8001372 <_malloc_r+0xea>
 80012fc:	6823      	ldr	r3, [r4, #0]
 80012fe:	442b      	add	r3, r5
 8001300:	6023      	str	r3, [r4, #0]
 8001302:	f8d8 3000 	ldr.w	r3, [r8]
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	bb62      	cbnz	r2, 8001364 <_malloc_r+0xdc>
 800130a:	f8c8 7000 	str.w	r7, [r8]
 800130e:	e00f      	b.n	8001330 <_malloc_r+0xa8>
 8001310:	6822      	ldr	r2, [r4, #0]
 8001312:	1b52      	subs	r2, r2, r5
 8001314:	d420      	bmi.n	8001358 <_malloc_r+0xd0>
 8001316:	2a0b      	cmp	r2, #11
 8001318:	d917      	bls.n	800134a <_malloc_r+0xc2>
 800131a:	1961      	adds	r1, r4, r5
 800131c:	42a3      	cmp	r3, r4
 800131e:	6025      	str	r5, [r4, #0]
 8001320:	bf18      	it	ne
 8001322:	6059      	strne	r1, [r3, #4]
 8001324:	6863      	ldr	r3, [r4, #4]
 8001326:	bf08      	it	eq
 8001328:	f8c8 1000 	streq.w	r1, [r8]
 800132c:	5162      	str	r2, [r4, r5]
 800132e:	604b      	str	r3, [r1, #4]
 8001330:	4630      	mov	r0, r6
 8001332:	f000 f82f 	bl	8001394 <__malloc_unlock>
 8001336:	f104 000b 	add.w	r0, r4, #11
 800133a:	1d23      	adds	r3, r4, #4
 800133c:	f020 0007 	bic.w	r0, r0, #7
 8001340:	1ac2      	subs	r2, r0, r3
 8001342:	bf1c      	itt	ne
 8001344:	1a1b      	subne	r3, r3, r0
 8001346:	50a3      	strne	r3, [r4, r2]
 8001348:	e7af      	b.n	80012aa <_malloc_r+0x22>
 800134a:	6862      	ldr	r2, [r4, #4]
 800134c:	42a3      	cmp	r3, r4
 800134e:	bf0c      	ite	eq
 8001350:	f8c8 2000 	streq.w	r2, [r8]
 8001354:	605a      	strne	r2, [r3, #4]
 8001356:	e7eb      	b.n	8001330 <_malloc_r+0xa8>
 8001358:	4623      	mov	r3, r4
 800135a:	6864      	ldr	r4, [r4, #4]
 800135c:	e7ae      	b.n	80012bc <_malloc_r+0x34>
 800135e:	463c      	mov	r4, r7
 8001360:	687f      	ldr	r7, [r7, #4]
 8001362:	e7b6      	b.n	80012d2 <_malloc_r+0x4a>
 8001364:	461a      	mov	r2, r3
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	42a3      	cmp	r3, r4
 800136a:	d1fb      	bne.n	8001364 <_malloc_r+0xdc>
 800136c:	2300      	movs	r3, #0
 800136e:	6053      	str	r3, [r2, #4]
 8001370:	e7de      	b.n	8001330 <_malloc_r+0xa8>
 8001372:	230c      	movs	r3, #12
 8001374:	6033      	str	r3, [r6, #0]
 8001376:	4630      	mov	r0, r6
 8001378:	f000 f80c 	bl	8001394 <__malloc_unlock>
 800137c:	e794      	b.n	80012a8 <_malloc_r+0x20>
 800137e:	6005      	str	r5, [r0, #0]
 8001380:	e7d6      	b.n	8001330 <_malloc_r+0xa8>
 8001382:	bf00      	nop
 8001384:	200002fc 	.word	0x200002fc

08001388 <__malloc_lock>:
 8001388:	4801      	ldr	r0, [pc, #4]	@ (8001390 <__malloc_lock+0x8>)
 800138a:	f7ff bf0f 	b.w	80011ac <__retarget_lock_acquire_recursive>
 800138e:	bf00      	nop
 8001390:	200002f4 	.word	0x200002f4

08001394 <__malloc_unlock>:
 8001394:	4801      	ldr	r0, [pc, #4]	@ (800139c <__malloc_unlock+0x8>)
 8001396:	f7ff bf0a 	b.w	80011ae <__retarget_lock_release_recursive>
 800139a:	bf00      	nop
 800139c:	200002f4 	.word	0x200002f4

080013a0 <__ssputs_r>:
 80013a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80013a4:	688e      	ldr	r6, [r1, #8]
 80013a6:	461f      	mov	r7, r3
 80013a8:	42be      	cmp	r6, r7
 80013aa:	680b      	ldr	r3, [r1, #0]
 80013ac:	4682      	mov	sl, r0
 80013ae:	460c      	mov	r4, r1
 80013b0:	4690      	mov	r8, r2
 80013b2:	d82d      	bhi.n	8001410 <__ssputs_r+0x70>
 80013b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80013b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80013bc:	d026      	beq.n	800140c <__ssputs_r+0x6c>
 80013be:	6965      	ldr	r5, [r4, #20]
 80013c0:	6909      	ldr	r1, [r1, #16]
 80013c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80013c6:	eba3 0901 	sub.w	r9, r3, r1
 80013ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80013ce:	1c7b      	adds	r3, r7, #1
 80013d0:	444b      	add	r3, r9
 80013d2:	106d      	asrs	r5, r5, #1
 80013d4:	429d      	cmp	r5, r3
 80013d6:	bf38      	it	cc
 80013d8:	461d      	movcc	r5, r3
 80013da:	0553      	lsls	r3, r2, #21
 80013dc:	d527      	bpl.n	800142e <__ssputs_r+0x8e>
 80013de:	4629      	mov	r1, r5
 80013e0:	f7ff ff52 	bl	8001288 <_malloc_r>
 80013e4:	4606      	mov	r6, r0
 80013e6:	b360      	cbz	r0, 8001442 <__ssputs_r+0xa2>
 80013e8:	6921      	ldr	r1, [r4, #16]
 80013ea:	464a      	mov	r2, r9
 80013ec:	f000 fae6 	bl	80019bc <memcpy>
 80013f0:	89a3      	ldrh	r3, [r4, #12]
 80013f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80013f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013fa:	81a3      	strh	r3, [r4, #12]
 80013fc:	6126      	str	r6, [r4, #16]
 80013fe:	6165      	str	r5, [r4, #20]
 8001400:	444e      	add	r6, r9
 8001402:	eba5 0509 	sub.w	r5, r5, r9
 8001406:	6026      	str	r6, [r4, #0]
 8001408:	60a5      	str	r5, [r4, #8]
 800140a:	463e      	mov	r6, r7
 800140c:	42be      	cmp	r6, r7
 800140e:	d900      	bls.n	8001412 <__ssputs_r+0x72>
 8001410:	463e      	mov	r6, r7
 8001412:	6820      	ldr	r0, [r4, #0]
 8001414:	4632      	mov	r2, r6
 8001416:	4641      	mov	r1, r8
 8001418:	f000 faa6 	bl	8001968 <memmove>
 800141c:	68a3      	ldr	r3, [r4, #8]
 800141e:	1b9b      	subs	r3, r3, r6
 8001420:	60a3      	str	r3, [r4, #8]
 8001422:	6823      	ldr	r3, [r4, #0]
 8001424:	4433      	add	r3, r6
 8001426:	6023      	str	r3, [r4, #0]
 8001428:	2000      	movs	r0, #0
 800142a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800142e:	462a      	mov	r2, r5
 8001430:	f000 fad2 	bl	80019d8 <_realloc_r>
 8001434:	4606      	mov	r6, r0
 8001436:	2800      	cmp	r0, #0
 8001438:	d1e0      	bne.n	80013fc <__ssputs_r+0x5c>
 800143a:	6921      	ldr	r1, [r4, #16]
 800143c:	4650      	mov	r0, sl
 800143e:	f7ff feb7 	bl	80011b0 <_free_r>
 8001442:	230c      	movs	r3, #12
 8001444:	f8ca 3000 	str.w	r3, [sl]
 8001448:	89a3      	ldrh	r3, [r4, #12]
 800144a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800144e:	81a3      	strh	r3, [r4, #12]
 8001450:	f04f 30ff 	mov.w	r0, #4294967295
 8001454:	e7e9      	b.n	800142a <__ssputs_r+0x8a>
	...

08001458 <_svfiprintf_r>:
 8001458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800145c:	4698      	mov	r8, r3
 800145e:	898b      	ldrh	r3, [r1, #12]
 8001460:	061b      	lsls	r3, r3, #24
 8001462:	b09d      	sub	sp, #116	@ 0x74
 8001464:	4607      	mov	r7, r0
 8001466:	460d      	mov	r5, r1
 8001468:	4614      	mov	r4, r2
 800146a:	d510      	bpl.n	800148e <_svfiprintf_r+0x36>
 800146c:	690b      	ldr	r3, [r1, #16]
 800146e:	b973      	cbnz	r3, 800148e <_svfiprintf_r+0x36>
 8001470:	2140      	movs	r1, #64	@ 0x40
 8001472:	f7ff ff09 	bl	8001288 <_malloc_r>
 8001476:	6028      	str	r0, [r5, #0]
 8001478:	6128      	str	r0, [r5, #16]
 800147a:	b930      	cbnz	r0, 800148a <_svfiprintf_r+0x32>
 800147c:	230c      	movs	r3, #12
 800147e:	603b      	str	r3, [r7, #0]
 8001480:	f04f 30ff 	mov.w	r0, #4294967295
 8001484:	b01d      	add	sp, #116	@ 0x74
 8001486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800148a:	2340      	movs	r3, #64	@ 0x40
 800148c:	616b      	str	r3, [r5, #20]
 800148e:	2300      	movs	r3, #0
 8001490:	9309      	str	r3, [sp, #36]	@ 0x24
 8001492:	2320      	movs	r3, #32
 8001494:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001498:	f8cd 800c 	str.w	r8, [sp, #12]
 800149c:	2330      	movs	r3, #48	@ 0x30
 800149e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800163c <_svfiprintf_r+0x1e4>
 80014a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80014a6:	f04f 0901 	mov.w	r9, #1
 80014aa:	4623      	mov	r3, r4
 80014ac:	469a      	mov	sl, r3
 80014ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80014b2:	b10a      	cbz	r2, 80014b8 <_svfiprintf_r+0x60>
 80014b4:	2a25      	cmp	r2, #37	@ 0x25
 80014b6:	d1f9      	bne.n	80014ac <_svfiprintf_r+0x54>
 80014b8:	ebba 0b04 	subs.w	fp, sl, r4
 80014bc:	d00b      	beq.n	80014d6 <_svfiprintf_r+0x7e>
 80014be:	465b      	mov	r3, fp
 80014c0:	4622      	mov	r2, r4
 80014c2:	4629      	mov	r1, r5
 80014c4:	4638      	mov	r0, r7
 80014c6:	f7ff ff6b 	bl	80013a0 <__ssputs_r>
 80014ca:	3001      	adds	r0, #1
 80014cc:	f000 80a7 	beq.w	800161e <_svfiprintf_r+0x1c6>
 80014d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80014d2:	445a      	add	r2, fp
 80014d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80014d6:	f89a 3000 	ldrb.w	r3, [sl]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f000 809f 	beq.w	800161e <_svfiprintf_r+0x1c6>
 80014e0:	2300      	movs	r3, #0
 80014e2:	f04f 32ff 	mov.w	r2, #4294967295
 80014e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80014ea:	f10a 0a01 	add.w	sl, sl, #1
 80014ee:	9304      	str	r3, [sp, #16]
 80014f0:	9307      	str	r3, [sp, #28]
 80014f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80014f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80014f8:	4654      	mov	r4, sl
 80014fa:	2205      	movs	r2, #5
 80014fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001500:	484e      	ldr	r0, [pc, #312]	@ (800163c <_svfiprintf_r+0x1e4>)
 8001502:	f7fe fe7d 	bl	8000200 <memchr>
 8001506:	9a04      	ldr	r2, [sp, #16]
 8001508:	b9d8      	cbnz	r0, 8001542 <_svfiprintf_r+0xea>
 800150a:	06d0      	lsls	r0, r2, #27
 800150c:	bf44      	itt	mi
 800150e:	2320      	movmi	r3, #32
 8001510:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001514:	0711      	lsls	r1, r2, #28
 8001516:	bf44      	itt	mi
 8001518:	232b      	movmi	r3, #43	@ 0x2b
 800151a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800151e:	f89a 3000 	ldrb.w	r3, [sl]
 8001522:	2b2a      	cmp	r3, #42	@ 0x2a
 8001524:	d015      	beq.n	8001552 <_svfiprintf_r+0xfa>
 8001526:	9a07      	ldr	r2, [sp, #28]
 8001528:	4654      	mov	r4, sl
 800152a:	2000      	movs	r0, #0
 800152c:	f04f 0c0a 	mov.w	ip, #10
 8001530:	4621      	mov	r1, r4
 8001532:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001536:	3b30      	subs	r3, #48	@ 0x30
 8001538:	2b09      	cmp	r3, #9
 800153a:	d94b      	bls.n	80015d4 <_svfiprintf_r+0x17c>
 800153c:	b1b0      	cbz	r0, 800156c <_svfiprintf_r+0x114>
 800153e:	9207      	str	r2, [sp, #28]
 8001540:	e014      	b.n	800156c <_svfiprintf_r+0x114>
 8001542:	eba0 0308 	sub.w	r3, r0, r8
 8001546:	fa09 f303 	lsl.w	r3, r9, r3
 800154a:	4313      	orrs	r3, r2
 800154c:	9304      	str	r3, [sp, #16]
 800154e:	46a2      	mov	sl, r4
 8001550:	e7d2      	b.n	80014f8 <_svfiprintf_r+0xa0>
 8001552:	9b03      	ldr	r3, [sp, #12]
 8001554:	1d19      	adds	r1, r3, #4
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	9103      	str	r1, [sp, #12]
 800155a:	2b00      	cmp	r3, #0
 800155c:	bfbb      	ittet	lt
 800155e:	425b      	neglt	r3, r3
 8001560:	f042 0202 	orrlt.w	r2, r2, #2
 8001564:	9307      	strge	r3, [sp, #28]
 8001566:	9307      	strlt	r3, [sp, #28]
 8001568:	bfb8      	it	lt
 800156a:	9204      	strlt	r2, [sp, #16]
 800156c:	7823      	ldrb	r3, [r4, #0]
 800156e:	2b2e      	cmp	r3, #46	@ 0x2e
 8001570:	d10a      	bne.n	8001588 <_svfiprintf_r+0x130>
 8001572:	7863      	ldrb	r3, [r4, #1]
 8001574:	2b2a      	cmp	r3, #42	@ 0x2a
 8001576:	d132      	bne.n	80015de <_svfiprintf_r+0x186>
 8001578:	9b03      	ldr	r3, [sp, #12]
 800157a:	1d1a      	adds	r2, r3, #4
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	9203      	str	r2, [sp, #12]
 8001580:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001584:	3402      	adds	r4, #2
 8001586:	9305      	str	r3, [sp, #20]
 8001588:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800164c <_svfiprintf_r+0x1f4>
 800158c:	7821      	ldrb	r1, [r4, #0]
 800158e:	2203      	movs	r2, #3
 8001590:	4650      	mov	r0, sl
 8001592:	f7fe fe35 	bl	8000200 <memchr>
 8001596:	b138      	cbz	r0, 80015a8 <_svfiprintf_r+0x150>
 8001598:	9b04      	ldr	r3, [sp, #16]
 800159a:	eba0 000a 	sub.w	r0, r0, sl
 800159e:	2240      	movs	r2, #64	@ 0x40
 80015a0:	4082      	lsls	r2, r0
 80015a2:	4313      	orrs	r3, r2
 80015a4:	3401      	adds	r4, #1
 80015a6:	9304      	str	r3, [sp, #16]
 80015a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80015ac:	4824      	ldr	r0, [pc, #144]	@ (8001640 <_svfiprintf_r+0x1e8>)
 80015ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80015b2:	2206      	movs	r2, #6
 80015b4:	f7fe fe24 	bl	8000200 <memchr>
 80015b8:	2800      	cmp	r0, #0
 80015ba:	d036      	beq.n	800162a <_svfiprintf_r+0x1d2>
 80015bc:	4b21      	ldr	r3, [pc, #132]	@ (8001644 <_svfiprintf_r+0x1ec>)
 80015be:	bb1b      	cbnz	r3, 8001608 <_svfiprintf_r+0x1b0>
 80015c0:	9b03      	ldr	r3, [sp, #12]
 80015c2:	3307      	adds	r3, #7
 80015c4:	f023 0307 	bic.w	r3, r3, #7
 80015c8:	3308      	adds	r3, #8
 80015ca:	9303      	str	r3, [sp, #12]
 80015cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80015ce:	4433      	add	r3, r6
 80015d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80015d2:	e76a      	b.n	80014aa <_svfiprintf_r+0x52>
 80015d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80015d8:	460c      	mov	r4, r1
 80015da:	2001      	movs	r0, #1
 80015dc:	e7a8      	b.n	8001530 <_svfiprintf_r+0xd8>
 80015de:	2300      	movs	r3, #0
 80015e0:	3401      	adds	r4, #1
 80015e2:	9305      	str	r3, [sp, #20]
 80015e4:	4619      	mov	r1, r3
 80015e6:	f04f 0c0a 	mov.w	ip, #10
 80015ea:	4620      	mov	r0, r4
 80015ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80015f0:	3a30      	subs	r2, #48	@ 0x30
 80015f2:	2a09      	cmp	r2, #9
 80015f4:	d903      	bls.n	80015fe <_svfiprintf_r+0x1a6>
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d0c6      	beq.n	8001588 <_svfiprintf_r+0x130>
 80015fa:	9105      	str	r1, [sp, #20]
 80015fc:	e7c4      	b.n	8001588 <_svfiprintf_r+0x130>
 80015fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8001602:	4604      	mov	r4, r0
 8001604:	2301      	movs	r3, #1
 8001606:	e7f0      	b.n	80015ea <_svfiprintf_r+0x192>
 8001608:	ab03      	add	r3, sp, #12
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	462a      	mov	r2, r5
 800160e:	4b0e      	ldr	r3, [pc, #56]	@ (8001648 <_svfiprintf_r+0x1f0>)
 8001610:	a904      	add	r1, sp, #16
 8001612:	4638      	mov	r0, r7
 8001614:	f3af 8000 	nop.w
 8001618:	1c42      	adds	r2, r0, #1
 800161a:	4606      	mov	r6, r0
 800161c:	d1d6      	bne.n	80015cc <_svfiprintf_r+0x174>
 800161e:	89ab      	ldrh	r3, [r5, #12]
 8001620:	065b      	lsls	r3, r3, #25
 8001622:	f53f af2d 	bmi.w	8001480 <_svfiprintf_r+0x28>
 8001626:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001628:	e72c      	b.n	8001484 <_svfiprintf_r+0x2c>
 800162a:	ab03      	add	r3, sp, #12
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	462a      	mov	r2, r5
 8001630:	4b05      	ldr	r3, [pc, #20]	@ (8001648 <_svfiprintf_r+0x1f0>)
 8001632:	a904      	add	r1, sp, #16
 8001634:	4638      	mov	r0, r7
 8001636:	f000 f879 	bl	800172c <_printf_i>
 800163a:	e7ed      	b.n	8001618 <_svfiprintf_r+0x1c0>
 800163c:	08001bdd 	.word	0x08001bdd
 8001640:	08001be7 	.word	0x08001be7
 8001644:	00000000 	.word	0x00000000
 8001648:	080013a1 	.word	0x080013a1
 800164c:	08001be3 	.word	0x08001be3

08001650 <_printf_common>:
 8001650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001654:	4616      	mov	r6, r2
 8001656:	4698      	mov	r8, r3
 8001658:	688a      	ldr	r2, [r1, #8]
 800165a:	690b      	ldr	r3, [r1, #16]
 800165c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001660:	4293      	cmp	r3, r2
 8001662:	bfb8      	it	lt
 8001664:	4613      	movlt	r3, r2
 8001666:	6033      	str	r3, [r6, #0]
 8001668:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800166c:	4607      	mov	r7, r0
 800166e:	460c      	mov	r4, r1
 8001670:	b10a      	cbz	r2, 8001676 <_printf_common+0x26>
 8001672:	3301      	adds	r3, #1
 8001674:	6033      	str	r3, [r6, #0]
 8001676:	6823      	ldr	r3, [r4, #0]
 8001678:	0699      	lsls	r1, r3, #26
 800167a:	bf42      	ittt	mi
 800167c:	6833      	ldrmi	r3, [r6, #0]
 800167e:	3302      	addmi	r3, #2
 8001680:	6033      	strmi	r3, [r6, #0]
 8001682:	6825      	ldr	r5, [r4, #0]
 8001684:	f015 0506 	ands.w	r5, r5, #6
 8001688:	d106      	bne.n	8001698 <_printf_common+0x48>
 800168a:	f104 0a19 	add.w	sl, r4, #25
 800168e:	68e3      	ldr	r3, [r4, #12]
 8001690:	6832      	ldr	r2, [r6, #0]
 8001692:	1a9b      	subs	r3, r3, r2
 8001694:	42ab      	cmp	r3, r5
 8001696:	dc26      	bgt.n	80016e6 <_printf_common+0x96>
 8001698:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800169c:	6822      	ldr	r2, [r4, #0]
 800169e:	3b00      	subs	r3, #0
 80016a0:	bf18      	it	ne
 80016a2:	2301      	movne	r3, #1
 80016a4:	0692      	lsls	r2, r2, #26
 80016a6:	d42b      	bmi.n	8001700 <_printf_common+0xb0>
 80016a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80016ac:	4641      	mov	r1, r8
 80016ae:	4638      	mov	r0, r7
 80016b0:	47c8      	blx	r9
 80016b2:	3001      	adds	r0, #1
 80016b4:	d01e      	beq.n	80016f4 <_printf_common+0xa4>
 80016b6:	6823      	ldr	r3, [r4, #0]
 80016b8:	6922      	ldr	r2, [r4, #16]
 80016ba:	f003 0306 	and.w	r3, r3, #6
 80016be:	2b04      	cmp	r3, #4
 80016c0:	bf02      	ittt	eq
 80016c2:	68e5      	ldreq	r5, [r4, #12]
 80016c4:	6833      	ldreq	r3, [r6, #0]
 80016c6:	1aed      	subeq	r5, r5, r3
 80016c8:	68a3      	ldr	r3, [r4, #8]
 80016ca:	bf0c      	ite	eq
 80016cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80016d0:	2500      	movne	r5, #0
 80016d2:	4293      	cmp	r3, r2
 80016d4:	bfc4      	itt	gt
 80016d6:	1a9b      	subgt	r3, r3, r2
 80016d8:	18ed      	addgt	r5, r5, r3
 80016da:	2600      	movs	r6, #0
 80016dc:	341a      	adds	r4, #26
 80016de:	42b5      	cmp	r5, r6
 80016e0:	d11a      	bne.n	8001718 <_printf_common+0xc8>
 80016e2:	2000      	movs	r0, #0
 80016e4:	e008      	b.n	80016f8 <_printf_common+0xa8>
 80016e6:	2301      	movs	r3, #1
 80016e8:	4652      	mov	r2, sl
 80016ea:	4641      	mov	r1, r8
 80016ec:	4638      	mov	r0, r7
 80016ee:	47c8      	blx	r9
 80016f0:	3001      	adds	r0, #1
 80016f2:	d103      	bne.n	80016fc <_printf_common+0xac>
 80016f4:	f04f 30ff 	mov.w	r0, #4294967295
 80016f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016fc:	3501      	adds	r5, #1
 80016fe:	e7c6      	b.n	800168e <_printf_common+0x3e>
 8001700:	18e1      	adds	r1, r4, r3
 8001702:	1c5a      	adds	r2, r3, #1
 8001704:	2030      	movs	r0, #48	@ 0x30
 8001706:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800170a:	4422      	add	r2, r4
 800170c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001710:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001714:	3302      	adds	r3, #2
 8001716:	e7c7      	b.n	80016a8 <_printf_common+0x58>
 8001718:	2301      	movs	r3, #1
 800171a:	4622      	mov	r2, r4
 800171c:	4641      	mov	r1, r8
 800171e:	4638      	mov	r0, r7
 8001720:	47c8      	blx	r9
 8001722:	3001      	adds	r0, #1
 8001724:	d0e6      	beq.n	80016f4 <_printf_common+0xa4>
 8001726:	3601      	adds	r6, #1
 8001728:	e7d9      	b.n	80016de <_printf_common+0x8e>
	...

0800172c <_printf_i>:
 800172c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001730:	7e0f      	ldrb	r7, [r1, #24]
 8001732:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001734:	2f78      	cmp	r7, #120	@ 0x78
 8001736:	4691      	mov	r9, r2
 8001738:	4680      	mov	r8, r0
 800173a:	460c      	mov	r4, r1
 800173c:	469a      	mov	sl, r3
 800173e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001742:	d807      	bhi.n	8001754 <_printf_i+0x28>
 8001744:	2f62      	cmp	r7, #98	@ 0x62
 8001746:	d80a      	bhi.n	800175e <_printf_i+0x32>
 8001748:	2f00      	cmp	r7, #0
 800174a:	f000 80d1 	beq.w	80018f0 <_printf_i+0x1c4>
 800174e:	2f58      	cmp	r7, #88	@ 0x58
 8001750:	f000 80b8 	beq.w	80018c4 <_printf_i+0x198>
 8001754:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001758:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800175c:	e03a      	b.n	80017d4 <_printf_i+0xa8>
 800175e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001762:	2b15      	cmp	r3, #21
 8001764:	d8f6      	bhi.n	8001754 <_printf_i+0x28>
 8001766:	a101      	add	r1, pc, #4	@ (adr r1, 800176c <_printf_i+0x40>)
 8001768:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800176c:	080017c5 	.word	0x080017c5
 8001770:	080017d9 	.word	0x080017d9
 8001774:	08001755 	.word	0x08001755
 8001778:	08001755 	.word	0x08001755
 800177c:	08001755 	.word	0x08001755
 8001780:	08001755 	.word	0x08001755
 8001784:	080017d9 	.word	0x080017d9
 8001788:	08001755 	.word	0x08001755
 800178c:	08001755 	.word	0x08001755
 8001790:	08001755 	.word	0x08001755
 8001794:	08001755 	.word	0x08001755
 8001798:	080018d7 	.word	0x080018d7
 800179c:	08001803 	.word	0x08001803
 80017a0:	08001891 	.word	0x08001891
 80017a4:	08001755 	.word	0x08001755
 80017a8:	08001755 	.word	0x08001755
 80017ac:	080018f9 	.word	0x080018f9
 80017b0:	08001755 	.word	0x08001755
 80017b4:	08001803 	.word	0x08001803
 80017b8:	08001755 	.word	0x08001755
 80017bc:	08001755 	.word	0x08001755
 80017c0:	08001899 	.word	0x08001899
 80017c4:	6833      	ldr	r3, [r6, #0]
 80017c6:	1d1a      	adds	r2, r3, #4
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6032      	str	r2, [r6, #0]
 80017cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80017d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80017d4:	2301      	movs	r3, #1
 80017d6:	e09c      	b.n	8001912 <_printf_i+0x1e6>
 80017d8:	6833      	ldr	r3, [r6, #0]
 80017da:	6820      	ldr	r0, [r4, #0]
 80017dc:	1d19      	adds	r1, r3, #4
 80017de:	6031      	str	r1, [r6, #0]
 80017e0:	0606      	lsls	r6, r0, #24
 80017e2:	d501      	bpl.n	80017e8 <_printf_i+0xbc>
 80017e4:	681d      	ldr	r5, [r3, #0]
 80017e6:	e003      	b.n	80017f0 <_printf_i+0xc4>
 80017e8:	0645      	lsls	r5, r0, #25
 80017ea:	d5fb      	bpl.n	80017e4 <_printf_i+0xb8>
 80017ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80017f0:	2d00      	cmp	r5, #0
 80017f2:	da03      	bge.n	80017fc <_printf_i+0xd0>
 80017f4:	232d      	movs	r3, #45	@ 0x2d
 80017f6:	426d      	negs	r5, r5
 80017f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80017fc:	4858      	ldr	r0, [pc, #352]	@ (8001960 <_printf_i+0x234>)
 80017fe:	230a      	movs	r3, #10
 8001800:	e011      	b.n	8001826 <_printf_i+0xfa>
 8001802:	6821      	ldr	r1, [r4, #0]
 8001804:	6833      	ldr	r3, [r6, #0]
 8001806:	0608      	lsls	r0, r1, #24
 8001808:	f853 5b04 	ldr.w	r5, [r3], #4
 800180c:	d402      	bmi.n	8001814 <_printf_i+0xe8>
 800180e:	0649      	lsls	r1, r1, #25
 8001810:	bf48      	it	mi
 8001812:	b2ad      	uxthmi	r5, r5
 8001814:	2f6f      	cmp	r7, #111	@ 0x6f
 8001816:	4852      	ldr	r0, [pc, #328]	@ (8001960 <_printf_i+0x234>)
 8001818:	6033      	str	r3, [r6, #0]
 800181a:	bf14      	ite	ne
 800181c:	230a      	movne	r3, #10
 800181e:	2308      	moveq	r3, #8
 8001820:	2100      	movs	r1, #0
 8001822:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001826:	6866      	ldr	r6, [r4, #4]
 8001828:	60a6      	str	r6, [r4, #8]
 800182a:	2e00      	cmp	r6, #0
 800182c:	db05      	blt.n	800183a <_printf_i+0x10e>
 800182e:	6821      	ldr	r1, [r4, #0]
 8001830:	432e      	orrs	r6, r5
 8001832:	f021 0104 	bic.w	r1, r1, #4
 8001836:	6021      	str	r1, [r4, #0]
 8001838:	d04b      	beq.n	80018d2 <_printf_i+0x1a6>
 800183a:	4616      	mov	r6, r2
 800183c:	fbb5 f1f3 	udiv	r1, r5, r3
 8001840:	fb03 5711 	mls	r7, r3, r1, r5
 8001844:	5dc7      	ldrb	r7, [r0, r7]
 8001846:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800184a:	462f      	mov	r7, r5
 800184c:	42bb      	cmp	r3, r7
 800184e:	460d      	mov	r5, r1
 8001850:	d9f4      	bls.n	800183c <_printf_i+0x110>
 8001852:	2b08      	cmp	r3, #8
 8001854:	d10b      	bne.n	800186e <_printf_i+0x142>
 8001856:	6823      	ldr	r3, [r4, #0]
 8001858:	07df      	lsls	r7, r3, #31
 800185a:	d508      	bpl.n	800186e <_printf_i+0x142>
 800185c:	6923      	ldr	r3, [r4, #16]
 800185e:	6861      	ldr	r1, [r4, #4]
 8001860:	4299      	cmp	r1, r3
 8001862:	bfde      	ittt	le
 8001864:	2330      	movle	r3, #48	@ 0x30
 8001866:	f806 3c01 	strble.w	r3, [r6, #-1]
 800186a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800186e:	1b92      	subs	r2, r2, r6
 8001870:	6122      	str	r2, [r4, #16]
 8001872:	f8cd a000 	str.w	sl, [sp]
 8001876:	464b      	mov	r3, r9
 8001878:	aa03      	add	r2, sp, #12
 800187a:	4621      	mov	r1, r4
 800187c:	4640      	mov	r0, r8
 800187e:	f7ff fee7 	bl	8001650 <_printf_common>
 8001882:	3001      	adds	r0, #1
 8001884:	d14a      	bne.n	800191c <_printf_i+0x1f0>
 8001886:	f04f 30ff 	mov.w	r0, #4294967295
 800188a:	b004      	add	sp, #16
 800188c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001890:	6823      	ldr	r3, [r4, #0]
 8001892:	f043 0320 	orr.w	r3, r3, #32
 8001896:	6023      	str	r3, [r4, #0]
 8001898:	4832      	ldr	r0, [pc, #200]	@ (8001964 <_printf_i+0x238>)
 800189a:	2778      	movs	r7, #120	@ 0x78
 800189c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80018a0:	6823      	ldr	r3, [r4, #0]
 80018a2:	6831      	ldr	r1, [r6, #0]
 80018a4:	061f      	lsls	r7, r3, #24
 80018a6:	f851 5b04 	ldr.w	r5, [r1], #4
 80018aa:	d402      	bmi.n	80018b2 <_printf_i+0x186>
 80018ac:	065f      	lsls	r7, r3, #25
 80018ae:	bf48      	it	mi
 80018b0:	b2ad      	uxthmi	r5, r5
 80018b2:	6031      	str	r1, [r6, #0]
 80018b4:	07d9      	lsls	r1, r3, #31
 80018b6:	bf44      	itt	mi
 80018b8:	f043 0320 	orrmi.w	r3, r3, #32
 80018bc:	6023      	strmi	r3, [r4, #0]
 80018be:	b11d      	cbz	r5, 80018c8 <_printf_i+0x19c>
 80018c0:	2310      	movs	r3, #16
 80018c2:	e7ad      	b.n	8001820 <_printf_i+0xf4>
 80018c4:	4826      	ldr	r0, [pc, #152]	@ (8001960 <_printf_i+0x234>)
 80018c6:	e7e9      	b.n	800189c <_printf_i+0x170>
 80018c8:	6823      	ldr	r3, [r4, #0]
 80018ca:	f023 0320 	bic.w	r3, r3, #32
 80018ce:	6023      	str	r3, [r4, #0]
 80018d0:	e7f6      	b.n	80018c0 <_printf_i+0x194>
 80018d2:	4616      	mov	r6, r2
 80018d4:	e7bd      	b.n	8001852 <_printf_i+0x126>
 80018d6:	6833      	ldr	r3, [r6, #0]
 80018d8:	6825      	ldr	r5, [r4, #0]
 80018da:	6961      	ldr	r1, [r4, #20]
 80018dc:	1d18      	adds	r0, r3, #4
 80018de:	6030      	str	r0, [r6, #0]
 80018e0:	062e      	lsls	r6, r5, #24
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	d501      	bpl.n	80018ea <_printf_i+0x1be>
 80018e6:	6019      	str	r1, [r3, #0]
 80018e8:	e002      	b.n	80018f0 <_printf_i+0x1c4>
 80018ea:	0668      	lsls	r0, r5, #25
 80018ec:	d5fb      	bpl.n	80018e6 <_printf_i+0x1ba>
 80018ee:	8019      	strh	r1, [r3, #0]
 80018f0:	2300      	movs	r3, #0
 80018f2:	6123      	str	r3, [r4, #16]
 80018f4:	4616      	mov	r6, r2
 80018f6:	e7bc      	b.n	8001872 <_printf_i+0x146>
 80018f8:	6833      	ldr	r3, [r6, #0]
 80018fa:	1d1a      	adds	r2, r3, #4
 80018fc:	6032      	str	r2, [r6, #0]
 80018fe:	681e      	ldr	r6, [r3, #0]
 8001900:	6862      	ldr	r2, [r4, #4]
 8001902:	2100      	movs	r1, #0
 8001904:	4630      	mov	r0, r6
 8001906:	f7fe fc7b 	bl	8000200 <memchr>
 800190a:	b108      	cbz	r0, 8001910 <_printf_i+0x1e4>
 800190c:	1b80      	subs	r0, r0, r6
 800190e:	6060      	str	r0, [r4, #4]
 8001910:	6863      	ldr	r3, [r4, #4]
 8001912:	6123      	str	r3, [r4, #16]
 8001914:	2300      	movs	r3, #0
 8001916:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800191a:	e7aa      	b.n	8001872 <_printf_i+0x146>
 800191c:	6923      	ldr	r3, [r4, #16]
 800191e:	4632      	mov	r2, r6
 8001920:	4649      	mov	r1, r9
 8001922:	4640      	mov	r0, r8
 8001924:	47d0      	blx	sl
 8001926:	3001      	adds	r0, #1
 8001928:	d0ad      	beq.n	8001886 <_printf_i+0x15a>
 800192a:	6823      	ldr	r3, [r4, #0]
 800192c:	079b      	lsls	r3, r3, #30
 800192e:	d413      	bmi.n	8001958 <_printf_i+0x22c>
 8001930:	68e0      	ldr	r0, [r4, #12]
 8001932:	9b03      	ldr	r3, [sp, #12]
 8001934:	4298      	cmp	r0, r3
 8001936:	bfb8      	it	lt
 8001938:	4618      	movlt	r0, r3
 800193a:	e7a6      	b.n	800188a <_printf_i+0x15e>
 800193c:	2301      	movs	r3, #1
 800193e:	4632      	mov	r2, r6
 8001940:	4649      	mov	r1, r9
 8001942:	4640      	mov	r0, r8
 8001944:	47d0      	blx	sl
 8001946:	3001      	adds	r0, #1
 8001948:	d09d      	beq.n	8001886 <_printf_i+0x15a>
 800194a:	3501      	adds	r5, #1
 800194c:	68e3      	ldr	r3, [r4, #12]
 800194e:	9903      	ldr	r1, [sp, #12]
 8001950:	1a5b      	subs	r3, r3, r1
 8001952:	42ab      	cmp	r3, r5
 8001954:	dcf2      	bgt.n	800193c <_printf_i+0x210>
 8001956:	e7eb      	b.n	8001930 <_printf_i+0x204>
 8001958:	2500      	movs	r5, #0
 800195a:	f104 0619 	add.w	r6, r4, #25
 800195e:	e7f5      	b.n	800194c <_printf_i+0x220>
 8001960:	08001bee 	.word	0x08001bee
 8001964:	08001bff 	.word	0x08001bff

08001968 <memmove>:
 8001968:	4288      	cmp	r0, r1
 800196a:	b510      	push	{r4, lr}
 800196c:	eb01 0402 	add.w	r4, r1, r2
 8001970:	d902      	bls.n	8001978 <memmove+0x10>
 8001972:	4284      	cmp	r4, r0
 8001974:	4623      	mov	r3, r4
 8001976:	d807      	bhi.n	8001988 <memmove+0x20>
 8001978:	1e43      	subs	r3, r0, #1
 800197a:	42a1      	cmp	r1, r4
 800197c:	d008      	beq.n	8001990 <memmove+0x28>
 800197e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001982:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001986:	e7f8      	b.n	800197a <memmove+0x12>
 8001988:	4402      	add	r2, r0
 800198a:	4601      	mov	r1, r0
 800198c:	428a      	cmp	r2, r1
 800198e:	d100      	bne.n	8001992 <memmove+0x2a>
 8001990:	bd10      	pop	{r4, pc}
 8001992:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001996:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800199a:	e7f7      	b.n	800198c <memmove+0x24>

0800199c <_sbrk_r>:
 800199c:	b538      	push	{r3, r4, r5, lr}
 800199e:	4d06      	ldr	r5, [pc, #24]	@ (80019b8 <_sbrk_r+0x1c>)
 80019a0:	2300      	movs	r3, #0
 80019a2:	4604      	mov	r4, r0
 80019a4:	4608      	mov	r0, r1
 80019a6:	602b      	str	r3, [r5, #0]
 80019a8:	f7ff fa1e 	bl	8000de8 <_sbrk>
 80019ac:	1c43      	adds	r3, r0, #1
 80019ae:	d102      	bne.n	80019b6 <_sbrk_r+0x1a>
 80019b0:	682b      	ldr	r3, [r5, #0]
 80019b2:	b103      	cbz	r3, 80019b6 <_sbrk_r+0x1a>
 80019b4:	6023      	str	r3, [r4, #0]
 80019b6:	bd38      	pop	{r3, r4, r5, pc}
 80019b8:	200002f0 	.word	0x200002f0

080019bc <memcpy>:
 80019bc:	440a      	add	r2, r1
 80019be:	4291      	cmp	r1, r2
 80019c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80019c4:	d100      	bne.n	80019c8 <memcpy+0xc>
 80019c6:	4770      	bx	lr
 80019c8:	b510      	push	{r4, lr}
 80019ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80019ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80019d2:	4291      	cmp	r1, r2
 80019d4:	d1f9      	bne.n	80019ca <memcpy+0xe>
 80019d6:	bd10      	pop	{r4, pc}

080019d8 <_realloc_r>:
 80019d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019dc:	4607      	mov	r7, r0
 80019de:	4614      	mov	r4, r2
 80019e0:	460d      	mov	r5, r1
 80019e2:	b921      	cbnz	r1, 80019ee <_realloc_r+0x16>
 80019e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80019e8:	4611      	mov	r1, r2
 80019ea:	f7ff bc4d 	b.w	8001288 <_malloc_r>
 80019ee:	b92a      	cbnz	r2, 80019fc <_realloc_r+0x24>
 80019f0:	f7ff fbde 	bl	80011b0 <_free_r>
 80019f4:	4625      	mov	r5, r4
 80019f6:	4628      	mov	r0, r5
 80019f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80019fc:	f000 f81a 	bl	8001a34 <_malloc_usable_size_r>
 8001a00:	4284      	cmp	r4, r0
 8001a02:	4606      	mov	r6, r0
 8001a04:	d802      	bhi.n	8001a0c <_realloc_r+0x34>
 8001a06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001a0a:	d8f4      	bhi.n	80019f6 <_realloc_r+0x1e>
 8001a0c:	4621      	mov	r1, r4
 8001a0e:	4638      	mov	r0, r7
 8001a10:	f7ff fc3a 	bl	8001288 <_malloc_r>
 8001a14:	4680      	mov	r8, r0
 8001a16:	b908      	cbnz	r0, 8001a1c <_realloc_r+0x44>
 8001a18:	4645      	mov	r5, r8
 8001a1a:	e7ec      	b.n	80019f6 <_realloc_r+0x1e>
 8001a1c:	42b4      	cmp	r4, r6
 8001a1e:	4622      	mov	r2, r4
 8001a20:	4629      	mov	r1, r5
 8001a22:	bf28      	it	cs
 8001a24:	4632      	movcs	r2, r6
 8001a26:	f7ff ffc9 	bl	80019bc <memcpy>
 8001a2a:	4629      	mov	r1, r5
 8001a2c:	4638      	mov	r0, r7
 8001a2e:	f7ff fbbf 	bl	80011b0 <_free_r>
 8001a32:	e7f1      	b.n	8001a18 <_realloc_r+0x40>

08001a34 <_malloc_usable_size_r>:
 8001a34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a38:	1f18      	subs	r0, r3, #4
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	bfbc      	itt	lt
 8001a3e:	580b      	ldrlt	r3, [r1, r0]
 8001a40:	18c0      	addlt	r0, r0, r3
 8001a42:	4770      	bx	lr

08001a44 <_init>:
 8001a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a46:	bf00      	nop
 8001a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a4a:	bc08      	pop	{r3}
 8001a4c:	469e      	mov	lr, r3
 8001a4e:	4770      	bx	lr

08001a50 <_fini>:
 8001a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a52:	bf00      	nop
 8001a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a56:	bc08      	pop	{r3}
 8001a58:	469e      	mov	lr, r3
 8001a5a:	4770      	bx	lr
