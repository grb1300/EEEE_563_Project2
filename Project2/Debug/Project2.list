
Project2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002400  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000758  08002590  08002590  00003590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ce8  08002ce8  00004070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002ce8  08002ce8  00003ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002cf0  08002cf0  00004070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cf0  08002cf0  00003cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002cf4  08002cf4  00003cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08002cf8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000450  20000070  08002d68  00004070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  08002d68  000044c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000038fe  00000000  00000000  000040a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f00  00000000  00000000  0000799e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000320  00000000  00000000  000088a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000226  00000000  00000000  00008bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000268f8  00000000  00000000  00008de6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000057b3  00000000  00000000  0002f6de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e81ea  00000000  00000000  00034e91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011d07b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001218  00000000  00000000  0011d0c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0011e2d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002578 	.word	0x08002578

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08002578 	.word	0x08002578

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <LED_Init>:
// User LED = LD2 Green LED = PA.5
//******************************************************************************************
#define LED_PIN 5

void LED_Init(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
	// Enable the peripheral clock of GPIO Port
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000274:	4b1d      	ldr	r3, [pc, #116]	@ (80002ec <LED_Init+0x7c>)
 8000276:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000278:	4a1c      	ldr	r2, [pc, #112]	@ (80002ec <LED_Init+0x7c>)
 800027a:	f043 0301 	orr.w	r3, r3, #1
 800027e:	64d3      	str	r3, [r2, #76]	@ 0x4c

	// GPIO Mode: Input(00), Output(01), AlterFunc(10), Analog(11, reset)
	GPIOA->MODER &= ~(3U<<(2*LED_PIN));
 8000280:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800028a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800028e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 1U<<(2*LED_PIN);      //  Output(01)
 8000290:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800029a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800029e:	6013      	str	r3, [r2, #0]

	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR &= ~(3U<<(2*LED_PIN));
 80002a0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002a4:	689b      	ldr	r3, [r3, #8]
 80002a6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002aa:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80002ae:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |=   3U<<(2*LED_PIN);  // High speed
 80002b0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002b4:	689b      	ldr	r3, [r3, #8]
 80002b6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002ba:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 80002be:	6093      	str	r3, [r2, #8]

	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1)
	GPIOA->OTYPER &= ~(1U<<LED_PIN);       // Push-pull
 80002c0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002c4:	685b      	ldr	r3, [r3, #4]
 80002c6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002ca:	f023 0320 	bic.w	r3, r3, #32
 80002ce:	6053      	str	r3, [r2, #4]

	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3U<<(2*LED_PIN));  // No pull-up, no pull-down
 80002d0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002d4:	68db      	ldr	r3, [r3, #12]
 80002d6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002da:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80002de:	60d3      	str	r3, [r2, #12]
}
 80002e0:	bf00      	nop
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	40021000 	.word	0x40021000

080002f0 <clock_init>:


#include "stm32l476xx.h"

void clock_init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
	// 1. Enable HSI (16 MHz internal oscillator)
	RCC->CR |= ((uint32_t)RCC_CR_HSION);
 80002f4:	4b34      	ldr	r3, [pc, #208]	@ (80003c8 <clock_init+0xd8>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a33      	ldr	r2, [pc, #204]	@ (80003c8 <clock_init+0xd8>)
 80002fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002fe:	6013      	str	r3, [r2, #0]

    // wait until HSI is ready
    while ( (RCC->CR & (uint32_t) RCC_CR_HSIRDY) == 0 ) {;}
 8000300:	bf00      	nop
 8000302:	4b31      	ldr	r3, [pc, #196]	@ (80003c8 <clock_init+0xd8>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800030a:	2b00      	cmp	r3, #0
 800030c:	d0f9      	beq.n	8000302 <clock_init+0x12>

    // 2. Configure Flash latency for 80 MHz
    FLASH->ACR |= FLASH_ACR_LATENCY_4WS;
 800030e:	4b2f      	ldr	r3, [pc, #188]	@ (80003cc <clock_init+0xdc>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	4a2e      	ldr	r2, [pc, #184]	@ (80003cc <clock_init+0xdc>)
 8000314:	f043 0304 	orr.w	r3, r3, #4
 8000318:	6013      	str	r3, [r2, #0]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLASH_ACR_LATENCY_4WS);
 800031a:	bf00      	nop
 800031c:	4b2b      	ldr	r3, [pc, #172]	@ (80003cc <clock_init+0xdc>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	f003 0307 	and.w	r3, r3, #7
 8000324:	2b04      	cmp	r3, #4
 8000326:	d1f9      	bne.n	800031c <clock_init+0x2c>

    // MP-Sept-25:
    //    // 3. ***** USE this code for PLL clock (80MHz) *****
    //
    // Disable PLL before config
    RCC->CR &= ~RCC_CR_PLLON;
 8000328:	4b27      	ldr	r3, [pc, #156]	@ (80003c8 <clock_init+0xd8>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a26      	ldr	r2, [pc, #152]	@ (80003c8 <clock_init+0xd8>)
 800032e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000332:	6013      	str	r3, [r2, #0]
    while (RCC->CR & RCC_CR_PLLRDY);  // wait until PLL fully stops
 8000334:	bf00      	nop
 8000336:	4b24      	ldr	r3, [pc, #144]	@ (80003c8 <clock_init+0xd8>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800033e:	2b00      	cmp	r3, #0
 8000340:	d1f9      	bne.n	8000336 <clock_init+0x46>

    // Configure PLL
    RCC->PLLCFGR = 0;
 8000342:	4b21      	ldr	r3, [pc, #132]	@ (80003c8 <clock_init+0xd8>)
 8000344:	2200      	movs	r2, #0
 8000346:	60da      	str	r2, [r3, #12]
    RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI;    // source HSI16
 8000348:	4b1f      	ldr	r3, [pc, #124]	@ (80003c8 <clock_init+0xd8>)
 800034a:	68db      	ldr	r3, [r3, #12]
 800034c:	4a1e      	ldr	r2, [pc, #120]	@ (80003c8 <clock_init+0xd8>)
 800034e:	f043 0302 	orr.w	r3, r3, #2
 8000352:	60d3      	str	r3, [r2, #12]
    RCC->PLLCFGR |= (1 << RCC_PLLCFGR_PLLM_Pos); // PLLM = 2 (divide by 2)
 8000354:	4b1c      	ldr	r3, [pc, #112]	@ (80003c8 <clock_init+0xd8>)
 8000356:	68db      	ldr	r3, [r3, #12]
 8000358:	4a1b      	ldr	r2, [pc, #108]	@ (80003c8 <clock_init+0xd8>)
 800035a:	f043 0310 	orr.w	r3, r3, #16
 800035e:	60d3      	str	r3, [r2, #12]
    RCC->PLLCFGR |= (20 << RCC_PLLCFGR_PLLN_Pos); // PLLN = 20 (multiply by 20)
 8000360:	4b19      	ldr	r3, [pc, #100]	@ (80003c8 <clock_init+0xd8>)
 8000362:	68db      	ldr	r3, [r3, #12]
 8000364:	4a18      	ldr	r2, [pc, #96]	@ (80003c8 <clock_init+0xd8>)
 8000366:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 800036a:	60d3      	str	r3, [r2, #12]
    RCC->PLLCFGR |= (0 << RCC_PLLCFGR_PLLR_Pos);  // PLLR = 2 (divide by 2)
 800036c:	4b16      	ldr	r3, [pc, #88]	@ (80003c8 <clock_init+0xd8>)
 800036e:	4a16      	ldr	r2, [pc, #88]	@ (80003c8 <clock_init+0xd8>)
 8000370:	68db      	ldr	r3, [r3, #12]
 8000372:	60d3      	str	r3, [r2, #12]
    RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN;           // Enable PLLR output
 8000374:	4b14      	ldr	r3, [pc, #80]	@ (80003c8 <clock_init+0xd8>)
 8000376:	68db      	ldr	r3, [r3, #12]
 8000378:	4a13      	ldr	r2, [pc, #76]	@ (80003c8 <clock_init+0xd8>)
 800037a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800037e:	60d3      	str	r3, [r2, #12]

    // Enable PLL
    RCC->CR |= RCC_CR_PLLON;
 8000380:	4b11      	ldr	r3, [pc, #68]	@ (80003c8 <clock_init+0xd8>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a10      	ldr	r2, [pc, #64]	@ (80003c8 <clock_init+0xd8>)
 8000386:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800038a:	6013      	str	r3, [r2, #0]
    while ((RCC->CR & RCC_CR_PLLRDY) == 0);  // wait until PLL ready
 800038c:	bf00      	nop
 800038e:	4b0e      	ldr	r3, [pc, #56]	@ (80003c8 <clock_init+0xd8>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000396:	2b00      	cmp	r3, #0
 8000398:	d0f9      	beq.n	800038e <clock_init+0x9e>

    // Select PLL as system clock source
    RCC->CFGR &= ~RCC_CFGR_SW;
 800039a:	4b0b      	ldr	r3, [pc, #44]	@ (80003c8 <clock_init+0xd8>)
 800039c:	689b      	ldr	r3, [r3, #8]
 800039e:	4a0a      	ldr	r2, [pc, #40]	@ (80003c8 <clock_init+0xd8>)
 80003a0:	f023 0303 	bic.w	r3, r3, #3
 80003a4:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;    // select PLL as system clock
 80003a6:	4b08      	ldr	r3, [pc, #32]	@ (80003c8 <clock_init+0xd8>)
 80003a8:	689b      	ldr	r3, [r3, #8]
 80003aa:	4a07      	ldr	r2, [pc, #28]	@ (80003c8 <clock_init+0xd8>)
 80003ac:	f043 0303 	orr.w	r3, r3, #3
 80003b0:	6093      	str	r3, [r2, #8]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);  // wait for switch
 80003b2:	bf00      	nop
 80003b4:	4b04      	ldr	r3, [pc, #16]	@ (80003c8 <clock_init+0xd8>)
 80003b6:	689b      	ldr	r3, [r3, #8]
 80003b8:	f003 030c 	and.w	r3, r3, #12
 80003bc:	2b0c      	cmp	r3, #12
 80003be:	d1f9      	bne.n	80003b4 <clock_init+0xc4>
//
//    // 3. ***** USE this code for HSI clock (16MHz) *****


    // 4. Update System Clock to ensure its set correctly
    SystemCoreClockUpdate();
 80003c0:	f000 fd8e 	bl	8000ee0 <SystemCoreClockUpdate>
}
 80003c4:	bf00      	nop
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	40021000 	.word	0x40021000
 80003cc:	40022000 	.word	0x40022000

080003d0 <delay_ms>:
static uint32_t num_pulses   = PULSES_DEFAULT;
static uint32_t lower_us     = LOWER_DEFAULT;
static uint32_t upper_us     = LOWER_DEFAULT + 100;

// crude delay for demos
static void delay_ms(uint32_t ms) {
 80003d0:	b480      	push	{r7}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
    // use SysTick if you already set it; this is just a busy-wait fallback
    for (volatile uint32_t i = 0; i < (ms * 8000UL); ++i) __NOP(); // ~1ms @80MHz (rough)
 80003d8:	2300      	movs	r3, #0
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	e003      	b.n	80003e6 <delay_ms+0x16>
 80003de:	bf00      	nop
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	3301      	adds	r3, #1
 80003e4:	60fb      	str	r3, [r7, #12]
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80003ec:	fb03 f202 	mul.w	r2, r3, r2
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	429a      	cmp	r2, r3
 80003f4:	d8f3      	bhi.n	80003de <delay_ms+0xe>
}
 80003f6:	bf00      	nop
 80003f8:	bf00      	nop
 80003fa:	3714      	adds	r7, #20
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr

08000404 <reset_histogram>:

static inline void reset_histogram(void){
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
    memset(buckets, 0, sizeof(buckets));
 8000408:	f44f 72ca 	mov.w	r2, #404	@ 0x194
 800040c:	2100      	movs	r1, #0
 800040e:	4805      	ldr	r0, [pc, #20]	@ (8000424 <reset_histogram+0x20>)
 8000410:	f001 fabc 	bl	800198c <memset>
    pulses_captured = 0;
 8000414:	4b04      	ldr	r3, [pc, #16]	@ (8000428 <reset_histogram+0x24>)
 8000416:	2200      	movs	r2, #0
 8000418:	601a      	str	r2, [r3, #0]
    last_seen_ticks = 0;
 800041a:	4b04      	ldr	r3, [pc, #16]	@ (800042c <reset_histogram+0x28>)
 800041c:	2200      	movs	r2, #0
 800041e:	601a      	str	r2, [r3, #0]
}
 8000420:	bf00      	nop
 8000422:	bd80      	pop	{r7, pc}
 8000424:	2000009c 	.word	0x2000009c
 8000428:	20000230 	.word	0x20000230
 800042c:	20000238 	.word	0x20000238

08000430 <print_histogram>:

static void print_histogram(void){
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
	printf("%s\r\n", "printing histogram");
 8000436:	4911      	ldr	r1, [pc, #68]	@ (800047c <print_histogram+0x4c>)
 8000438:	4811      	ldr	r0, [pc, #68]	@ (8000480 <print_histogram+0x50>)
 800043a:	f001 f845 	bl	80014c8 <printf>
    for (uint32_t i = 0; i < BUCKET_SPAN; ++i){
 800043e:	2300      	movs	r3, #0
 8000440:	607b      	str	r3, [r7, #4]
 8000442:	e013      	b.n	800046c <print_histogram+0x3c>
        uint32_t c = buckets[i];
 8000444:	4a0f      	ldr	r2, [pc, #60]	@ (8000484 <print_histogram+0x54>)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800044c:	603b      	str	r3, [r7, #0]
        if (c != 0){
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d008      	beq.n	8000466 <print_histogram+0x36>
            printf("%lu %lu\r\n",
 8000454:	4b0c      	ldr	r3, [pc, #48]	@ (8000488 <print_histogram+0x58>)
 8000456:	681a      	ldr	r2, [r3, #0]
                   (unsigned long)(lower_us + i),
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4413      	add	r3, r2
            printf("%lu %lu\r\n",
 800045c:	683a      	ldr	r2, [r7, #0]
 800045e:	4619      	mov	r1, r3
 8000460:	480a      	ldr	r0, [pc, #40]	@ (800048c <print_histogram+0x5c>)
 8000462:	f001 f831 	bl	80014c8 <printf>
    for (uint32_t i = 0; i < BUCKET_SPAN; ++i){
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	3301      	adds	r3, #1
 800046a:	607b      	str	r3, [r7, #4]
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	2b64      	cmp	r3, #100	@ 0x64
 8000470:	d9e8      	bls.n	8000444 <print_histogram+0x14>
                   (unsigned long)c);
        }
    }
}
 8000472:	bf00      	nop
 8000474:	bf00      	nop
 8000476:	3708      	adds	r7, #8
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	08002590 	.word	0x08002590
 8000480:	080025a4 	.word	0x080025a4
 8000484:	2000009c 	.word	0x2000009c
 8000488:	20000004 	.word	0x20000004
 800048c:	080025ac 	.word	0x080025ac

08000490 <init_systick>:

// This function is to Initialize SysTick registers
void init_systick()
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
	// Use the SysTick global structure pointer to do the following in this
	// exact order with separate lines for each step:
	//
	// Disable SysTick by clearing the CTRL (CSR) register.
	SysTick->CTRL = 0UL;
 8000494:	4b10      	ldr	r3, [pc, #64]	@ (80004d8 <init_systick+0x48>)
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]

	// Set the LOAD (RVR) to 15,999 to give us a 1 millisecond timer
	// System clock is 16MHz
	SysTick->LOAD |= (SysTick_LOAD_RELOAD_Msk & 15999UL);
 800049a:	4b0f      	ldr	r3, [pc, #60]	@ (80004d8 <init_systick+0x48>)
 800049c:	685b      	ldr	r3, [r3, #4]
 800049e:	4a0e      	ldr	r2, [pc, #56]	@ (80004d8 <init_systick+0x48>)
 80004a0:	f443 5379 	orr.w	r3, r3, #15936	@ 0x3e40
 80004a4:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 80004a8:	6053      	str	r3, [r2, #4]

	// Set the clock source bit in the CTRL (CSR) to the internal clock.
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 80004aa:	4b0b      	ldr	r3, [pc, #44]	@ (80004d8 <init_systick+0x48>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a0a      	ldr	r2, [pc, #40]	@ (80004d8 <init_systick+0x48>)
 80004b0:	f043 0304 	orr.w	r3, r3, #4
 80004b4:	6013      	str	r3, [r2, #0]

	// Enable the interrupt bit
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 80004b6:	4b08      	ldr	r3, [pc, #32]	@ (80004d8 <init_systick+0x48>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4a07      	ldr	r2, [pc, #28]	@ (80004d8 <init_systick+0x48>)
 80004bc:	f043 0302 	orr.w	r3, r3, #2
 80004c0:	6013      	str	r3, [r2, #0]

	// Set the enable bit in the CTRL (CSR) to start the timer.
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk ;
 80004c2:	4b05      	ldr	r3, [pc, #20]	@ (80004d8 <init_systick+0x48>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a04      	ldr	r2, [pc, #16]	@ (80004d8 <init_systick+0x48>)
 80004c8:	f043 0301 	orr.w	r3, r3, #1
 80004cc:	6013      	str	r3, [r2, #0]
}
 80004ce:	bf00      	nop
 80004d0:	46bd      	mov	sp, r7
 80004d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d6:	4770      	bx	lr
 80004d8:	e000e010 	.word	0xe000e010

080004dc <SysTick_Handler>:

//******************************************************************************************
// This function is to handle SysTick Timer
//******************************************************************************************
void SysTick_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
	//In this example, we will have LED blinking at One second interval so first Update One Second Counter
	//three_second_counter++;
	one_second_counter++;
 80004e0:	4b0a      	ldr	r3, [pc, #40]	@ (800050c <SysTick_Handler+0x30>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	3301      	adds	r3, #1
 80004e6:	4a09      	ldr	r2, [pc, #36]	@ (800050c <SysTick_Handler+0x30>)
 80004e8:	6013      	str	r3, [r2, #0]

	// Set a global One second elapsed flag when the handler has been called 1000 times
	// Once flag is set, reset the counter
	if (one_second_counter == 1000)
 80004ea:	4b08      	ldr	r3, [pc, #32]	@ (800050c <SysTick_Handler+0x30>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80004f2:	d105      	bne.n	8000500 <SysTick_Handler+0x24>
	{
		one_second_elapsed = true;
 80004f4:	4b06      	ldr	r3, [pc, #24]	@ (8000510 <SysTick_Handler+0x34>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	701a      	strb	r2, [r3, #0]
		one_second_counter = 0;
 80004fa:	4b04      	ldr	r3, [pc, #16]	@ (800050c <SysTick_Handler+0x30>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
	}
}
 8000500:	bf00      	nop
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	20000090 	.word	0x20000090
 8000510:	20000094 	.word	0x20000094

08000514 <parse_uint>:


static int parse_uint(const char *s, uint32_t *out){
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
    if (!s || !*s) return 0;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d003      	beq.n	800052c <parse_uint+0x18>
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d101      	bne.n	8000530 <parse_uint+0x1c>
 800052c:	2300      	movs	r3, #0
 800052e:	e026      	b.n	800057e <parse_uint+0x6a>
    uint32_t v = 0;
 8000530:	2300      	movs	r3, #0
 8000532:	60fb      	str	r3, [r7, #12]
    for (const char *p = s; *p; ++p){
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	60bb      	str	r3, [r7, #8]
 8000538:	e019      	b.n	800056e <parse_uint+0x5a>
        if (!isdigit((unsigned char)*p)) return 0;
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	3301      	adds	r3, #1
 8000540:	4a12      	ldr	r2, [pc, #72]	@ (800058c <parse_uint+0x78>)
 8000542:	4413      	add	r3, r2
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	f003 0304 	and.w	r3, r3, #4
 800054a:	2b00      	cmp	r3, #0
 800054c:	d101      	bne.n	8000552 <parse_uint+0x3e>
 800054e:	2300      	movs	r3, #0
 8000550:	e015      	b.n	800057e <parse_uint+0x6a>
        v = (uint32_t)(v*10u + (uint32_t)(*p - '0'));
 8000552:	68fa      	ldr	r2, [r7, #12]
 8000554:	4613      	mov	r3, r2
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	4413      	add	r3, r2
 800055a:	005b      	lsls	r3, r3, #1
 800055c:	461a      	mov	r2, r3
 800055e:	68bb      	ldr	r3, [r7, #8]
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	4413      	add	r3, r2
 8000564:	3b30      	subs	r3, #48	@ 0x30
 8000566:	60fb      	str	r3, [r7, #12]
    for (const char *p = s; *p; ++p){
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	3301      	adds	r3, #1
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	68bb      	ldr	r3, [r7, #8]
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d1e1      	bne.n	800053a <parse_uint+0x26>
    }
    *out = v;
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	68fa      	ldr	r2, [r7, #12]
 800057a:	601a      	str	r2, [r3, #0]
    return 1;
 800057c:	2301      	movs	r3, #1
}
 800057e:	4618      	mov	r0, r3
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	08002bb4 	.word	0x08002bb4

08000590 <HAL_GPIO_EXTI_Callback>:

//******************************************************************************************
// This function is to handle interrupts generated because of pressing B1 switch
//******************************************************************************************
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 800059a:	88fb      	ldrh	r3, [r7, #6]
 800059c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80005a0:	d117      	bne.n	80005d2 <HAL_GPIO_EXTI_Callback+0x42>
		// Add your code ---

		// If more than 3 second then Switch to Pattern Mode

		// Reset Switch time (in milliseconds)
		B1_Switch_Press_time_ms = 0;
 80005a2:	4b0e      	ldr	r3, [pc, #56]	@ (80005dc <HAL_GPIO_EXTI_Callback+0x4c>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]

		while(GPIO_PIN_RESET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 80005a8:	e00b      	b.n	80005c2 <HAL_GPIO_EXTI_Callback+0x32>
		{
			// Blocking code --

			// We can use SysTick Interrupt to keep track of time
			while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
 80005aa:	bf00      	nop
 80005ac:	4b0c      	ldr	r3, [pc, #48]	@ (80005e0 <HAL_GPIO_EXTI_Callback+0x50>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d0f9      	beq.n	80005ac <HAL_GPIO_EXTI_Callback+0x1c>
			{
				// do nothing -- Blocking code -- 1ms timer
			}
			B1_Switch_Press_time_ms++;
 80005b8:	4b08      	ldr	r3, [pc, #32]	@ (80005dc <HAL_GPIO_EXTI_Callback+0x4c>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	3301      	adds	r3, #1
 80005be:	4a07      	ldr	r2, [pc, #28]	@ (80005dc <HAL_GPIO_EXTI_Callback+0x4c>)
 80005c0:	6013      	str	r3, [r2, #0]
		while(GPIO_PIN_RESET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 80005c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005c6:	4807      	ldr	r0, [pc, #28]	@ (80005e4 <HAL_GPIO_EXTI_Callback+0x54>)
 80005c8:	f000 fba4 	bl	8000d14 <HAL_GPIO_ReadPin>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d0eb      	beq.n	80005aa <HAL_GPIO_EXTI_Callback+0x1a>

			// If we are in Auto mode and B1 Switch is Pressed for 3 Seconds or more then Switch to Pattern Mode
			// ---- Add your code
		}
	}
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	2000008c 	.word	0x2000008c
 80005e0:	e000e010 	.word	0xe000e010
 80005e4:	48000800 	.word	0x48000800

080005e8 <run_demo>:
//******************************************************************************************
// Run Demo -- main function with forever loop
//******************************************************************************************

void run_demo( void )
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af00      	add	r7, sp, #0
	// Default mode is Auto Mode
	printf("%s\r\n", "*** AUTO MODE ***");
 80005ee:	4996      	ldr	r1, [pc, #600]	@ (8000848 <run_demo+0x260>)
 80005f0:	4896      	ldr	r0, [pc, #600]	@ (800084c <run_demo+0x264>)
 80005f2:	f000 ff69 	bl	80014c8 <printf>

	// Set buffer for Command Buffer
	uint32_t input_index = 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
	memset(command_buffer, 0, 100);
 80005fa:	2264      	movs	r2, #100	@ 0x64
 80005fc:	2100      	movs	r1, #0
 80005fe:	4894      	ldr	r0, [pc, #592]	@ (8000850 <run_demo+0x268>)
 8000600:	f001 f9c4 	bl	800198c <memset>

	// Start forever loop
	while(1)
	{
		// Read USART to see if USER typed any commands
		char one_char = USART_Read_NB(USART2);
 8000604:	4893      	ldr	r0, [pc, #588]	@ (8000854 <run_demo+0x26c>)
 8000606:	f000 fee9 	bl	80013dc <USART_Read_NB>
 800060a:	4603      	mov	r3, r0
 800060c:	74fb      	strb	r3, [r7, #19]
		(void) one_char;	/// avoid compiler warning

		if(OP_MODE == AUTO_MODE){
 800060e:	4b92      	ldr	r3, [pc, #584]	@ (8000858 <run_demo+0x270>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	f040 8290 	bne.w	8000b38 <run_demo+0x550>
		    switch (ui_state){
 8000618:	4b90      	ldr	r3, [pc, #576]	@ (800085c <run_demo+0x274>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b06      	cmp	r3, #6
 800061e:	f200 828b 	bhi.w	8000b38 <run_demo+0x550>
 8000622:	a201      	add	r2, pc, #4	@ (adr r2, 8000628 <run_demo+0x40>)
 8000624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000628:	08000645 	.word	0x08000645
 800062c:	080006c7 	.word	0x080006c7
 8000630:	080007c9 	.word	0x080007c9
 8000634:	0800094d 	.word	0x0800094d
 8000638:	08000b39 	.word	0x08000b39
 800063c:	080009a9 	.word	0x080009a9
 8000640:	08000a91 	.word	0x08000a91
		    	case UI_INIT:
					printf("%s\r\n", "\0");
 8000644:	4986      	ldr	r1, [pc, #536]	@ (8000860 <run_demo+0x278>)
 8000646:	4881      	ldr	r0, [pc, #516]	@ (800084c <run_demo+0x264>)
 8000648:	f000 ff3e 	bl	80014c8 <printf>
					printf("%s\r\n", "*** Default Number of Pulses to read ***");
 800064c:	4985      	ldr	r1, [pc, #532]	@ (8000864 <run_demo+0x27c>)
 800064e:	487f      	ldr	r0, [pc, #508]	@ (800084c <run_demo+0x264>)
 8000650:	f000 ff3a 	bl	80014c8 <printf>
					printf("  Number of pulses : %lu\r\n", (unsigned long)num_pulses);
 8000654:	4b84      	ldr	r3, [pc, #528]	@ (8000868 <run_demo+0x280>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4619      	mov	r1, r3
 800065a:	4884      	ldr	r0, [pc, #528]	@ (800086c <run_demo+0x284>)
 800065c:	f000 ff34 	bl	80014c8 <printf>
					printf("%s\r\n", "*** Default Lower Limit of the pulse ***");
 8000660:	4983      	ldr	r1, [pc, #524]	@ (8000870 <run_demo+0x288>)
 8000662:	487a      	ldr	r0, [pc, #488]	@ (800084c <run_demo+0x264>)
 8000664:	f000 ff30 	bl	80014c8 <printf>
					printf("  Lower limit (us) : %lu\r\n", (unsigned long)lower_us);
 8000668:	4b82      	ldr	r3, [pc, #520]	@ (8000874 <run_demo+0x28c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4619      	mov	r1, r3
 800066e:	4882      	ldr	r0, [pc, #520]	@ (8000878 <run_demo+0x290>)
 8000670:	f000 ff2a 	bl	80014c8 <printf>
					printf("%s\r\n", "*** Default Upper Limit of the pulse ***");
 8000674:	4981      	ldr	r1, [pc, #516]	@ (800087c <run_demo+0x294>)
 8000676:	4875      	ldr	r0, [pc, #468]	@ (800084c <run_demo+0x264>)
 8000678:	f000 ff26 	bl	80014c8 <printf>
					printf("  Upper limit (us) : %lu\r\n", (unsigned long)upper_us);
 800067c:	4b80      	ldr	r3, [pc, #512]	@ (8000880 <run_demo+0x298>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4619      	mov	r1, r3
 8000682:	4880      	ldr	r0, [pc, #512]	@ (8000884 <run_demo+0x29c>)
 8000684:	f000 ff20 	bl	80014c8 <printf>
					printf("%s\r\n", "\0");
 8000688:	4975      	ldr	r1, [pc, #468]	@ (8000860 <run_demo+0x278>)
 800068a:	4870      	ldr	r0, [pc, #448]	@ (800084c <run_demo+0x264>)
 800068c:	f000 ff1c 	bl	80014c8 <printf>
					memset(command_buffer, 0, 100);
 8000690:	2264      	movs	r2, #100	@ 0x64
 8000692:	2100      	movs	r1, #0
 8000694:	486e      	ldr	r0, [pc, #440]	@ (8000850 <run_demo+0x268>)
 8000696:	f001 f979 	bl	800198c <memset>
					input_index = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]
					ui_state = UI_PROMPT_PULSES;
 800069e:	4b6f      	ldr	r3, [pc, #444]	@ (800085c <run_demo+0x274>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	701a      	strb	r2, [r3, #0]

					printf("%s\r\n", "\0");
 80006a4:	496e      	ldr	r1, [pc, #440]	@ (8000860 <run_demo+0x278>)
 80006a6:	4869      	ldr	r0, [pc, #420]	@ (800084c <run_demo+0x264>)
 80006a8:	f000 ff0e 	bl	80014c8 <printf>
					printf("%s\r\n", "Entering UI_PROMPT_PULSES");
 80006ac:	4976      	ldr	r1, [pc, #472]	@ (8000888 <run_demo+0x2a0>)
 80006ae:	4867      	ldr	r0, [pc, #412]	@ (800084c <run_demo+0x264>)
 80006b0:	f000 ff0a 	bl	80014c8 <printf>
					printf("%s\r\n", "*** TYPE Number of pulses then press enter, or enter for default***");
 80006b4:	4975      	ldr	r1, [pc, #468]	@ (800088c <run_demo+0x2a4>)
 80006b6:	4865      	ldr	r0, [pc, #404]	@ (800084c <run_demo+0x264>)
 80006b8:	f000 ff06 	bl	80014c8 <printf>
					printf("%s\r\n", "\0");
 80006bc:	4968      	ldr	r1, [pc, #416]	@ (8000860 <run_demo+0x278>)
 80006be:	4863      	ldr	r0, [pc, #396]	@ (800084c <run_demo+0x264>)
 80006c0:	f000 ff02 	bl	80014c8 <printf>
					break;
 80006c4:	e238      	b.n	8000b38 <run_demo+0x550>
		    	case UI_PROMPT_PULSES:
					if (one_char == 0x0D){
 80006c6:	7cfb      	ldrb	r3, [r7, #19]
 80006c8:	2b0d      	cmp	r3, #13
 80006ca:	d165      	bne.n	8000798 <run_demo+0x1b0>
						if (input_index == 0){
 80006cc:	697b      	ldr	r3, [r7, #20]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d104      	bne.n	80006dc <run_demo+0xf4>
							num_pulses = PULSES_DEFAULT;
 80006d2:	4b65      	ldr	r3, [pc, #404]	@ (8000868 <run_demo+0x280>)
 80006d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	e034      	b.n	8000746 <run_demo+0x15e>
						}
						else {
							uint32_t v;
							parse_uint(command_buffer, &v);
 80006dc:	f107 0308 	add.w	r3, r7, #8
 80006e0:	4619      	mov	r1, r3
 80006e2:	485b      	ldr	r0, [pc, #364]	@ (8000850 <run_demo+0x268>)
 80006e4:	f7ff ff16 	bl	8000514 <parse_uint>
							if (v >= PULSES_MIN && v <= PULSES_MAX && v != 0){
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	2b63      	cmp	r3, #99	@ 0x63
 80006ec:	d90b      	bls.n	8000706 <run_demo+0x11e>
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d806      	bhi.n	8000706 <run_demo+0x11e>
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d003      	beq.n	8000706 <run_demo+0x11e>
								//valid
								num_pulses = v;
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	4a59      	ldr	r2, [pc, #356]	@ (8000868 <run_demo+0x280>)
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	e01f      	b.n	8000746 <run_demo+0x15e>
							}
							else {
								//invalid
								printf("%s\r\n", "\0");
 8000706:	4956      	ldr	r1, [pc, #344]	@ (8000860 <run_demo+0x278>)
 8000708:	4850      	ldr	r0, [pc, #320]	@ (800084c <run_demo+0x264>)
 800070a:	f000 fedd 	bl	80014c8 <printf>
								printf("%s\r\n", "*** invalid pulse chosen***");
 800070e:	4960      	ldr	r1, [pc, #384]	@ (8000890 <run_demo+0x2a8>)
 8000710:	484e      	ldr	r0, [pc, #312]	@ (800084c <run_demo+0x264>)
 8000712:	f000 fed9 	bl	80014c8 <printf>
								printf("*** Limit of the pulse count [%u..%u] (default %u) ***\r\n", PULSES_MIN, PULSES_MAX, PULSES_DEFAULT);
 8000716:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800071a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800071e:	2164      	movs	r1, #100	@ 0x64
 8000720:	485c      	ldr	r0, [pc, #368]	@ (8000894 <run_demo+0x2ac>)
 8000722:	f000 fed1 	bl	80014c8 <printf>
								printf("%s\r\n", "*** TYPE Number of pulses then press enter, or enter for default***");
 8000726:	4959      	ldr	r1, [pc, #356]	@ (800088c <run_demo+0x2a4>)
 8000728:	4848      	ldr	r0, [pc, #288]	@ (800084c <run_demo+0x264>)
 800072a:	f000 fecd 	bl	80014c8 <printf>
								printf("%s\r\n", "\0");
 800072e:	494c      	ldr	r1, [pc, #304]	@ (8000860 <run_demo+0x278>)
 8000730:	4846      	ldr	r0, [pc, #280]	@ (800084c <run_demo+0x264>)
 8000732:	f000 fec9 	bl	80014c8 <printf>
							    memset(command_buffer, 0, 100);
 8000736:	2264      	movs	r2, #100	@ 0x64
 8000738:	2100      	movs	r1, #0
 800073a:	4845      	ldr	r0, [pc, #276]	@ (8000850 <run_demo+0x268>)
 800073c:	f001 f926 	bl	800198c <memset>
							    input_index = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
 8000744:	e1f8      	b.n	8000b38 <run_demo+0x550>
							    break;
							}
						}
						printf("%s\r\n", "\0");
 8000746:	4946      	ldr	r1, [pc, #280]	@ (8000860 <run_demo+0x278>)
 8000748:	4840      	ldr	r0, [pc, #256]	@ (800084c <run_demo+0x264>)
 800074a:	f000 febd 	bl	80014c8 <printf>
						printf("  Number of pulses chosen : %lu\r\n", (unsigned long)num_pulses);
 800074e:	4b46      	ldr	r3, [pc, #280]	@ (8000868 <run_demo+0x280>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4619      	mov	r1, r3
 8000754:	4850      	ldr	r0, [pc, #320]	@ (8000898 <run_demo+0x2b0>)
 8000756:	f000 feb7 	bl	80014c8 <printf>
						printf("%s\r\n", "\0");
 800075a:	4941      	ldr	r1, [pc, #260]	@ (8000860 <run_demo+0x278>)
 800075c:	483b      	ldr	r0, [pc, #236]	@ (800084c <run_demo+0x264>)
 800075e:	f000 feb3 	bl	80014c8 <printf>
						memset(command_buffer, 0, 100);
 8000762:	2264      	movs	r2, #100	@ 0x64
 8000764:	2100      	movs	r1, #0
 8000766:	483a      	ldr	r0, [pc, #232]	@ (8000850 <run_demo+0x268>)
 8000768:	f001 f910 	bl	800198c <memset>
						input_index = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
						ui_state = UI_PROMPT_LOWER;
 8000770:	4b3a      	ldr	r3, [pc, #232]	@ (800085c <run_demo+0x274>)
 8000772:	2202      	movs	r2, #2
 8000774:	701a      	strb	r2, [r3, #0]
						printf("%s\r\n", "\0");
 8000776:	493a      	ldr	r1, [pc, #232]	@ (8000860 <run_demo+0x278>)
 8000778:	4834      	ldr	r0, [pc, #208]	@ (800084c <run_demo+0x264>)
 800077a:	f000 fea5 	bl	80014c8 <printf>
						printf("%s\r\n", "Entering UI_PROMPT_LOWER");
 800077e:	4947      	ldr	r1, [pc, #284]	@ (800089c <run_demo+0x2b4>)
 8000780:	4832      	ldr	r0, [pc, #200]	@ (800084c <run_demo+0x264>)
 8000782:	f000 fea1 	bl	80014c8 <printf>
						printf("%s\r\n", "*** TYPE lower bound of pulses then press enter, or enter for default***");
 8000786:	4946      	ldr	r1, [pc, #280]	@ (80008a0 <run_demo+0x2b8>)
 8000788:	4830      	ldr	r0, [pc, #192]	@ (800084c <run_demo+0x264>)
 800078a:	f000 fe9d 	bl	80014c8 <printf>
						printf("%s\r\n", "\0");
 800078e:	4934      	ldr	r1, [pc, #208]	@ (8000860 <run_demo+0x278>)
 8000790:	482e      	ldr	r0, [pc, #184]	@ (800084c <run_demo+0x264>)
 8000792:	f000 fe99 	bl	80014c8 <printf>
				} else if (one_char != '\0' && input_index < sizeof(command_buffer)-1) {
					command_buffer[input_index++] = one_char;
					command_buffer[input_index]   = '\0';
					printf("\r%s", command_buffer);
				}
				break;
 8000796:	e1c6      	b.n	8000b26 <run_demo+0x53e>
				} else if (one_char != '\0' && input_index < sizeof(command_buffer)-1) {
 8000798:	7cfb      	ldrb	r3, [r7, #19]
 800079a:	2b00      	cmp	r3, #0
 800079c:	f000 81c3 	beq.w	8000b26 <run_demo+0x53e>
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	2b62      	cmp	r3, #98	@ 0x62
 80007a4:	f200 81bf 	bhi.w	8000b26 <run_demo+0x53e>
					command_buffer[input_index++] = one_char;
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	1c5a      	adds	r2, r3, #1
 80007ac:	617a      	str	r2, [r7, #20]
 80007ae:	4928      	ldr	r1, [pc, #160]	@ (8000850 <run_demo+0x268>)
 80007b0:	7cfa      	ldrb	r2, [r7, #19]
 80007b2:	54ca      	strb	r2, [r1, r3]
					command_buffer[input_index]   = '\0';
 80007b4:	4a26      	ldr	r2, [pc, #152]	@ (8000850 <run_demo+0x268>)
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	4413      	add	r3, r2
 80007ba:	2200      	movs	r2, #0
 80007bc:	701a      	strb	r2, [r3, #0]
					printf("\r%s", command_buffer);
 80007be:	4924      	ldr	r1, [pc, #144]	@ (8000850 <run_demo+0x268>)
 80007c0:	4838      	ldr	r0, [pc, #224]	@ (80008a4 <run_demo+0x2bc>)
 80007c2:	f000 fe81 	bl	80014c8 <printf>
				break;
 80007c6:	e1ae      	b.n	8000b26 <run_demo+0x53e>

		    case UI_PROMPT_LOWER:
		    	if (one_char == 0x0D){
 80007c8:	7cfb      	ldrb	r3, [r7, #19]
 80007ca:	2b0d      	cmp	r3, #13
 80007cc:	f040 80a6 	bne.w	800091c <run_demo+0x334>
		    		if (input_index == 0){
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d104      	bne.n	80007e0 <run_demo+0x1f8>
		    			lower_us = LOWER_DEFAULT;
 80007d6:	4b27      	ldr	r3, [pc, #156]	@ (8000874 <run_demo+0x28c>)
 80007d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	e069      	b.n	80008b4 <run_demo+0x2cc>
		    		}
		    		else {
						uint32_t v;
						parse_uint(command_buffer, &v);
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	4619      	mov	r1, r3
 80007e4:	481a      	ldr	r0, [pc, #104]	@ (8000850 <run_demo+0x268>)
 80007e6:	f7ff fe95 	bl	8000514 <parse_uint>
						if (v >= LOWER_MIN_US && v <= LOWER_MAX_US && v != 0){
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2b63      	cmp	r3, #99	@ 0x63
 80007ee:	d90b      	bls.n	8000808 <run_demo+0x220>
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	f242 3228 	movw	r2, #9000	@ 0x2328
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d806      	bhi.n	8000808 <run_demo+0x220>
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d003      	beq.n	8000808 <run_demo+0x220>
							//valid
							lower_us = v;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4a1c      	ldr	r2, [pc, #112]	@ (8000874 <run_demo+0x28c>)
 8000804:	6013      	str	r3, [r2, #0]
 8000806:	e055      	b.n	80008b4 <run_demo+0x2cc>
						}
						else {
							printf("%s\r\n", "\0");
 8000808:	4915      	ldr	r1, [pc, #84]	@ (8000860 <run_demo+0x278>)
 800080a:	4810      	ldr	r0, [pc, #64]	@ (800084c <run_demo+0x264>)
 800080c:	f000 fe5c 	bl	80014c8 <printf>
							printf("%s\r\n", "*** invalid pulse lower limit chosen***");
 8000810:	4925      	ldr	r1, [pc, #148]	@ (80008a8 <run_demo+0x2c0>)
 8000812:	480e      	ldr	r0, [pc, #56]	@ (800084c <run_demo+0x264>)
 8000814:	f000 fe58 	bl	80014c8 <printf>
		                    printf("*** Lower Limit of the pulse in microseconds [%u..%u] (default %u) ***\r\n", LOWER_MIN_US, LOWER_MAX_US, LOWER_DEFAULT);
 8000818:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800081c:	f242 3228 	movw	r2, #9000	@ 0x2328
 8000820:	2164      	movs	r1, #100	@ 0x64
 8000822:	4822      	ldr	r0, [pc, #136]	@ (80008ac <run_demo+0x2c4>)
 8000824:	f000 fe50 	bl	80014c8 <printf>
							printf("%s\r\n", "*** TYPE lower limit for pulses then press enter, or enter for default***");
 8000828:	4921      	ldr	r1, [pc, #132]	@ (80008b0 <run_demo+0x2c8>)
 800082a:	4808      	ldr	r0, [pc, #32]	@ (800084c <run_demo+0x264>)
 800082c:	f000 fe4c 	bl	80014c8 <printf>
							printf("%s\r\n", "\0");
 8000830:	490b      	ldr	r1, [pc, #44]	@ (8000860 <run_demo+0x278>)
 8000832:	4806      	ldr	r0, [pc, #24]	@ (800084c <run_demo+0x264>)
 8000834:	f000 fe48 	bl	80014c8 <printf>
							memset(command_buffer, 0, 100);
 8000838:	2264      	movs	r2, #100	@ 0x64
 800083a:	2100      	movs	r1, #0
 800083c:	4804      	ldr	r0, [pc, #16]	@ (8000850 <run_demo+0x268>)
 800083e:	f001 f8a5 	bl	800198c <memset>
							input_index = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
 8000846:	e177      	b.n	8000b38 <run_demo+0x550>
 8000848:	080025b8 	.word	0x080025b8
 800084c:	080025a4 	.word	0x080025a4
 8000850:	2000023c 	.word	0x2000023c
 8000854:	40004400 	.word	0x40004400
 8000858:	20000095 	.word	0x20000095
 800085c:	20000096 	.word	0x20000096
 8000860:	080025cc 	.word	0x080025cc
 8000864:	080025d0 	.word	0x080025d0
 8000868:	20000000 	.word	0x20000000
 800086c:	080025fc 	.word	0x080025fc
 8000870:	08002618 	.word	0x08002618
 8000874:	20000004 	.word	0x20000004
 8000878:	08002644 	.word	0x08002644
 800087c:	08002660 	.word	0x08002660
 8000880:	20000008 	.word	0x20000008
 8000884:	0800268c 	.word	0x0800268c
 8000888:	080026a8 	.word	0x080026a8
 800088c:	080026c4 	.word	0x080026c4
 8000890:	08002708 	.word	0x08002708
 8000894:	08002724 	.word	0x08002724
 8000898:	08002760 	.word	0x08002760
 800089c:	08002784 	.word	0x08002784
 80008a0:	080027a0 	.word	0x080027a0
 80008a4:	080027ec 	.word	0x080027ec
 80008a8:	080027f0 	.word	0x080027f0
 80008ac:	08002818 	.word	0x08002818
 80008b0:	08002864 	.word	0x08002864
							break;
						}
		    		}
					printf("%s\r\n", "\0");
 80008b4:	49a2      	ldr	r1, [pc, #648]	@ (8000b40 <run_demo+0x558>)
 80008b6:	48a3      	ldr	r0, [pc, #652]	@ (8000b44 <run_demo+0x55c>)
 80008b8:	f000 fe06 	bl	80014c8 <printf>
					printf("Minimum pulse chosen : %lu\r\n", (unsigned long)lower_us);
 80008bc:	4ba2      	ldr	r3, [pc, #648]	@ (8000b48 <run_demo+0x560>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4619      	mov	r1, r3
 80008c2:	48a2      	ldr	r0, [pc, #648]	@ (8000b4c <run_demo+0x564>)
 80008c4:	f000 fe00 	bl	80014c8 <printf>
					upper_us = lower_us + 100;
 80008c8:	4b9f      	ldr	r3, [pc, #636]	@ (8000b48 <run_demo+0x560>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	3364      	adds	r3, #100	@ 0x64
 80008ce:	4aa0      	ldr	r2, [pc, #640]	@ (8000b50 <run_demo+0x568>)
 80008d0:	6013      	str	r3, [r2, #0]
					printf("Maximum pulse : %lu\r\n", (unsigned long)upper_us);
 80008d2:	4b9f      	ldr	r3, [pc, #636]	@ (8000b50 <run_demo+0x568>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4619      	mov	r1, r3
 80008d8:	489e      	ldr	r0, [pc, #632]	@ (8000b54 <run_demo+0x56c>)
 80008da:	f000 fdf5 	bl	80014c8 <printf>
					printf("%s\r\n", "\0");
 80008de:	4998      	ldr	r1, [pc, #608]	@ (8000b40 <run_demo+0x558>)
 80008e0:	4898      	ldr	r0, [pc, #608]	@ (8000b44 <run_demo+0x55c>)
 80008e2:	f000 fdf1 	bl	80014c8 <printf>
					memset(command_buffer, 0, 100);
 80008e6:	2264      	movs	r2, #100	@ 0x64
 80008e8:	2100      	movs	r1, #0
 80008ea:	489b      	ldr	r0, [pc, #620]	@ (8000b58 <run_demo+0x570>)
 80008ec:	f001 f84e 	bl	800198c <memset>
					input_index = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
					ui_state = UI_CONFIRM;
 80008f4:	4b99      	ldr	r3, [pc, #612]	@ (8000b5c <run_demo+0x574>)
 80008f6:	2203      	movs	r2, #3
 80008f8:	701a      	strb	r2, [r3, #0]
					printf("%s\r\n", "\0");
 80008fa:	4991      	ldr	r1, [pc, #580]	@ (8000b40 <run_demo+0x558>)
 80008fc:	4891      	ldr	r0, [pc, #580]	@ (8000b44 <run_demo+0x55c>)
 80008fe:	f000 fde3 	bl	80014c8 <printf>
					printf("%s\r\n", "Entering UI_CONFIRM");
 8000902:	4997      	ldr	r1, [pc, #604]	@ (8000b60 <run_demo+0x578>)
 8000904:	488f      	ldr	r0, [pc, #572]	@ (8000b44 <run_demo+0x55c>)
 8000906:	f000 fddf 	bl	80014c8 <printf>
					printf("%s\r\n", "*** REVIEW SETTINGS ***");
 800090a:	4996      	ldr	r1, [pc, #600]	@ (8000b64 <run_demo+0x57c>)
 800090c:	488d      	ldr	r0, [pc, #564]	@ (8000b44 <run_demo+0x55c>)
 800090e:	f000 fddb 	bl	80014c8 <printf>
					printf("%s\r\n", "\0");
 8000912:	498b      	ldr	r1, [pc, #556]	@ (8000b40 <run_demo+0x558>)
 8000914:	488b      	ldr	r0, [pc, #556]	@ (8000b44 <run_demo+0x55c>)
 8000916:	f000 fdd7 	bl	80014c8 <printf>
		    	} else if (one_char != '\0' && input_index < sizeof(command_buffer)-1) {
					command_buffer[input_index++] = one_char;
					command_buffer[input_index]   = '\0';
					printf("\r%s", command_buffer);
				}
		    	break;
 800091a:	e106      	b.n	8000b2a <run_demo+0x542>
		    	} else if (one_char != '\0' && input_index < sizeof(command_buffer)-1) {
 800091c:	7cfb      	ldrb	r3, [r7, #19]
 800091e:	2b00      	cmp	r3, #0
 8000920:	f000 8103 	beq.w	8000b2a <run_demo+0x542>
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	2b62      	cmp	r3, #98	@ 0x62
 8000928:	f200 80ff 	bhi.w	8000b2a <run_demo+0x542>
					command_buffer[input_index++] = one_char;
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	1c5a      	adds	r2, r3, #1
 8000930:	617a      	str	r2, [r7, #20]
 8000932:	4989      	ldr	r1, [pc, #548]	@ (8000b58 <run_demo+0x570>)
 8000934:	7cfa      	ldrb	r2, [r7, #19]
 8000936:	54ca      	strb	r2, [r1, r3]
					command_buffer[input_index]   = '\0';
 8000938:	4a87      	ldr	r2, [pc, #540]	@ (8000b58 <run_demo+0x570>)
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	4413      	add	r3, r2
 800093e:	2200      	movs	r2, #0
 8000940:	701a      	strb	r2, [r3, #0]
					printf("\r%s", command_buffer);
 8000942:	4985      	ldr	r1, [pc, #532]	@ (8000b58 <run_demo+0x570>)
 8000944:	4888      	ldr	r0, [pc, #544]	@ (8000b68 <run_demo+0x580>)
 8000946:	f000 fdbf 	bl	80014c8 <printf>
		    	break;
 800094a:	e0ee      	b.n	8000b2a <run_demo+0x542>
		    case UI_CONFIRM:
		    	printf("%s\r\n", "\0");
 800094c:	497c      	ldr	r1, [pc, #496]	@ (8000b40 <run_demo+0x558>)
 800094e:	487d      	ldr	r0, [pc, #500]	@ (8000b44 <run_demo+0x55c>)
 8000950:	f000 fdba 	bl	80014c8 <printf>
		        printf("  Number of pulses : %lu\r\n", (unsigned long)num_pulses);
 8000954:	4b85      	ldr	r3, [pc, #532]	@ (8000b6c <run_demo+0x584>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4619      	mov	r1, r3
 800095a:	4885      	ldr	r0, [pc, #532]	@ (8000b70 <run_demo+0x588>)
 800095c:	f000 fdb4 	bl	80014c8 <printf>
		        printf("  Lower limit (us) : %lu\r\n", (unsigned long)lower_us);
 8000960:	4b79      	ldr	r3, [pc, #484]	@ (8000b48 <run_demo+0x560>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4619      	mov	r1, r3
 8000966:	4883      	ldr	r0, [pc, #524]	@ (8000b74 <run_demo+0x58c>)
 8000968:	f000 fdae 	bl	80014c8 <printf>
		        upper_us = lower_us + 100u;
 800096c:	4b76      	ldr	r3, [pc, #472]	@ (8000b48 <run_demo+0x560>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	3364      	adds	r3, #100	@ 0x64
 8000972:	4a77      	ldr	r2, [pc, #476]	@ (8000b50 <run_demo+0x568>)
 8000974:	6013      	str	r3, [r2, #0]
		        printf("  Upper limit (us) : %lu  (lower + 100)\r\n", (unsigned long)upper_us);
 8000976:	4b76      	ldr	r3, [pc, #472]	@ (8000b50 <run_demo+0x568>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4619      	mov	r1, r3
 800097c:	487e      	ldr	r0, [pc, #504]	@ (8000b78 <run_demo+0x590>)
 800097e:	f000 fda3 	bl	80014c8 <printf>
		        printf("\r\nPress Enter to START measurements...\r\n");
 8000982:	487e      	ldr	r0, [pc, #504]	@ (8000b7c <run_demo+0x594>)
 8000984:	f000 ff02 	bl	800178c <puts>
		        printf("%s\r\n", "Entering UI_WAIT_SELECTION");
 8000988:	497d      	ldr	r1, [pc, #500]	@ (8000b80 <run_demo+0x598>)
 800098a:	486e      	ldr	r0, [pc, #440]	@ (8000b44 <run_demo+0x55c>)
 800098c:	f000 fd9c 	bl	80014c8 <printf>
		        printf("%s\r\n", "Press ENTER to confirm, L to return to lower bound, and P to edit pulses.");
 8000990:	497c      	ldr	r1, [pc, #496]	@ (8000b84 <run_demo+0x59c>)
 8000992:	486c      	ldr	r0, [pc, #432]	@ (8000b44 <run_demo+0x55c>)
 8000994:	f000 fd98 	bl	80014c8 <printf>
		        printf("%s\r\n", "\0");
 8000998:	4969      	ldr	r1, [pc, #420]	@ (8000b40 <run_demo+0x558>)
 800099a:	486a      	ldr	r0, [pc, #424]	@ (8000b44 <run_demo+0x55c>)
 800099c:	f000 fd94 	bl	80014c8 <printf>
		        ui_state = UI_WAIT_SELECTION;
 80009a0:	4b6e      	ldr	r3, [pc, #440]	@ (8000b5c <run_demo+0x574>)
 80009a2:	2205      	movs	r2, #5
 80009a4:	701a      	strb	r2, [r3, #0]
		    	break;
 80009a6:	e0c7      	b.n	8000b38 <run_demo+0x550>
		    case UI_WAIT_SELECTION:
		    	if (one_char == '\0'){
 80009a8:	7cfb      	ldrb	r3, [r7, #19]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	f000 80bf 	beq.w	8000b2e <run_demo+0x546>
		    		break;
		    	}
		    	if (one_char == 0x0D){
 80009b0:	7cfb      	ldrb	r3, [r7, #19]
 80009b2:	2b0d      	cmp	r3, #13
 80009b4:	d10f      	bne.n	80009d6 <run_demo+0x3ee>
		    		printf("\r\nSTARTING...\r\n");
 80009b6:	4874      	ldr	r0, [pc, #464]	@ (8000b88 <run_demo+0x5a0>)
 80009b8:	f000 fee8 	bl	800178c <puts>
		    		printf("%s\r\n", "Entering UI_DONE");
 80009bc:	4973      	ldr	r1, [pc, #460]	@ (8000b8c <run_demo+0x5a4>)
 80009be:	4861      	ldr	r0, [pc, #388]	@ (8000b44 <run_demo+0x55c>)
 80009c0:	f000 fd82 	bl	80014c8 <printf>
		    		reset_histogram();
 80009c4:	f7ff fd1e 	bl	8000404 <reset_histogram>
		    		measurement_active = 1;
 80009c8:	4b71      	ldr	r3, [pc, #452]	@ (8000b90 <run_demo+0x5a8>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	701a      	strb	r2, [r3, #0]
		    		ui_state = UI_DONE;
 80009ce:	4b63      	ldr	r3, [pc, #396]	@ (8000b5c <run_demo+0x574>)
 80009d0:	2206      	movs	r2, #6
 80009d2:	701a      	strb	r2, [r3, #0]
		    		break;
 80009d4:	e0b0      	b.n	8000b38 <run_demo+0x550>
		    	}

		    	else if (one_char == 'L' || one_char == 'l') {
 80009d6:	7cfb      	ldrb	r3, [r7, #19]
 80009d8:	2b4c      	cmp	r3, #76	@ 0x4c
 80009da:	d002      	beq.n	80009e2 <run_demo+0x3fa>
 80009dc:	7cfb      	ldrb	r3, [r7, #19]
 80009de:	2b6c      	cmp	r3, #108	@ 0x6c
 80009e0:	d11a      	bne.n	8000a18 <run_demo+0x430>
		    		printf("%s\r\n", "Returning to lower limit");
 80009e2:	496c      	ldr	r1, [pc, #432]	@ (8000b94 <run_demo+0x5ac>)
 80009e4:	4857      	ldr	r0, [pc, #348]	@ (8000b44 <run_demo+0x55c>)
 80009e6:	f000 fd6f 	bl	80014c8 <printf>
		            printf("*** enter Lower Limit of the pulse in microseconds [%u..%u] (current %lu) ***\r\n", LOWER_MIN_US, LOWER_MAX_US, (unsigned long)lower_us);
 80009ea:	4b57      	ldr	r3, [pc, #348]	@ (8000b48 <run_demo+0x560>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f242 3228 	movw	r2, #9000	@ 0x2328
 80009f2:	2164      	movs	r1, #100	@ 0x64
 80009f4:	4868      	ldr	r0, [pc, #416]	@ (8000b98 <run_demo+0x5b0>)
 80009f6:	f000 fd67 	bl	80014c8 <printf>
		            ui_state = UI_PROMPT_LOWER;
 80009fa:	4b58      	ldr	r3, [pc, #352]	@ (8000b5c <run_demo+0x574>)
 80009fc:	2202      	movs	r2, #2
 80009fe:	701a      	strb	r2, [r3, #0]
		            printf("%s\r\n", "Entering UI_PROMPT_LOWER");
 8000a00:	4966      	ldr	r1, [pc, #408]	@ (8000b9c <run_demo+0x5b4>)
 8000a02:	4850      	ldr	r0, [pc, #320]	@ (8000b44 <run_demo+0x55c>)
 8000a04:	f000 fd60 	bl	80014c8 <printf>
		            memset(command_buffer, 0, 100);
 8000a08:	2264      	movs	r2, #100	@ 0x64
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4852      	ldr	r0, [pc, #328]	@ (8000b58 <run_demo+0x570>)
 8000a0e:	f000 ffbd 	bl	800198c <memset>
		            input_index = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
		            break;
 8000a16:	e08f      	b.n	8000b38 <run_demo+0x550>
		    	}
		    	else if (one_char == 'P' || one_char == 'p') {
 8000a18:	7cfb      	ldrb	r3, [r7, #19]
 8000a1a:	2b50      	cmp	r3, #80	@ 0x50
 8000a1c:	d002      	beq.n	8000a24 <run_demo+0x43c>
 8000a1e:	7cfb      	ldrb	r3, [r7, #19]
 8000a20:	2b70      	cmp	r3, #112	@ 0x70
 8000a22:	d11a      	bne.n	8000a5a <run_demo+0x472>
		    		printf("%s\r\n", "Returning to pulse setting");
 8000a24:	495e      	ldr	r1, [pc, #376]	@ (8000ba0 <run_demo+0x5b8>)
 8000a26:	4847      	ldr	r0, [pc, #284]	@ (8000b44 <run_demo+0x55c>)
 8000a28:	f000 fd4e 	bl	80014c8 <printf>
		            printf("*** enter number of pulses with the range [%u..%u] (current %lu) ***\r\n", PULSES_MIN, PULSES_MAX, (unsigned long)num_pulses);
 8000a2c:	4b4f      	ldr	r3, [pc, #316]	@ (8000b6c <run_demo+0x584>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000a34:	2164      	movs	r1, #100	@ 0x64
 8000a36:	485b      	ldr	r0, [pc, #364]	@ (8000ba4 <run_demo+0x5bc>)
 8000a38:	f000 fd46 	bl	80014c8 <printf>
		    		ui_state = UI_PROMPT_PULSES;
 8000a3c:	4b47      	ldr	r3, [pc, #284]	@ (8000b5c <run_demo+0x574>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	701a      	strb	r2, [r3, #0]
		    		printf("%s\r\n", "Entering UI_PROMPT_PULSES");
 8000a42:	4959      	ldr	r1, [pc, #356]	@ (8000ba8 <run_demo+0x5c0>)
 8000a44:	483f      	ldr	r0, [pc, #252]	@ (8000b44 <run_demo+0x55c>)
 8000a46:	f000 fd3f 	bl	80014c8 <printf>
		    		memset(command_buffer, 0, 100);
 8000a4a:	2264      	movs	r2, #100	@ 0x64
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4842      	ldr	r0, [pc, #264]	@ (8000b58 <run_demo+0x570>)
 8000a50:	f000 ff9c 	bl	800198c <memset>
		    		input_index = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
		    		break;
 8000a58:	e06e      	b.n	8000b38 <run_demo+0x550>
		    	}
		    	else {
		    		printf("%s\r\n", "INVALID ENTRY");
 8000a5a:	4954      	ldr	r1, [pc, #336]	@ (8000bac <run_demo+0x5c4>)
 8000a5c:	4839      	ldr	r0, [pc, #228]	@ (8000b44 <run_demo+0x55c>)
 8000a5e:	f000 fd33 	bl	80014c8 <printf>
			        printf("%s\r\n", "Press ENTER to confirm, L to return to lower bound, and P to edit pulses.");
 8000a62:	4948      	ldr	r1, [pc, #288]	@ (8000b84 <run_demo+0x59c>)
 8000a64:	4837      	ldr	r0, [pc, #220]	@ (8000b44 <run_demo+0x55c>)
 8000a66:	f000 fd2f 	bl	80014c8 <printf>
			        printf("%s\r\n", "\0");
 8000a6a:	4935      	ldr	r1, [pc, #212]	@ (8000b40 <run_demo+0x558>)
 8000a6c:	4835      	ldr	r0, [pc, #212]	@ (8000b44 <run_demo+0x55c>)
 8000a6e:	f000 fd2b 	bl	80014c8 <printf>
			        memset(command_buffer, 0, 100);
 8000a72:	2264      	movs	r2, #100	@ 0x64
 8000a74:	2100      	movs	r1, #0
 8000a76:	4838      	ldr	r0, [pc, #224]	@ (8000b58 <run_demo+0x570>)
 8000a78:	f000 ff88 	bl	800198c <memset>
			        input_index = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
			        printf("%s\r\n", "Entering UI_WAIT_SELECTION");
 8000a80:	493f      	ldr	r1, [pc, #252]	@ (8000b80 <run_demo+0x598>)
 8000a82:	4830      	ldr	r0, [pc, #192]	@ (8000b44 <run_demo+0x55c>)
 8000a84:	f000 fd20 	bl	80014c8 <printf>
			        ui_state = UI_WAIT_SELECTION;
 8000a88:	4b34      	ldr	r3, [pc, #208]	@ (8000b5c <run_demo+0x574>)
 8000a8a:	2205      	movs	r2, #5
 8000a8c:	701a      	strb	r2, [r3, #0]
			        break;
 8000a8e:	e053      	b.n	8000b38 <run_demo+0x550>
		    	}
		    	break;
		    case UI_WAIT_START:
		    	break;
		    case UI_DONE:
		    	if (measurement_active != 1){
 8000a90:	4b3f      	ldr	r3, [pc, #252]	@ (8000b90 <run_demo+0x5a8>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d14c      	bne.n	8000b32 <run_demo+0x54a>
		    		break;
		    	}
		    	uint32_t ticks = TIM2_GetPeriodTicks();
 8000a98:	f000 fc00 	bl	800129c <TIM2_GetPeriodTicks>
 8000a9c:	60f8      	str	r0, [r7, #12]

		    	if (ticks > 0 && ticks != last_seen_ticks)
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d048      	beq.n	8000b36 <run_demo+0x54e>
 8000aa4:	4b42      	ldr	r3, [pc, #264]	@ (8000bb0 <run_demo+0x5c8>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	68fa      	ldr	r2, [r7, #12]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	d043      	beq.n	8000b36 <run_demo+0x54e>
		    	{
		    		last_seen_ticks = ticks;
 8000aae:	4a40      	ldr	r2, [pc, #256]	@ (8000bb0 <run_demo+0x5c8>)
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	6013      	str	r3, [r2, #0]
		    	    if (ticks >= lower_us && ticks <= upper_us){
 8000ab4:	4b24      	ldr	r3, [pc, #144]	@ (8000b48 <run_demo+0x560>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	68fa      	ldr	r2, [r7, #12]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d31b      	bcc.n	8000af6 <run_demo+0x50e>
 8000abe:	4b24      	ldr	r3, [pc, #144]	@ (8000b50 <run_demo+0x568>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	68fa      	ldr	r2, [r7, #12]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d816      	bhi.n	8000af6 <run_demo+0x50e>
		    	    	freq = 1e6f / ticks;
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	ee07 3a90 	vmov	s15, r3
 8000ace:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ad2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8000bb4 <run_demo+0x5cc>
 8000ad6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ada:	4b37      	ldr	r3, [pc, #220]	@ (8000bb8 <run_demo+0x5d0>)
 8000adc:	edc3 7a00 	vstr	s15, [r3]
		    	        buckets[ticks - lower_us]++;
 8000ae0:	4b19      	ldr	r3, [pc, #100]	@ (8000b48 <run_demo+0x560>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	68fa      	ldr	r2, [r7, #12]
 8000ae6:	1ad3      	subs	r3, r2, r3
 8000ae8:	4a34      	ldr	r2, [pc, #208]	@ (8000bbc <run_demo+0x5d4>)
 8000aea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000aee:	3201      	adds	r2, #1
 8000af0:	4932      	ldr	r1, [pc, #200]	@ (8000bbc <run_demo+0x5d4>)
 8000af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		    	    }
		    		pulses_captured++;
 8000af6:	4b32      	ldr	r3, [pc, #200]	@ (8000bc0 <run_demo+0x5d8>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	3301      	adds	r3, #1
 8000afc:	4a30      	ldr	r2, [pc, #192]	@ (8000bc0 <run_demo+0x5d8>)
 8000afe:	6013      	str	r3, [r2, #0]
					if (pulses_captured >= num_pulses) {
 8000b00:	4b2f      	ldr	r3, [pc, #188]	@ (8000bc0 <run_demo+0x5d8>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	4b19      	ldr	r3, [pc, #100]	@ (8000b6c <run_demo+0x584>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d314      	bcc.n	8000b36 <run_demo+0x54e>
						measurement_active = 0;
 8000b0c:	4b20      	ldr	r3, [pc, #128]	@ (8000b90 <run_demo+0x5a8>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	701a      	strb	r2, [r3, #0]
						//print ordered histogram
						print_histogram();
 8000b12:	f7ff fc8d 	bl	8000430 <print_histogram>
						printf("%s\r\n", "Press ENTER to  run again, L to return to lower bound, and P to edit pulses.");
 8000b16:	492b      	ldr	r1, [pc, #172]	@ (8000bc4 <run_demo+0x5dc>)
 8000b18:	480a      	ldr	r0, [pc, #40]	@ (8000b44 <run_demo+0x55c>)
 8000b1a:	f000 fcd5 	bl	80014c8 <printf>
						ui_state = UI_WAIT_SELECTION;
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b5c <run_demo+0x574>)
 8000b20:	2205      	movs	r2, #5
 8000b22:	701a      	strb	r2, [r3, #0]
					}
		    	}
		    	break;
 8000b24:	e007      	b.n	8000b36 <run_demo+0x54e>
				break;
 8000b26:	bf00      	nop
 8000b28:	e006      	b.n	8000b38 <run_demo+0x550>
		    	break;
 8000b2a:	bf00      	nop
 8000b2c:	e004      	b.n	8000b38 <run_demo+0x550>
		    		break;
 8000b2e:	bf00      	nop
 8000b30:	e002      	b.n	8000b38 <run_demo+0x550>
		    		break;
 8000b32:	bf00      	nop
 8000b34:	e000      	b.n	8000b38 <run_demo+0x550>
		    	break;
 8000b36:	bf00      	nop
//			printf("Period = %lu us, Freq = %.2f Hz\r\n", ticks, freq);
//		}

		// MP-Sept-25: delay for demo only -- this is not required for Project as you will not be outputing anything until after
		// you have histogram is ready to display
		delay_ms(10);
 8000b38:	200a      	movs	r0, #10
 8000b3a:	f7ff fc49 	bl	80003d0 <delay_ms>
	{
 8000b3e:	e561      	b.n	8000604 <run_demo+0x1c>
 8000b40:	080025cc 	.word	0x080025cc
 8000b44:	080025a4 	.word	0x080025a4
 8000b48:	20000004 	.word	0x20000004
 8000b4c:	080028b0 	.word	0x080028b0
 8000b50:	20000008 	.word	0x20000008
 8000b54:	080028d0 	.word	0x080028d0
 8000b58:	2000023c 	.word	0x2000023c
 8000b5c:	20000096 	.word	0x20000096
 8000b60:	080028e8 	.word	0x080028e8
 8000b64:	080028fc 	.word	0x080028fc
 8000b68:	080027ec 	.word	0x080027ec
 8000b6c:	20000000 	.word	0x20000000
 8000b70:	080025fc 	.word	0x080025fc
 8000b74:	08002644 	.word	0x08002644
 8000b78:	08002914 	.word	0x08002914
 8000b7c:	08002940 	.word	0x08002940
 8000b80:	08002968 	.word	0x08002968
 8000b84:	08002984 	.word	0x08002984
 8000b88:	080029d0 	.word	0x080029d0
 8000b8c:	080029e0 	.word	0x080029e0
 8000b90:	20000234 	.word	0x20000234
 8000b94:	080029f4 	.word	0x080029f4
 8000b98:	08002a10 	.word	0x08002a10
 8000b9c:	08002784 	.word	0x08002784
 8000ba0:	08002a60 	.word	0x08002a60
 8000ba4:	08002a7c 	.word	0x08002a7c
 8000ba8:	080026a8 	.word	0x080026a8
 8000bac:	08002ac4 	.word	0x08002ac4
 8000bb0:	20000238 	.word	0x20000238
 8000bb4:	49742400 	.word	0x49742400
 8000bb8:	20000098 	.word	0x20000098
 8000bbc:	2000009c 	.word	0x2000009c
 8000bc0:	20000230 	.word	0x20000230
 8000bc4:	08002ad4 	.word	0x08002ad4

08000bc8 <GPIO_Init>:

/*----------------------------------------------------------------------------*/
/* Configure GPIO                                                             */
/*----------------------------------------------------------------------------*/
void GPIO_Init(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
    // 1. Enable GPIO clocks
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;   // for LED (PA5), UART2 (PA2/PA3), TIM2_CH1 (PA0)
 8000bcc:	4b3e      	ldr	r3, [pc, #248]	@ (8000cc8 <GPIO_Init+0x100>)
 8000bce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd0:	4a3d      	ldr	r2, [pc, #244]	@ (8000cc8 <GPIO_Init+0x100>)
 8000bd2:	f043 0301 	orr.w	r3, r3, #1
 8000bd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;   // for User Button (PC13)
 8000bd8:	4b3b      	ldr	r3, [pc, #236]	@ (8000cc8 <GPIO_Init+0x100>)
 8000bda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bdc:	4a3a      	ldr	r2, [pc, #232]	@ (8000cc8 <GPIO_Init+0x100>)
 8000bde:	f043 0304 	orr.w	r3, r3, #4
 8000be2:	64d3      	str	r3, [r2, #76]	@ 0x4c

    // ----------------------------
    // Configure PA5: User LED
    // ----------------------------
    GPIOA->MODER &= ~(3u << (5*2));        // clear mode bits
 8000be4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000bee:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000bf2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (1u << (5*2));        // 01 = output
 8000bf4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000bfe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c02:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER &= ~(1u << 5);           // 0 = push-pull
 8000c04:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000c0e:	f023 0320 	bic.w	r3, r3, #32
 8000c12:	6053      	str	r3, [r2, #4]
    GPIOA->OSPEEDR |=  (3u << (5*2));      // very high speed
 8000c14:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c18:	689b      	ldr	r3, [r3, #8]
 8000c1a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000c1e:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000c22:	6093      	str	r3, [r2, #8]
    GPIOA->PUPDR &= ~(3u << (5*2));        // no pull
 8000c24:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c28:	68db      	ldr	r3, [r3, #12]
 8000c2a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000c2e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000c32:	60d3      	str	r3, [r2, #12]

    // ----------------------------
    // Configure PC13: User Button
    // ----------------------------
    GPIOC->MODER &= ~(3u << (13*2));       // 00 = input
 8000c34:	4b25      	ldr	r3, [pc, #148]	@ (8000ccc <GPIO_Init+0x104>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a24      	ldr	r2, [pc, #144]	@ (8000ccc <GPIO_Init+0x104>)
 8000c3a:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000c3e:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR &= ~(3u << (13*2));       // no pull (Nucleo board already has ext pull-up)
 8000c40:	4b22      	ldr	r3, [pc, #136]	@ (8000ccc <GPIO_Init+0x104>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	4a21      	ldr	r2, [pc, #132]	@ (8000ccc <GPIO_Init+0x104>)
 8000c46:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000c4a:	60d3      	str	r3, [r2, #12]

    // ----------------------------
    // Configure PA0: TIM2_CH1 input capture
    // ----------------------------
    GPIOA->MODER &= ~(3u << (0*2));
 8000c4c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000c56:	f023 0303 	bic.w	r3, r3, #3
 8000c5a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (2u << (0*2));        					// 10 = alternate function
 8000c5c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000c66:	f043 0302 	orr.w	r3, r3, #2
 8000c6a:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~(0xFu << (0*4));
 8000c6c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c70:	6a1b      	ldr	r3, [r3, #32]
 8000c72:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000c76:	f023 030f 	bic.w	r3, r3, #15
 8000c7a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=  (0x1u << (0*4));     					// AF1 = TIM2_CH1
 8000c7c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c80:	6a1b      	ldr	r3, [r3, #32]
 8000c82:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000c86:	f043 0301 	orr.w	r3, r3, #1
 8000c8a:	6213      	str	r3, [r2, #32]
    GPIOA->OSPEEDR |=  (3u << (0*2));      					// very high speed
 8000c8c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000c96:	f043 0303 	orr.w	r3, r3, #3
 8000c9a:	6093      	str	r3, [r2, #8]
    GPIOA->PUPDR   &= ~(3u << (0*2));
 8000c9c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000ca6:	f023 0303 	bic.w	r3, r3, #3
 8000caa:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (2u << (0*2));      					// pull-down → avoids floating input when no signal
 8000cac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000cb6:	f043 0302 	orr.w	r3, r3, #2
 8000cba:	60d3      	str	r3, [r2, #12]
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	48000800 	.word	0x48000800

08000cd0 <EXTI15_10_IRQHandler>:

//******************************************************************************************
// This function is to handle GPIO Extended Interrupt
//******************************************************************************************
void EXTI15_10_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000cd4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000cd8:	f000 f834 	bl	8000d44 <HAL_GPIO_EXTI_IRQHandler>
}
 8000cdc:	bf00      	nop
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <main>:
#include "timer.h"			// Timer module

	
// Default Entry Point
int main(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
	// initialization Clock, LED, SysTick, USART and GPIO Modules
	clock_init();
 8000ce4:	f7ff fb04 	bl	80002f0 <clock_init>
	GPIO_Init();
 8000ce8:	f7ff ff6e 	bl	8000bc8 <GPIO_Init>
	init_systick();
 8000cec:	f7ff fbd0 	bl	8000490 <init_systick>
	USART2_Init(115200);
 8000cf0:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 8000cf4:	f000 fade 	bl	80012b4 <USART2_Init>
	USART2_WriteString("Complete Clock, GPIO and UART config!\r\n");
 8000cf8:	4805      	ldr	r0, [pc, #20]	@ (8000d10 <main+0x30>)
 8000cfa:	f000 fbcf 	bl	800149c <USART2_WriteString>
	LED_Init();
 8000cfe:	f7ff fab7 	bl	8000270 <LED_Init>
	// Timer Initialization for Project 2
    TIM2_Init();
 8000d02:	f000 fa01 	bl	8001108 <TIM2_Init>

	// Run Demo
	run_demo();
 8000d06:	f7ff fc6f 	bl	80005e8 <run_demo>
 8000d0a:	2300      	movs	r3, #0
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	08002b24 	.word	0x08002b24

08000d14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	691a      	ldr	r2, [r3, #16]
 8000d24:	887b      	ldrh	r3, [r7, #2]
 8000d26:	4013      	ands	r3, r2
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d002      	beq.n	8000d32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	73fb      	strb	r3, [r7, #15]
 8000d30:	e001      	b.n	8000d36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d32:	2300      	movs	r3, #0
 8000d34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d4e:	4b08      	ldr	r3, [pc, #32]	@ (8000d70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d50:	695a      	ldr	r2, [r3, #20]
 8000d52:	88fb      	ldrh	r3, [r7, #6]
 8000d54:	4013      	ands	r3, r2
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d006      	beq.n	8000d68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d5a:	4a05      	ldr	r2, [pc, #20]	@ (8000d70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d5c:	88fb      	ldrh	r3, [r7, #6]
 8000d5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d60:	88fb      	ldrh	r3, [r7, #6]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff fc14 	bl	8000590 <HAL_GPIO_EXTI_Callback>
  }
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40010400 	.word	0x40010400

08000d74 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	e00a      	b.n	8000d9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d86:	f3af 8000 	nop.w
 8000d8a:	4601      	mov	r1, r0
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	1c5a      	adds	r2, r3, #1
 8000d90:	60ba      	str	r2, [r7, #8]
 8000d92:	b2ca      	uxtb	r2, r1
 8000d94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	617b      	str	r3, [r7, #20]
 8000d9c:	697a      	ldr	r2, [r7, #20]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	dbf0      	blt.n	8000d86 <_read+0x12>
	}

return len;
 8000da4:	687b      	ldr	r3, [r7, #4]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3718      	adds	r7, #24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b086      	sub	sp, #24
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	60f8      	str	r0, [r7, #12]
 8000db6:	60b9      	str	r1, [r7, #8]
 8000db8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	e009      	b.n	8000dd4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	1c5a      	adds	r2, r3, #1
 8000dc4:	60ba      	str	r2, [r7, #8]
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	697a      	ldr	r2, [r7, #20]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	dbf1      	blt.n	8000dc0 <_write+0x12>
	}
	return len;
 8000ddc:	687b      	ldr	r3, [r7, #4]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <_close>:

int _close(int file)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b083      	sub	sp, #12
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
	return -1;
 8000dee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	b083      	sub	sp, #12
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
 8000e06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e0e:	605a      	str	r2, [r3, #4]
	return 0;
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <_isatty>:

int _isatty(int file)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	b083      	sub	sp, #12
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
	return 1;
 8000e26:	2301      	movs	r3, #1
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
	return 0;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3714      	adds	r7, #20
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
	...

08000e50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e58:	4a14      	ldr	r2, [pc, #80]	@ (8000eac <_sbrk+0x5c>)
 8000e5a:	4b15      	ldr	r3, [pc, #84]	@ (8000eb0 <_sbrk+0x60>)
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e64:	4b13      	ldr	r3, [pc, #76]	@ (8000eb4 <_sbrk+0x64>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d102      	bne.n	8000e72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e6c:	4b11      	ldr	r3, [pc, #68]	@ (8000eb4 <_sbrk+0x64>)
 8000e6e:	4a12      	ldr	r2, [pc, #72]	@ (8000eb8 <_sbrk+0x68>)
 8000e70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e72:	4b10      	ldr	r3, [pc, #64]	@ (8000eb4 <_sbrk+0x64>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d207      	bcs.n	8000e90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e80:	f000 fdd2 	bl	8001a28 <__errno>
 8000e84:	4603      	mov	r3, r0
 8000e86:	220c      	movs	r2, #12
 8000e88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8e:	e009      	b.n	8000ea4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e90:	4b08      	ldr	r3, [pc, #32]	@ (8000eb4 <_sbrk+0x64>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e96:	4b07      	ldr	r3, [pc, #28]	@ (8000eb4 <_sbrk+0x64>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	4a05      	ldr	r2, [pc, #20]	@ (8000eb4 <_sbrk+0x64>)
 8000ea0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3718      	adds	r7, #24
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20018000 	.word	0x20018000
 8000eb0:	00000400 	.word	0x00000400
 8000eb4:	200002a0 	.word	0x200002a0
 8000eb8:	200004c0 	.word	0x200004c0

08000ebc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ec0:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <SystemInit+0x20>)
 8000ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ec6:	4a05      	ldr	r2, [pc, #20]	@ (8000edc <SystemInit+0x20>)
 8000ec8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ecc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b087      	sub	sp, #28
 8000ee4:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if ((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8000ee6:	4b4f      	ldr	r3, [pc, #316]	@ (8001024 <SystemCoreClockUpdate+0x144>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f003 0308 	and.w	r3, r3, #8
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d107      	bne.n	8000f02 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8000ef2:	4b4c      	ldr	r3, [pc, #304]	@ (8001024 <SystemCoreClockUpdate+0x144>)
 8000ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	f003 030f 	and.w	r3, r3, #15
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	e005      	b.n	8000f0e <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8000f02:	4b48      	ldr	r3, [pc, #288]	@ (8001024 <SystemCoreClockUpdate+0x144>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	091b      	lsrs	r3, r3, #4
 8000f08:	f003 030f 	and.w	r3, r3, #15
 8000f0c:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8000f0e:	4a46      	ldr	r2, [pc, #280]	@ (8001028 <SystemCoreClockUpdate+0x148>)
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f16:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f18:	4b42      	ldr	r3, [pc, #264]	@ (8001024 <SystemCoreClockUpdate+0x144>)
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	f003 030c 	and.w	r3, r3, #12
 8000f20:	2b0c      	cmp	r3, #12
 8000f22:	d866      	bhi.n	8000ff2 <SystemCoreClockUpdate+0x112>
 8000f24:	a201      	add	r2, pc, #4	@ (adr r2, 8000f2c <SystemCoreClockUpdate+0x4c>)
 8000f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f2a:	bf00      	nop
 8000f2c:	08000f61 	.word	0x08000f61
 8000f30:	08000ff3 	.word	0x08000ff3
 8000f34:	08000ff3 	.word	0x08000ff3
 8000f38:	08000ff3 	.word	0x08000ff3
 8000f3c:	08000f69 	.word	0x08000f69
 8000f40:	08000ff3 	.word	0x08000ff3
 8000f44:	08000ff3 	.word	0x08000ff3
 8000f48:	08000ff3 	.word	0x08000ff3
 8000f4c:	08000f71 	.word	0x08000f71
 8000f50:	08000ff3 	.word	0x08000ff3
 8000f54:	08000ff3 	.word	0x08000ff3
 8000f58:	08000ff3 	.word	0x08000ff3
 8000f5c:	08000f79 	.word	0x08000f79
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000f60:	4a32      	ldr	r2, [pc, #200]	@ (800102c <SystemCoreClockUpdate+0x14c>)
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	6013      	str	r3, [r2, #0]
      break;
 8000f66:	e048      	b.n	8000ffa <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000f68:	4b30      	ldr	r3, [pc, #192]	@ (800102c <SystemCoreClockUpdate+0x14c>)
 8000f6a:	4a31      	ldr	r2, [pc, #196]	@ (8001030 <SystemCoreClockUpdate+0x150>)
 8000f6c:	601a      	str	r2, [r3, #0]
      break;
 8000f6e:	e044      	b.n	8000ffa <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000f70:	4b2e      	ldr	r3, [pc, #184]	@ (800102c <SystemCoreClockUpdate+0x14c>)
 8000f72:	4a30      	ldr	r2, [pc, #192]	@ (8001034 <SystemCoreClockUpdate+0x154>)
 8000f74:	601a      	str	r2, [r3, #0]
      break;
 8000f76:	e040      	b.n	8000ffa <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000f78:	4b2a      	ldr	r3, [pc, #168]	@ (8001024 <SystemCoreClockUpdate+0x144>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	f003 0303 	and.w	r3, r3, #3
 8000f80:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000f82:	4b28      	ldr	r3, [pc, #160]	@ (8001024 <SystemCoreClockUpdate+0x144>)
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	091b      	lsrs	r3, r3, #4
 8000f88:	f003 0307 	and.w	r3, r3, #7
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d003      	beq.n	8000f9e <SystemCoreClockUpdate+0xbe>
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	2b03      	cmp	r3, #3
 8000f9a:	d006      	beq.n	8000faa <SystemCoreClockUpdate+0xca>
 8000f9c:	e00b      	b.n	8000fb6 <SystemCoreClockUpdate+0xd6>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8000f9e:	4a24      	ldr	r2, [pc, #144]	@ (8001030 <SystemCoreClockUpdate+0x150>)
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa6:	613b      	str	r3, [r7, #16]
          break;
 8000fa8:	e00b      	b.n	8000fc2 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8000faa:	4a22      	ldr	r2, [pc, #136]	@ (8001034 <SystemCoreClockUpdate+0x154>)
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb2:	613b      	str	r3, [r7, #16]
          break;
 8000fb4:	e005      	b.n	8000fc2 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8000fb6:	697a      	ldr	r2, [r7, #20]
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fbe:	613b      	str	r3, [r7, #16]
          break;
 8000fc0:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8000fc2:	4b18      	ldr	r3, [pc, #96]	@ (8001024 <SystemCoreClockUpdate+0x144>)
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	0a1b      	lsrs	r3, r3, #8
 8000fc8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	fb02 f303 	mul.w	r3, r2, r3
 8000fd2:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000fd4:	4b13      	ldr	r3, [pc, #76]	@ (8001024 <SystemCoreClockUpdate+0x144>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	0e5b      	lsrs	r3, r3, #25
 8000fda:	f003 0303 	and.w	r3, r3, #3
 8000fde:	3301      	adds	r3, #1
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fec:	4a0f      	ldr	r2, [pc, #60]	@ (800102c <SystemCoreClockUpdate+0x14c>)
 8000fee:	6013      	str	r3, [r2, #0]
      break;
 8000ff0:	e003      	b.n	8000ffa <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8000ff2:	4a0e      	ldr	r2, [pc, #56]	@ (800102c <SystemCoreClockUpdate+0x14c>)
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	6013      	str	r3, [r2, #0]
      break;
 8000ff8:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8001024 <SystemCoreClockUpdate+0x144>)
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	091b      	lsrs	r3, r3, #4
 8001000:	f003 030f 	and.w	r3, r3, #15
 8001004:	4a0c      	ldr	r2, [pc, #48]	@ (8001038 <SystemCoreClockUpdate+0x158>)
 8001006:	5cd3      	ldrb	r3, [r2, r3]
 8001008:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800100a:	4b08      	ldr	r3, [pc, #32]	@ (800102c <SystemCoreClockUpdate+0x14c>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	fa22 f303 	lsr.w	r3, r2, r3
 8001014:	4a05      	ldr	r2, [pc, #20]	@ (800102c <SystemCoreClockUpdate+0x14c>)
 8001016:	6013      	str	r3, [r2, #0]
}
 8001018:	bf00      	nop
 800101a:	371c      	adds	r7, #28
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	40021000 	.word	0x40021000
 8001028:	08002b84 	.word	0x08002b84
 800102c:	2000000c 	.word	0x2000000c
 8001030:	00f42400 	.word	0x00f42400
 8001034:	007a1200 	.word	0x007a1200
 8001038:	08002b74 	.word	0x08002b74

0800103c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	2b00      	cmp	r3, #0
 800104c:	db0b      	blt.n	8001066 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	f003 021f 	and.w	r2, r3, #31
 8001054:	4907      	ldr	r1, [pc, #28]	@ (8001074 <__NVIC_EnableIRQ+0x38>)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	095b      	lsrs	r3, r3, #5
 800105c:	2001      	movs	r0, #1
 800105e:	fa00 f202 	lsl.w	r2, r0, r2
 8001062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000e100 	.word	0xe000e100

08001078 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	2b00      	cmp	r3, #0
 8001088:	db0c      	blt.n	80010a4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	f003 021f 	and.w	r2, r3, #31
 8001090:	4907      	ldr	r1, [pc, #28]	@ (80010b0 <__NVIC_ClearPendingIRQ+0x38>)
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	095b      	lsrs	r3, r3, #5
 8001098:	2001      	movs	r0, #1
 800109a:	fa00 f202 	lsl.w	r2, r0, r2
 800109e:	3360      	adds	r3, #96	@ 0x60
 80010a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000e100 	.word	0xe000e100

080010b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	6039      	str	r1, [r7, #0]
 80010be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	db0a      	blt.n	80010de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	490c      	ldr	r1, [pc, #48]	@ (8001100 <__NVIC_SetPriority+0x4c>)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	0112      	lsls	r2, r2, #4
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	440b      	add	r3, r1
 80010d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010dc:	e00a      	b.n	80010f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4908      	ldr	r1, [pc, #32]	@ (8001104 <__NVIC_SetPriority+0x50>)
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	f003 030f 	and.w	r3, r3, #15
 80010ea:	3b04      	subs	r3, #4
 80010ec:	0112      	lsls	r2, r2, #4
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	440b      	add	r3, r1
 80010f2:	761a      	strb	r2, [r3, #24]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	e000e100 	.word	0xe000e100
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <TIM2_Init>:

//******************************************************************************************
// This function is to Initialize Timer 2
//******************************************************************************************
void TIM2_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
	// reset TIM2 before configuration
	RCC->APB1RSTR1 |= RCC_APB1RSTR1_TIM2RST;
 800110e:	4b43      	ldr	r3, [pc, #268]	@ (800121c <TIM2_Init+0x114>)
 8001110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001112:	4a42      	ldr	r2, [pc, #264]	@ (800121c <TIM2_Init+0x114>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	6393      	str	r3, [r2, #56]	@ 0x38
	RCC->APB1RSTR1 &= ~RCC_APB1RSTR1_TIM2RST;
 800111a:	4b40      	ldr	r3, [pc, #256]	@ (800121c <TIM2_Init+0x114>)
 800111c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800111e:	4a3f      	ldr	r2, [pc, #252]	@ (800121c <TIM2_Init+0x114>)
 8001120:	f023 0301 	bic.w	r3, r3, #1
 8001124:	6393      	str	r3, [r2, #56]	@ 0x38

	// 1) Enable TIM2 clock (APB1)
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 8001126:	4b3d      	ldr	r3, [pc, #244]	@ (800121c <TIM2_Init+0x114>)
 8001128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800112a:	4a3c      	ldr	r2, [pc, #240]	@ (800121c <TIM2_Init+0x114>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6593      	str	r3, [r2, #88]	@ 0x58
	// When we write value to PSC register, it stored info in preload register (like shadow register).
	// New setting will take into effect only after an Update event. Since we were setting ARR as 0xFFFFFFFF,
	// we have to wait unit counter resets to see new PSC value applied. This is the reason why i was seeing
	// behavior where my Period/Frequency values were incorrect for 3-5 minutes. Once counter resets and
	// new PSC value takes into effect, i started to see correct period and freq values.
	uint32_t psc = (SystemCoreClock / 1000000UL) - 1UL;
 8001132:	4b3b      	ldr	r3, [pc, #236]	@ (8001220 <TIM2_Init+0x118>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a3b      	ldr	r2, [pc, #236]	@ (8001224 <TIM2_Init+0x11c>)
 8001138:	fba2 2303 	umull	r2, r3, r2, r3
 800113c:	0c9b      	lsrs	r3, r3, #18
 800113e:	3b01      	subs	r3, #1
 8001140:	607b      	str	r3, [r7, #4]
	TIM2->PSC = psc;           // e.g., at 16 MHz, PSC = 15
 8001142:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6293      	str	r3, [r2, #40]	@ 0x28
	TIM2->EGR |= TIM_EGR_UG;  // generate an update event to reload PSC immediately
 800114a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800114e:	695b      	ldr	r3, [r3, #20]
 8001150:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6153      	str	r3, [r2, #20]
	TIM2->ARR = 0xFFFFFFFFUL;  // free-run 32-bit (TIM2 is 32-bit on L4)
 800115a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800115e:	f04f 32ff 	mov.w	r2, #4294967295
 8001162:	62da      	str	r2, [r3, #44]	@ 0x2c

	printf("SystemCoreClock = %lu, TIM2 PSC = %lu\r\n", SystemCoreClock, TIM2->PSC);
 8001164:	4b2e      	ldr	r3, [pc, #184]	@ (8001220 <TIM2_Init+0x118>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800116c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800116e:	4619      	mov	r1, r3
 8001170:	482d      	ldr	r0, [pc, #180]	@ (8001228 <TIM2_Init+0x120>)
 8001172:	f000 f9a9 	bl	80014c8 <printf>

	// 3) Configure CH1 as input, mapped to TI1
	//    CC1S = 01 (input on TI1)
	TIM2->CCMR1 &= ~(TIM_CCMR1_CC1S_Msk);
 8001176:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001180:	f023 0303 	bic.w	r3, r3, #3
 8001184:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |=  (1u << TIM_CCMR1_CC1S_Pos);   	// CC1S=01 = TI1 input
 8001186:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	6193      	str	r3, [r2, #24]

	// Optional digital filter (IC1F). 0 = no filter; choose >0 if you have a noisy signal
	TIM2->CCMR1 &= ~(TIM_CCMR1_IC1F_Msk);
 8001196:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80011a4:	6193      	str	r3, [r2, #24]

	// Select rising edge (CC1P=0, CC1NP=0)
	TIM2->CCER &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80011a6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011aa:	6a1b      	ldr	r3, [r3, #32]
 80011ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011b0:	f023 030a 	bic.w	r3, r3, #10
 80011b4:	6213      	str	r3, [r2, #32]

	// No prescaler on capture (IC1PSC=00) => capture every edge (i.e. rising edge)
	TIM2->CCMR1 &= ~(TIM_CCMR1_IC1PSC_Msk);
 80011b6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011c0:	f023 030c 	bic.w	r3, r3, #12
 80011c4:	6193      	str	r3, [r2, #24]

	// 4) Enable interrupt on capture
	TIM2->DIER |= TIM_DIER_CC1IE;
 80011c6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011d0:	f043 0302 	orr.w	r3, r3, #2
 80011d4:	60d3      	str	r3, [r2, #12]

	// 5) Enable capture and counter
	TIM2->CCER |= TIM_CCER_CC1E;
 80011d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011da:	6a1b      	ldr	r3, [r3, #32]
 80011dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6213      	str	r3, [r2, #32]
	TIM2->CR1  |= TIM_CR1_CEN;
 80011e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6013      	str	r3, [r2, #0]

	// 6) Clear all interrupt flags before starting
	TIM2->SR = 0;
 80011f6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]

	// 7) Enable NVIC Interrupt
	NVIC_ClearPendingIRQ(TIM2_IRQn);
 80011fe:	201c      	movs	r0, #28
 8001200:	f7ff ff3a 	bl	8001078 <__NVIC_ClearPendingIRQ>
	NVIC_SetPriority(TIM2_IRQn, 1);
 8001204:	2101      	movs	r1, #1
 8001206:	201c      	movs	r0, #28
 8001208:	f7ff ff54 	bl	80010b4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn);
 800120c:	201c      	movs	r0, #28
 800120e:	f7ff ff15 	bl	800103c <__NVIC_EnableIRQ>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40021000 	.word	0x40021000
 8001220:	2000000c 	.word	0x2000000c
 8001224:	431bde83 	.word	0x431bde83
 8001228:	08002b4c 	.word	0x08002b4c

0800122c <TIM2_IRQHandler>:

//******************************************************************************************
// This function is to handle Timer2 Interrupt, triggered when rising edge is detected
//******************************************************************************************
void TIM2_IRQHandler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
	// Capture event on CH1 only
	if (TIM2->SR & TIM_SR_CC1IF)
 8001232:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001236:	691b      	ldr	r3, [r3, #16]
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d020      	beq.n	8001282 <TIM2_IRQHandler+0x56>
    {
		// Current captured counter
		uint32_t current_ticks = TIM2->CCR1;
 8001240:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001246:	607b      	str	r3, [r7, #4]

        // MP-Sept-25: Revised and simplified code
        // Let's skip first reading to ensure we have valid signal to work with
        if (!first_capture)
 8001248:	4b11      	ldr	r3, [pc, #68]	@ (8001290 <TIM2_IRQHandler+0x64>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	b2db      	uxtb	r3, r3
 800124e:	f083 0301 	eor.w	r3, r3, #1
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	d006      	beq.n	8001266 <TIM2_IRQHandler+0x3a>
        {
        	// Calculate period using current and last rising edge values
        	// This should handle overflow automatically
        	period_ticks = (current_ticks - last_capture);
 8001258:	4b0e      	ldr	r3, [pc, #56]	@ (8001294 <TIM2_IRQHandler+0x68>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	4a0d      	ldr	r2, [pc, #52]	@ (8001298 <TIM2_IRQHandler+0x6c>)
 8001262:	6013      	str	r3, [r2, #0]
 8001264:	e002      	b.n	800126c <TIM2_IRQHandler+0x40>
        }
        else
        {
        	// Skip very first reading
        	first_capture = false;
 8001266:	4b0a      	ldr	r3, [pc, #40]	@ (8001290 <TIM2_IRQHandler+0x64>)
 8001268:	2200      	movs	r2, #0
 800126a:	701a      	strb	r2, [r3, #0]
        }
        // Save for next edge
        last_capture = current_ticks;
 800126c:	4a09      	ldr	r2, [pc, #36]	@ (8001294 <TIM2_IRQHandler+0x68>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6013      	str	r3, [r2, #0]

    	// Clear flag
    	TIM2->SR &= ~TIM_SR_CC1IF;
 8001272:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001276:	691b      	ldr	r3, [r3, #16]
 8001278:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800127c:	f023 0302 	bic.w	r3, r3, #2
 8001280:	6113      	str	r3, [r2, #16]
    }
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20000010 	.word	0x20000010
 8001294:	200002a4 	.word	0x200002a4
 8001298:	200002a8 	.word	0x200002a8

0800129c <TIM2_GetPeriodTicks>:

//******************************************************************************************
// This function is to get Period of input signal measured
//******************************************************************************************
uint32_t TIM2_GetPeriodTicks(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
	return period_ticks;	// already in µs since PSC is set accordingly
 80012a0:	4b03      	ldr	r3, [pc, #12]	@ (80012b0 <TIM2_GetPeriodTicks+0x14>)
 80012a2:	681b      	ldr	r3, [r3, #0]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	200002a8 	.word	0x200002a8

080012b4 <USART2_Init>:
//	while ( (USART2->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
//	while ( (USART2->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
//}

void USART2_Init(int baudrate)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
    // Enable clocks
    RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;
 80012bc:	4b44      	ldr	r3, [pc, #272]	@ (80013d0 <USART2_Init+0x11c>)
 80012be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012c0:	4a43      	ldr	r2, [pc, #268]	@ (80013d0 <USART2_Init+0x11c>)
 80012c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012c6:	6593      	str	r3, [r2, #88]	@ 0x58
    RCC->AHB2ENR  |= RCC_AHB2ENR_GPIOAEN;
 80012c8:	4b41      	ldr	r3, [pc, #260]	@ (80013d0 <USART2_Init+0x11c>)
 80012ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012cc:	4a40      	ldr	r2, [pc, #256]	@ (80013d0 <USART2_Init+0x11c>)
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	64d3      	str	r3, [r2, #76]	@ 0x4c

    // ----------------------------
    // Configure PA2 (USART2_TX), PA3 (USART2_RX)
    // ----------------------------
    GPIOA->MODER &= ~((3u << (2*2)) | (3u << (3*2)));
 80012d4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80012de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80012e2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  ((2u << (2*2)) | (2u << (3*2)));  		// 10 = alternate function
 80012e4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80012ee:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80012f2:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~((0xFu << (2*4)) | (0xFu << (3*4)));
 80012f4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80012f8:	6a1b      	ldr	r3, [r3, #32]
 80012fa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80012fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001302:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=  ((7u << (2*4)) | (7u << (3*4))); 		// AF7 = USART2
 8001304:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001308:	6a1b      	ldr	r3, [r3, #32]
 800130a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800130e:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8001312:	6213      	str	r3, [r2, #32]
    GPIOA->OTYPER &= ~((1u<<2) | (1u<<3));             		// push-pull
 8001314:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800131e:	f023 030c 	bic.w	r3, r3, #12
 8001322:	6053      	str	r3, [r2, #4]
    GPIOA->OSPEEDR |= ((3u << (2*2)) | (3u << (3*2))); 		// very high speed
 8001324:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800132e:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8001332:	6093      	str	r3, [r2, #8]
    GPIOA->PUPDR &= ~((3u << (2*2)) | (3u << (3*2)));  		// no pull
 8001334:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800133e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001342:	60d3      	str	r3, [r2, #12]

    // Disable USART before config
    USART2->CR1 &= ~USART_CR1_UE;
 8001344:	4b23      	ldr	r3, [pc, #140]	@ (80013d4 <USART2_Init+0x120>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a22      	ldr	r2, [pc, #136]	@ (80013d4 <USART2_Init+0x120>)
 800134a:	f023 0301 	bic.w	r3, r3, #1
 800134e:	6013      	str	r3, [r2, #0]

    // Word length = 8, no parity, oversampling = 16
    USART2->CR1 &= ~(USART_CR1_M | USART_CR1_PCE | USART_CR1_OVER8);
 8001350:	4b20      	ldr	r3, [pc, #128]	@ (80013d4 <USART2_Init+0x120>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a1f      	ldr	r2, [pc, #124]	@ (80013d4 <USART2_Init+0x120>)
 8001356:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800135a:	f423 4314 	bic.w	r3, r3, #37888	@ 0x9400
 800135e:	6013      	str	r3, [r2, #0]

    // Stop bits = 1
    USART2->CR2 &= ~USART_CR2_STOP;
 8001360:	4b1c      	ldr	r3, [pc, #112]	@ (80013d4 <USART2_Init+0x120>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	4a1b      	ldr	r2, [pc, #108]	@ (80013d4 <USART2_Init+0x120>)
 8001366:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800136a:	6053      	str	r3, [r2, #4]

    // No flow control
    USART2->CR3 &= ~(USART_CR3_RTSE | USART_CR3_CTSE);
 800136c:	4b19      	ldr	r3, [pc, #100]	@ (80013d4 <USART2_Init+0x120>)
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	4a18      	ldr	r2, [pc, #96]	@ (80013d4 <USART2_Init+0x120>)
 8001372:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001376:	6093      	str	r3, [r2, #8]

    // MP-Sept-25: Set Baud rate --- Update for 16MHz or 80MHz
    //uint32_t pclk1 = 16000000UL; /// if HSI at 16MHz, APB1 prescaler = 1
    uint32_t pclk1 = 80000000UL;  // if PLL at 80 MHz, APB1 prescaler = 1
 8001378:	4b17      	ldr	r3, [pc, #92]	@ (80013d8 <USART2_Init+0x124>)
 800137a:	60fb      	str	r3, [r7, #12]
    USART2->BRR = (pclk1 + (baudrate/2U)) / baudrate;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	085a      	lsrs	r2, r3, #1
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	441a      	add	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4913      	ldr	r1, [pc, #76]	@ (80013d4 <USART2_Init+0x120>)
 8001388:	fbb2 f3f3 	udiv	r3, r2, r3
 800138c:	60cb      	str	r3, [r1, #12]

    // Enable transmitter and receiver
    USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;
 800138e:	4b11      	ldr	r3, [pc, #68]	@ (80013d4 <USART2_Init+0x120>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a10      	ldr	r2, [pc, #64]	@ (80013d4 <USART2_Init+0x120>)
 8001394:	f043 030c 	orr.w	r3, r3, #12
 8001398:	6013      	str	r3, [r2, #0]

    // Enable USART
    USART2->CR1 |= USART_CR1_UE;
 800139a:	4b0e      	ldr	r3, [pc, #56]	@ (80013d4 <USART2_Init+0x120>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a0d      	ldr	r2, [pc, #52]	@ (80013d4 <USART2_Init+0x120>)
 80013a0:	f043 0301 	orr.w	r3, r3, #1
 80013a4:	6013      	str	r3, [r2, #0]

    while (!(USART2->ISR & USART_ISR_TEACK));
 80013a6:	bf00      	nop
 80013a8:	4b0a      	ldr	r3, [pc, #40]	@ (80013d4 <USART2_Init+0x120>)
 80013aa:	69db      	ldr	r3, [r3, #28]
 80013ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d0f9      	beq.n	80013a8 <USART2_Init+0xf4>
    while (!(USART2->ISR & USART_ISR_REACK));
 80013b4:	bf00      	nop
 80013b6:	4b07      	ldr	r3, [pc, #28]	@ (80013d4 <USART2_Init+0x120>)
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0f9      	beq.n	80013b6 <USART2_Init+0x102>
}
 80013c2:	bf00      	nop
 80013c4:	bf00      	nop
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	40021000 	.word	0x40021000
 80013d4:	40004400 	.word	0x40004400
 80013d8:	04c4b400 	.word	0x04c4b400

080013dc <USART_Read_NB>:
	// Reading USART_DR automatically clears the RXNE flag 
}

//Read from USART - Non-Blocking
uint8_t USART_Read_NB (USART_TypeDef * USARTx)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
    // SR_RXNE (Read data register not empty) bit is set by hardware
    if (!(USARTx->ISR & USART_ISR_RXNE)) {
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69db      	ldr	r3, [r3, #28]
 80013e8:	f003 0320 	and.w	r3, r3, #32
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d101      	bne.n	80013f4 <USART_Read_NB+0x18>
        // USART resets the RXNE flag automatically after reading DR
        return 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	e003      	b.n	80013fc <USART_Read_NB+0x20>
    }
    else {
        return ((uint8_t)(USARTx->RDR & 0xFF));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	b2db      	uxtb	r3, r3
    // Reading USART_DR automatically clears the RXNE flag
    }
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <USART_Write>:

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes)
{
 8001408:	b480      	push	{r7}
 800140a:	b087      	sub	sp, #28
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
	int i;
	// A byte to be transmitted is written to the TDR (transmit data register), and the TXE (transmit empty) bit is cleared.
	// The TDR is copied to an output shift register for serialization when that register is empty, and the TXE bit is set.
	for (i = 0; i < nBytes; i++) {
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]
 8001418:	e010      	b.n	800143c <USART_Write+0x34>
		while (!(USARTx->ISR & USART_ISR_TXE))
 800141a:	bf00      	nop
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	69db      	ldr	r3, [r3, #28]
 8001420:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0f9      	beq.n	800141c <USART_Write+0x14>
			;   							// wait until TXE (TX empty) bit is set
		USARTx->TDR = buffer[i] & 0xFF;		// writing USART_TDR automatically clears the TXE flag
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	68ba      	ldr	r2, [r7, #8]
 800142c:	4413      	add	r3, r2
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	851a      	strh	r2, [r3, #40]	@ 0x28
	for (i = 0; i < nBytes; i++) {
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	3301      	adds	r3, #1
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	429a      	cmp	r2, r3
 8001442:	d8ea      	bhi.n	800141a <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC))
 8001444:	bf00      	nop
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0f9      	beq.n	8001446 <USART_Write+0x3e>
		;  									// wait until TC bit is set
	USARTx->ISR &= ~USART_ISR_TC;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	69db      	ldr	r3, [r3, #28]
 8001456:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	61da      	str	r2, [r3, #28]
}   
 800145e:	bf00      	nop
 8001460:	371c      	adds	r7, #28
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
	...

0800146c <USART2_WriteChar>:

//******************************************************************************************
// USART Write functions for testing
//******************************************************************************************
void USART2_WriteChar(char c)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->ISR & USART_ISR_TXE)); // wait until TX buffer empty - blocking
 8001476:	bf00      	nop
 8001478:	4b07      	ldr	r3, [pc, #28]	@ (8001498 <USART2_WriteChar+0x2c>)
 800147a:	69db      	ldr	r3, [r3, #28]
 800147c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001480:	2b00      	cmp	r3, #0
 8001482:	d0f9      	beq.n	8001478 <USART2_WriteChar+0xc>
    USART2->TDR = c;
 8001484:	4b04      	ldr	r3, [pc, #16]	@ (8001498 <USART2_WriteChar+0x2c>)
 8001486:	79fa      	ldrb	r2, [r7, #7]
 8001488:	b292      	uxth	r2, r2
 800148a:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	40004400 	.word	0x40004400

0800149c <USART2_WriteString>:

void USART2_WriteString(const char *s)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
    while (*s)
 80014a4:	e006      	b.n	80014b4 <USART2_WriteString+0x18>
    {
        USART2_WriteChar(*s++);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	1c5a      	adds	r2, r3, #1
 80014aa:	607a      	str	r2, [r7, #4]
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff ffdc 	bl	800146c <USART2_WriteChar>
    while (*s)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1f4      	bne.n	80014a6 <USART2_WriteString+0xa>
    }
}
 80014bc:	bf00      	nop
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
	...

080014c8 <printf>:
//******************************************************************************************
// For USART Print -- Could be moved to UART module
//******************************************************************************************
static uint8_t buffer[200];

int printf (const char *format, ...) {
 80014c8:	b40f      	push	{r0, r1, r2, r3}
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
    va_list aptr;
    int ret;

    va_start (aptr, format);
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	603b      	str	r3, [r7, #0]
    ret = vsprintf ((char*)buffer, format, aptr);
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	6939      	ldr	r1, [r7, #16]
 80014da:	4809      	ldr	r0, [pc, #36]	@ (8001500 <printf+0x38>)
 80014dc:	f000 f9b8 	bl	8001850 <vsiprintf>
 80014e0:	6078      	str	r0, [r7, #4]
    va_end (aptr);

    USART_Write (USART2, buffer, ret);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	461a      	mov	r2, r3
 80014e6:	4906      	ldr	r1, [pc, #24]	@ (8001500 <printf+0x38>)
 80014e8:	4806      	ldr	r0, [pc, #24]	@ (8001504 <printf+0x3c>)
 80014ea:	f7ff ff8d 	bl	8001408 <USART_Write>

    return ret;
 80014ee:	687b      	ldr	r3, [r7, #4]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80014fa:	b004      	add	sp, #16
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	200002ac 	.word	0x200002ac
 8001504:	40004400 	.word	0x40004400

08001508 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001508:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001540 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800150c:	f7ff fcd6 	bl	8000ebc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001510:	480c      	ldr	r0, [pc, #48]	@ (8001544 <LoopForever+0x6>)
  ldr r1, =_edata
 8001512:	490d      	ldr	r1, [pc, #52]	@ (8001548 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001514:	4a0d      	ldr	r2, [pc, #52]	@ (800154c <LoopForever+0xe>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001518:	e002      	b.n	8001520 <LoopCopyDataInit>

0800151a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800151a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800151c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800151e:	3304      	adds	r3, #4

08001520 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001520:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001522:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001524:	d3f9      	bcc.n	800151a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001526:	4a0a      	ldr	r2, [pc, #40]	@ (8001550 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001528:	4c0a      	ldr	r4, [pc, #40]	@ (8001554 <LoopForever+0x16>)
  movs r3, #0
 800152a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800152c:	e001      	b.n	8001532 <LoopFillZerobss>

0800152e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800152e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001530:	3204      	adds	r2, #4

08001532 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001532:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001534:	d3fb      	bcc.n	800152e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001536:	f000 fa7d 	bl	8001a34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800153a:	f7ff fbd1 	bl	8000ce0 <main>

0800153e <LoopForever>:

LoopForever:
    b LoopForever
 800153e:	e7fe      	b.n	800153e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001540:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001544:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001548:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800154c:	08002cf8 	.word	0x08002cf8
  ldr r2, =_sbss
 8001550:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001554:	200004c0 	.word	0x200004c0

08001558 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001558:	e7fe      	b.n	8001558 <ADC1_2_IRQHandler>
	...

0800155c <std>:
 800155c:	2300      	movs	r3, #0
 800155e:	b510      	push	{r4, lr}
 8001560:	4604      	mov	r4, r0
 8001562:	e9c0 3300 	strd	r3, r3, [r0]
 8001566:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800156a:	6083      	str	r3, [r0, #8]
 800156c:	8181      	strh	r1, [r0, #12]
 800156e:	6643      	str	r3, [r0, #100]	@ 0x64
 8001570:	81c2      	strh	r2, [r0, #14]
 8001572:	6183      	str	r3, [r0, #24]
 8001574:	4619      	mov	r1, r3
 8001576:	2208      	movs	r2, #8
 8001578:	305c      	adds	r0, #92	@ 0x5c
 800157a:	f000 fa07 	bl	800198c <memset>
 800157e:	4b0d      	ldr	r3, [pc, #52]	@ (80015b4 <std+0x58>)
 8001580:	6263      	str	r3, [r4, #36]	@ 0x24
 8001582:	4b0d      	ldr	r3, [pc, #52]	@ (80015b8 <std+0x5c>)
 8001584:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001586:	4b0d      	ldr	r3, [pc, #52]	@ (80015bc <std+0x60>)
 8001588:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800158a:	4b0d      	ldr	r3, [pc, #52]	@ (80015c0 <std+0x64>)
 800158c:	6323      	str	r3, [r4, #48]	@ 0x30
 800158e:	4b0d      	ldr	r3, [pc, #52]	@ (80015c4 <std+0x68>)
 8001590:	6224      	str	r4, [r4, #32]
 8001592:	429c      	cmp	r4, r3
 8001594:	d006      	beq.n	80015a4 <std+0x48>
 8001596:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800159a:	4294      	cmp	r4, r2
 800159c:	d002      	beq.n	80015a4 <std+0x48>
 800159e:	33d0      	adds	r3, #208	@ 0xd0
 80015a0:	429c      	cmp	r4, r3
 80015a2:	d105      	bne.n	80015b0 <std+0x54>
 80015a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80015a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80015ac:	f000 ba66 	b.w	8001a7c <__retarget_lock_init_recursive>
 80015b0:	bd10      	pop	{r4, pc}
 80015b2:	bf00      	nop
 80015b4:	0800179d 	.word	0x0800179d
 80015b8:	080017bf 	.word	0x080017bf
 80015bc:	080017f7 	.word	0x080017f7
 80015c0:	0800181b 	.word	0x0800181b
 80015c4:	20000374 	.word	0x20000374

080015c8 <stdio_exit_handler>:
 80015c8:	4a02      	ldr	r2, [pc, #8]	@ (80015d4 <stdio_exit_handler+0xc>)
 80015ca:	4903      	ldr	r1, [pc, #12]	@ (80015d8 <stdio_exit_handler+0x10>)
 80015cc:	4803      	ldr	r0, [pc, #12]	@ (80015dc <stdio_exit_handler+0x14>)
 80015ce:	f000 b869 	b.w	80016a4 <_fwalk_sglue>
 80015d2:	bf00      	nop
 80015d4:	20000014 	.word	0x20000014
 80015d8:	08002345 	.word	0x08002345
 80015dc:	20000024 	.word	0x20000024

080015e0 <cleanup_stdio>:
 80015e0:	6841      	ldr	r1, [r0, #4]
 80015e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001614 <cleanup_stdio+0x34>)
 80015e4:	4299      	cmp	r1, r3
 80015e6:	b510      	push	{r4, lr}
 80015e8:	4604      	mov	r4, r0
 80015ea:	d001      	beq.n	80015f0 <cleanup_stdio+0x10>
 80015ec:	f000 feaa 	bl	8002344 <_fflush_r>
 80015f0:	68a1      	ldr	r1, [r4, #8]
 80015f2:	4b09      	ldr	r3, [pc, #36]	@ (8001618 <cleanup_stdio+0x38>)
 80015f4:	4299      	cmp	r1, r3
 80015f6:	d002      	beq.n	80015fe <cleanup_stdio+0x1e>
 80015f8:	4620      	mov	r0, r4
 80015fa:	f000 fea3 	bl	8002344 <_fflush_r>
 80015fe:	68e1      	ldr	r1, [r4, #12]
 8001600:	4b06      	ldr	r3, [pc, #24]	@ (800161c <cleanup_stdio+0x3c>)
 8001602:	4299      	cmp	r1, r3
 8001604:	d004      	beq.n	8001610 <cleanup_stdio+0x30>
 8001606:	4620      	mov	r0, r4
 8001608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800160c:	f000 be9a 	b.w	8002344 <_fflush_r>
 8001610:	bd10      	pop	{r4, pc}
 8001612:	bf00      	nop
 8001614:	20000374 	.word	0x20000374
 8001618:	200003dc 	.word	0x200003dc
 800161c:	20000444 	.word	0x20000444

08001620 <global_stdio_init.part.0>:
 8001620:	b510      	push	{r4, lr}
 8001622:	4b0b      	ldr	r3, [pc, #44]	@ (8001650 <global_stdio_init.part.0+0x30>)
 8001624:	4c0b      	ldr	r4, [pc, #44]	@ (8001654 <global_stdio_init.part.0+0x34>)
 8001626:	4a0c      	ldr	r2, [pc, #48]	@ (8001658 <global_stdio_init.part.0+0x38>)
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	4620      	mov	r0, r4
 800162c:	2200      	movs	r2, #0
 800162e:	2104      	movs	r1, #4
 8001630:	f7ff ff94 	bl	800155c <std>
 8001634:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001638:	2201      	movs	r2, #1
 800163a:	2109      	movs	r1, #9
 800163c:	f7ff ff8e 	bl	800155c <std>
 8001640:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001644:	2202      	movs	r2, #2
 8001646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800164a:	2112      	movs	r1, #18
 800164c:	f7ff bf86 	b.w	800155c <std>
 8001650:	200004ac 	.word	0x200004ac
 8001654:	20000374 	.word	0x20000374
 8001658:	080015c9 	.word	0x080015c9

0800165c <__sfp_lock_acquire>:
 800165c:	4801      	ldr	r0, [pc, #4]	@ (8001664 <__sfp_lock_acquire+0x8>)
 800165e:	f000 ba0e 	b.w	8001a7e <__retarget_lock_acquire_recursive>
 8001662:	bf00      	nop
 8001664:	200004b5 	.word	0x200004b5

08001668 <__sfp_lock_release>:
 8001668:	4801      	ldr	r0, [pc, #4]	@ (8001670 <__sfp_lock_release+0x8>)
 800166a:	f000 ba09 	b.w	8001a80 <__retarget_lock_release_recursive>
 800166e:	bf00      	nop
 8001670:	200004b5 	.word	0x200004b5

08001674 <__sinit>:
 8001674:	b510      	push	{r4, lr}
 8001676:	4604      	mov	r4, r0
 8001678:	f7ff fff0 	bl	800165c <__sfp_lock_acquire>
 800167c:	6a23      	ldr	r3, [r4, #32]
 800167e:	b11b      	cbz	r3, 8001688 <__sinit+0x14>
 8001680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001684:	f7ff bff0 	b.w	8001668 <__sfp_lock_release>
 8001688:	4b04      	ldr	r3, [pc, #16]	@ (800169c <__sinit+0x28>)
 800168a:	6223      	str	r3, [r4, #32]
 800168c:	4b04      	ldr	r3, [pc, #16]	@ (80016a0 <__sinit+0x2c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1f5      	bne.n	8001680 <__sinit+0xc>
 8001694:	f7ff ffc4 	bl	8001620 <global_stdio_init.part.0>
 8001698:	e7f2      	b.n	8001680 <__sinit+0xc>
 800169a:	bf00      	nop
 800169c:	080015e1 	.word	0x080015e1
 80016a0:	200004ac 	.word	0x200004ac

080016a4 <_fwalk_sglue>:
 80016a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80016a8:	4607      	mov	r7, r0
 80016aa:	4688      	mov	r8, r1
 80016ac:	4614      	mov	r4, r2
 80016ae:	2600      	movs	r6, #0
 80016b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80016b4:	f1b9 0901 	subs.w	r9, r9, #1
 80016b8:	d505      	bpl.n	80016c6 <_fwalk_sglue+0x22>
 80016ba:	6824      	ldr	r4, [r4, #0]
 80016bc:	2c00      	cmp	r4, #0
 80016be:	d1f7      	bne.n	80016b0 <_fwalk_sglue+0xc>
 80016c0:	4630      	mov	r0, r6
 80016c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80016c6:	89ab      	ldrh	r3, [r5, #12]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d907      	bls.n	80016dc <_fwalk_sglue+0x38>
 80016cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80016d0:	3301      	adds	r3, #1
 80016d2:	d003      	beq.n	80016dc <_fwalk_sglue+0x38>
 80016d4:	4629      	mov	r1, r5
 80016d6:	4638      	mov	r0, r7
 80016d8:	47c0      	blx	r8
 80016da:	4306      	orrs	r6, r0
 80016dc:	3568      	adds	r5, #104	@ 0x68
 80016de:	e7e9      	b.n	80016b4 <_fwalk_sglue+0x10>

080016e0 <_puts_r>:
 80016e0:	6a03      	ldr	r3, [r0, #32]
 80016e2:	b570      	push	{r4, r5, r6, lr}
 80016e4:	6884      	ldr	r4, [r0, #8]
 80016e6:	4605      	mov	r5, r0
 80016e8:	460e      	mov	r6, r1
 80016ea:	b90b      	cbnz	r3, 80016f0 <_puts_r+0x10>
 80016ec:	f7ff ffc2 	bl	8001674 <__sinit>
 80016f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80016f2:	07db      	lsls	r3, r3, #31
 80016f4:	d405      	bmi.n	8001702 <_puts_r+0x22>
 80016f6:	89a3      	ldrh	r3, [r4, #12]
 80016f8:	0598      	lsls	r0, r3, #22
 80016fa:	d402      	bmi.n	8001702 <_puts_r+0x22>
 80016fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80016fe:	f000 f9be 	bl	8001a7e <__retarget_lock_acquire_recursive>
 8001702:	89a3      	ldrh	r3, [r4, #12]
 8001704:	0719      	lsls	r1, r3, #28
 8001706:	d502      	bpl.n	800170e <_puts_r+0x2e>
 8001708:	6923      	ldr	r3, [r4, #16]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d135      	bne.n	800177a <_puts_r+0x9a>
 800170e:	4621      	mov	r1, r4
 8001710:	4628      	mov	r0, r5
 8001712:	f000 f8e5 	bl	80018e0 <__swsetup_r>
 8001716:	b380      	cbz	r0, 800177a <_puts_r+0x9a>
 8001718:	f04f 35ff 	mov.w	r5, #4294967295
 800171c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800171e:	07da      	lsls	r2, r3, #31
 8001720:	d405      	bmi.n	800172e <_puts_r+0x4e>
 8001722:	89a3      	ldrh	r3, [r4, #12]
 8001724:	059b      	lsls	r3, r3, #22
 8001726:	d402      	bmi.n	800172e <_puts_r+0x4e>
 8001728:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800172a:	f000 f9a9 	bl	8001a80 <__retarget_lock_release_recursive>
 800172e:	4628      	mov	r0, r5
 8001730:	bd70      	pop	{r4, r5, r6, pc}
 8001732:	2b00      	cmp	r3, #0
 8001734:	da04      	bge.n	8001740 <_puts_r+0x60>
 8001736:	69a2      	ldr	r2, [r4, #24]
 8001738:	429a      	cmp	r2, r3
 800173a:	dc17      	bgt.n	800176c <_puts_r+0x8c>
 800173c:	290a      	cmp	r1, #10
 800173e:	d015      	beq.n	800176c <_puts_r+0x8c>
 8001740:	6823      	ldr	r3, [r4, #0]
 8001742:	1c5a      	adds	r2, r3, #1
 8001744:	6022      	str	r2, [r4, #0]
 8001746:	7019      	strb	r1, [r3, #0]
 8001748:	68a3      	ldr	r3, [r4, #8]
 800174a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800174e:	3b01      	subs	r3, #1
 8001750:	60a3      	str	r3, [r4, #8]
 8001752:	2900      	cmp	r1, #0
 8001754:	d1ed      	bne.n	8001732 <_puts_r+0x52>
 8001756:	2b00      	cmp	r3, #0
 8001758:	da11      	bge.n	800177e <_puts_r+0x9e>
 800175a:	4622      	mov	r2, r4
 800175c:	210a      	movs	r1, #10
 800175e:	4628      	mov	r0, r5
 8001760:	f000 f880 	bl	8001864 <__swbuf_r>
 8001764:	3001      	adds	r0, #1
 8001766:	d0d7      	beq.n	8001718 <_puts_r+0x38>
 8001768:	250a      	movs	r5, #10
 800176a:	e7d7      	b.n	800171c <_puts_r+0x3c>
 800176c:	4622      	mov	r2, r4
 800176e:	4628      	mov	r0, r5
 8001770:	f000 f878 	bl	8001864 <__swbuf_r>
 8001774:	3001      	adds	r0, #1
 8001776:	d1e7      	bne.n	8001748 <_puts_r+0x68>
 8001778:	e7ce      	b.n	8001718 <_puts_r+0x38>
 800177a:	3e01      	subs	r6, #1
 800177c:	e7e4      	b.n	8001748 <_puts_r+0x68>
 800177e:	6823      	ldr	r3, [r4, #0]
 8001780:	1c5a      	adds	r2, r3, #1
 8001782:	6022      	str	r2, [r4, #0]
 8001784:	220a      	movs	r2, #10
 8001786:	701a      	strb	r2, [r3, #0]
 8001788:	e7ee      	b.n	8001768 <_puts_r+0x88>
	...

0800178c <puts>:
 800178c:	4b02      	ldr	r3, [pc, #8]	@ (8001798 <puts+0xc>)
 800178e:	4601      	mov	r1, r0
 8001790:	6818      	ldr	r0, [r3, #0]
 8001792:	f7ff bfa5 	b.w	80016e0 <_puts_r>
 8001796:	bf00      	nop
 8001798:	20000020 	.word	0x20000020

0800179c <__sread>:
 800179c:	b510      	push	{r4, lr}
 800179e:	460c      	mov	r4, r1
 80017a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017a4:	f000 f91c 	bl	80019e0 <_read_r>
 80017a8:	2800      	cmp	r0, #0
 80017aa:	bfab      	itete	ge
 80017ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80017ae:	89a3      	ldrhlt	r3, [r4, #12]
 80017b0:	181b      	addge	r3, r3, r0
 80017b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80017b6:	bfac      	ite	ge
 80017b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80017ba:	81a3      	strhlt	r3, [r4, #12]
 80017bc:	bd10      	pop	{r4, pc}

080017be <__swrite>:
 80017be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017c2:	461f      	mov	r7, r3
 80017c4:	898b      	ldrh	r3, [r1, #12]
 80017c6:	05db      	lsls	r3, r3, #23
 80017c8:	4605      	mov	r5, r0
 80017ca:	460c      	mov	r4, r1
 80017cc:	4616      	mov	r6, r2
 80017ce:	d505      	bpl.n	80017dc <__swrite+0x1e>
 80017d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017d4:	2302      	movs	r3, #2
 80017d6:	2200      	movs	r2, #0
 80017d8:	f000 f8f0 	bl	80019bc <_lseek_r>
 80017dc:	89a3      	ldrh	r3, [r4, #12]
 80017de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80017e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80017e6:	81a3      	strh	r3, [r4, #12]
 80017e8:	4632      	mov	r2, r6
 80017ea:	463b      	mov	r3, r7
 80017ec:	4628      	mov	r0, r5
 80017ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80017f2:	f000 b907 	b.w	8001a04 <_write_r>

080017f6 <__sseek>:
 80017f6:	b510      	push	{r4, lr}
 80017f8:	460c      	mov	r4, r1
 80017fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017fe:	f000 f8dd 	bl	80019bc <_lseek_r>
 8001802:	1c43      	adds	r3, r0, #1
 8001804:	89a3      	ldrh	r3, [r4, #12]
 8001806:	bf15      	itete	ne
 8001808:	6560      	strne	r0, [r4, #84]	@ 0x54
 800180a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800180e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001812:	81a3      	strheq	r3, [r4, #12]
 8001814:	bf18      	it	ne
 8001816:	81a3      	strhne	r3, [r4, #12]
 8001818:	bd10      	pop	{r4, pc}

0800181a <__sclose>:
 800181a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800181e:	f000 b8bd 	b.w	800199c <_close_r>
	...

08001824 <_vsiprintf_r>:
 8001824:	b510      	push	{r4, lr}
 8001826:	b09a      	sub	sp, #104	@ 0x68
 8001828:	2400      	movs	r4, #0
 800182a:	9100      	str	r1, [sp, #0]
 800182c:	9104      	str	r1, [sp, #16]
 800182e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001832:	9105      	str	r1, [sp, #20]
 8001834:	9102      	str	r1, [sp, #8]
 8001836:	4905      	ldr	r1, [pc, #20]	@ (800184c <_vsiprintf_r+0x28>)
 8001838:	9103      	str	r1, [sp, #12]
 800183a:	4669      	mov	r1, sp
 800183c:	9419      	str	r4, [sp, #100]	@ 0x64
 800183e:	f000 fa75 	bl	8001d2c <_svfiprintf_r>
 8001842:	9b00      	ldr	r3, [sp, #0]
 8001844:	701c      	strb	r4, [r3, #0]
 8001846:	b01a      	add	sp, #104	@ 0x68
 8001848:	bd10      	pop	{r4, pc}
 800184a:	bf00      	nop
 800184c:	ffff0208 	.word	0xffff0208

08001850 <vsiprintf>:
 8001850:	4613      	mov	r3, r2
 8001852:	460a      	mov	r2, r1
 8001854:	4601      	mov	r1, r0
 8001856:	4802      	ldr	r0, [pc, #8]	@ (8001860 <vsiprintf+0x10>)
 8001858:	6800      	ldr	r0, [r0, #0]
 800185a:	f7ff bfe3 	b.w	8001824 <_vsiprintf_r>
 800185e:	bf00      	nop
 8001860:	20000020 	.word	0x20000020

08001864 <__swbuf_r>:
 8001864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001866:	460e      	mov	r6, r1
 8001868:	4614      	mov	r4, r2
 800186a:	4605      	mov	r5, r0
 800186c:	b118      	cbz	r0, 8001876 <__swbuf_r+0x12>
 800186e:	6a03      	ldr	r3, [r0, #32]
 8001870:	b90b      	cbnz	r3, 8001876 <__swbuf_r+0x12>
 8001872:	f7ff feff 	bl	8001674 <__sinit>
 8001876:	69a3      	ldr	r3, [r4, #24]
 8001878:	60a3      	str	r3, [r4, #8]
 800187a:	89a3      	ldrh	r3, [r4, #12]
 800187c:	071a      	lsls	r2, r3, #28
 800187e:	d501      	bpl.n	8001884 <__swbuf_r+0x20>
 8001880:	6923      	ldr	r3, [r4, #16]
 8001882:	b943      	cbnz	r3, 8001896 <__swbuf_r+0x32>
 8001884:	4621      	mov	r1, r4
 8001886:	4628      	mov	r0, r5
 8001888:	f000 f82a 	bl	80018e0 <__swsetup_r>
 800188c:	b118      	cbz	r0, 8001896 <__swbuf_r+0x32>
 800188e:	f04f 37ff 	mov.w	r7, #4294967295
 8001892:	4638      	mov	r0, r7
 8001894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001896:	6823      	ldr	r3, [r4, #0]
 8001898:	6922      	ldr	r2, [r4, #16]
 800189a:	1a98      	subs	r0, r3, r2
 800189c:	6963      	ldr	r3, [r4, #20]
 800189e:	b2f6      	uxtb	r6, r6
 80018a0:	4283      	cmp	r3, r0
 80018a2:	4637      	mov	r7, r6
 80018a4:	dc05      	bgt.n	80018b2 <__swbuf_r+0x4e>
 80018a6:	4621      	mov	r1, r4
 80018a8:	4628      	mov	r0, r5
 80018aa:	f000 fd4b 	bl	8002344 <_fflush_r>
 80018ae:	2800      	cmp	r0, #0
 80018b0:	d1ed      	bne.n	800188e <__swbuf_r+0x2a>
 80018b2:	68a3      	ldr	r3, [r4, #8]
 80018b4:	3b01      	subs	r3, #1
 80018b6:	60a3      	str	r3, [r4, #8]
 80018b8:	6823      	ldr	r3, [r4, #0]
 80018ba:	1c5a      	adds	r2, r3, #1
 80018bc:	6022      	str	r2, [r4, #0]
 80018be:	701e      	strb	r6, [r3, #0]
 80018c0:	6962      	ldr	r2, [r4, #20]
 80018c2:	1c43      	adds	r3, r0, #1
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d004      	beq.n	80018d2 <__swbuf_r+0x6e>
 80018c8:	89a3      	ldrh	r3, [r4, #12]
 80018ca:	07db      	lsls	r3, r3, #31
 80018cc:	d5e1      	bpl.n	8001892 <__swbuf_r+0x2e>
 80018ce:	2e0a      	cmp	r6, #10
 80018d0:	d1df      	bne.n	8001892 <__swbuf_r+0x2e>
 80018d2:	4621      	mov	r1, r4
 80018d4:	4628      	mov	r0, r5
 80018d6:	f000 fd35 	bl	8002344 <_fflush_r>
 80018da:	2800      	cmp	r0, #0
 80018dc:	d0d9      	beq.n	8001892 <__swbuf_r+0x2e>
 80018de:	e7d6      	b.n	800188e <__swbuf_r+0x2a>

080018e0 <__swsetup_r>:
 80018e0:	b538      	push	{r3, r4, r5, lr}
 80018e2:	4b29      	ldr	r3, [pc, #164]	@ (8001988 <__swsetup_r+0xa8>)
 80018e4:	4605      	mov	r5, r0
 80018e6:	6818      	ldr	r0, [r3, #0]
 80018e8:	460c      	mov	r4, r1
 80018ea:	b118      	cbz	r0, 80018f4 <__swsetup_r+0x14>
 80018ec:	6a03      	ldr	r3, [r0, #32]
 80018ee:	b90b      	cbnz	r3, 80018f4 <__swsetup_r+0x14>
 80018f0:	f7ff fec0 	bl	8001674 <__sinit>
 80018f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018f8:	0719      	lsls	r1, r3, #28
 80018fa:	d422      	bmi.n	8001942 <__swsetup_r+0x62>
 80018fc:	06da      	lsls	r2, r3, #27
 80018fe:	d407      	bmi.n	8001910 <__swsetup_r+0x30>
 8001900:	2209      	movs	r2, #9
 8001902:	602a      	str	r2, [r5, #0]
 8001904:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001908:	81a3      	strh	r3, [r4, #12]
 800190a:	f04f 30ff 	mov.w	r0, #4294967295
 800190e:	e033      	b.n	8001978 <__swsetup_r+0x98>
 8001910:	0758      	lsls	r0, r3, #29
 8001912:	d512      	bpl.n	800193a <__swsetup_r+0x5a>
 8001914:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001916:	b141      	cbz	r1, 800192a <__swsetup_r+0x4a>
 8001918:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800191c:	4299      	cmp	r1, r3
 800191e:	d002      	beq.n	8001926 <__swsetup_r+0x46>
 8001920:	4628      	mov	r0, r5
 8001922:	f000 f8af 	bl	8001a84 <_free_r>
 8001926:	2300      	movs	r3, #0
 8001928:	6363      	str	r3, [r4, #52]	@ 0x34
 800192a:	89a3      	ldrh	r3, [r4, #12]
 800192c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001930:	81a3      	strh	r3, [r4, #12]
 8001932:	2300      	movs	r3, #0
 8001934:	6063      	str	r3, [r4, #4]
 8001936:	6923      	ldr	r3, [r4, #16]
 8001938:	6023      	str	r3, [r4, #0]
 800193a:	89a3      	ldrh	r3, [r4, #12]
 800193c:	f043 0308 	orr.w	r3, r3, #8
 8001940:	81a3      	strh	r3, [r4, #12]
 8001942:	6923      	ldr	r3, [r4, #16]
 8001944:	b94b      	cbnz	r3, 800195a <__swsetup_r+0x7a>
 8001946:	89a3      	ldrh	r3, [r4, #12]
 8001948:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800194c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001950:	d003      	beq.n	800195a <__swsetup_r+0x7a>
 8001952:	4621      	mov	r1, r4
 8001954:	4628      	mov	r0, r5
 8001956:	f000 fd43 	bl	80023e0 <__smakebuf_r>
 800195a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800195e:	f013 0201 	ands.w	r2, r3, #1
 8001962:	d00a      	beq.n	800197a <__swsetup_r+0x9a>
 8001964:	2200      	movs	r2, #0
 8001966:	60a2      	str	r2, [r4, #8]
 8001968:	6962      	ldr	r2, [r4, #20]
 800196a:	4252      	negs	r2, r2
 800196c:	61a2      	str	r2, [r4, #24]
 800196e:	6922      	ldr	r2, [r4, #16]
 8001970:	b942      	cbnz	r2, 8001984 <__swsetup_r+0xa4>
 8001972:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001976:	d1c5      	bne.n	8001904 <__swsetup_r+0x24>
 8001978:	bd38      	pop	{r3, r4, r5, pc}
 800197a:	0799      	lsls	r1, r3, #30
 800197c:	bf58      	it	pl
 800197e:	6962      	ldrpl	r2, [r4, #20]
 8001980:	60a2      	str	r2, [r4, #8]
 8001982:	e7f4      	b.n	800196e <__swsetup_r+0x8e>
 8001984:	2000      	movs	r0, #0
 8001986:	e7f7      	b.n	8001978 <__swsetup_r+0x98>
 8001988:	20000020 	.word	0x20000020

0800198c <memset>:
 800198c:	4402      	add	r2, r0
 800198e:	4603      	mov	r3, r0
 8001990:	4293      	cmp	r3, r2
 8001992:	d100      	bne.n	8001996 <memset+0xa>
 8001994:	4770      	bx	lr
 8001996:	f803 1b01 	strb.w	r1, [r3], #1
 800199a:	e7f9      	b.n	8001990 <memset+0x4>

0800199c <_close_r>:
 800199c:	b538      	push	{r3, r4, r5, lr}
 800199e:	4d06      	ldr	r5, [pc, #24]	@ (80019b8 <_close_r+0x1c>)
 80019a0:	2300      	movs	r3, #0
 80019a2:	4604      	mov	r4, r0
 80019a4:	4608      	mov	r0, r1
 80019a6:	602b      	str	r3, [r5, #0]
 80019a8:	f7ff fa1d 	bl	8000de6 <_close>
 80019ac:	1c43      	adds	r3, r0, #1
 80019ae:	d102      	bne.n	80019b6 <_close_r+0x1a>
 80019b0:	682b      	ldr	r3, [r5, #0]
 80019b2:	b103      	cbz	r3, 80019b6 <_close_r+0x1a>
 80019b4:	6023      	str	r3, [r4, #0]
 80019b6:	bd38      	pop	{r3, r4, r5, pc}
 80019b8:	200004b0 	.word	0x200004b0

080019bc <_lseek_r>:
 80019bc:	b538      	push	{r3, r4, r5, lr}
 80019be:	4d07      	ldr	r5, [pc, #28]	@ (80019dc <_lseek_r+0x20>)
 80019c0:	4604      	mov	r4, r0
 80019c2:	4608      	mov	r0, r1
 80019c4:	4611      	mov	r1, r2
 80019c6:	2200      	movs	r2, #0
 80019c8:	602a      	str	r2, [r5, #0]
 80019ca:	461a      	mov	r2, r3
 80019cc:	f7ff fa32 	bl	8000e34 <_lseek>
 80019d0:	1c43      	adds	r3, r0, #1
 80019d2:	d102      	bne.n	80019da <_lseek_r+0x1e>
 80019d4:	682b      	ldr	r3, [r5, #0]
 80019d6:	b103      	cbz	r3, 80019da <_lseek_r+0x1e>
 80019d8:	6023      	str	r3, [r4, #0]
 80019da:	bd38      	pop	{r3, r4, r5, pc}
 80019dc:	200004b0 	.word	0x200004b0

080019e0 <_read_r>:
 80019e0:	b538      	push	{r3, r4, r5, lr}
 80019e2:	4d07      	ldr	r5, [pc, #28]	@ (8001a00 <_read_r+0x20>)
 80019e4:	4604      	mov	r4, r0
 80019e6:	4608      	mov	r0, r1
 80019e8:	4611      	mov	r1, r2
 80019ea:	2200      	movs	r2, #0
 80019ec:	602a      	str	r2, [r5, #0]
 80019ee:	461a      	mov	r2, r3
 80019f0:	f7ff f9c0 	bl	8000d74 <_read>
 80019f4:	1c43      	adds	r3, r0, #1
 80019f6:	d102      	bne.n	80019fe <_read_r+0x1e>
 80019f8:	682b      	ldr	r3, [r5, #0]
 80019fa:	b103      	cbz	r3, 80019fe <_read_r+0x1e>
 80019fc:	6023      	str	r3, [r4, #0]
 80019fe:	bd38      	pop	{r3, r4, r5, pc}
 8001a00:	200004b0 	.word	0x200004b0

08001a04 <_write_r>:
 8001a04:	b538      	push	{r3, r4, r5, lr}
 8001a06:	4d07      	ldr	r5, [pc, #28]	@ (8001a24 <_write_r+0x20>)
 8001a08:	4604      	mov	r4, r0
 8001a0a:	4608      	mov	r0, r1
 8001a0c:	4611      	mov	r1, r2
 8001a0e:	2200      	movs	r2, #0
 8001a10:	602a      	str	r2, [r5, #0]
 8001a12:	461a      	mov	r2, r3
 8001a14:	f7ff f9cb 	bl	8000dae <_write>
 8001a18:	1c43      	adds	r3, r0, #1
 8001a1a:	d102      	bne.n	8001a22 <_write_r+0x1e>
 8001a1c:	682b      	ldr	r3, [r5, #0]
 8001a1e:	b103      	cbz	r3, 8001a22 <_write_r+0x1e>
 8001a20:	6023      	str	r3, [r4, #0]
 8001a22:	bd38      	pop	{r3, r4, r5, pc}
 8001a24:	200004b0 	.word	0x200004b0

08001a28 <__errno>:
 8001a28:	4b01      	ldr	r3, [pc, #4]	@ (8001a30 <__errno+0x8>)
 8001a2a:	6818      	ldr	r0, [r3, #0]
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	20000020 	.word	0x20000020

08001a34 <__libc_init_array>:
 8001a34:	b570      	push	{r4, r5, r6, lr}
 8001a36:	4d0d      	ldr	r5, [pc, #52]	@ (8001a6c <__libc_init_array+0x38>)
 8001a38:	4c0d      	ldr	r4, [pc, #52]	@ (8001a70 <__libc_init_array+0x3c>)
 8001a3a:	1b64      	subs	r4, r4, r5
 8001a3c:	10a4      	asrs	r4, r4, #2
 8001a3e:	2600      	movs	r6, #0
 8001a40:	42a6      	cmp	r6, r4
 8001a42:	d109      	bne.n	8001a58 <__libc_init_array+0x24>
 8001a44:	4d0b      	ldr	r5, [pc, #44]	@ (8001a74 <__libc_init_array+0x40>)
 8001a46:	4c0c      	ldr	r4, [pc, #48]	@ (8001a78 <__libc_init_array+0x44>)
 8001a48:	f000 fd96 	bl	8002578 <_init>
 8001a4c:	1b64      	subs	r4, r4, r5
 8001a4e:	10a4      	asrs	r4, r4, #2
 8001a50:	2600      	movs	r6, #0
 8001a52:	42a6      	cmp	r6, r4
 8001a54:	d105      	bne.n	8001a62 <__libc_init_array+0x2e>
 8001a56:	bd70      	pop	{r4, r5, r6, pc}
 8001a58:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a5c:	4798      	blx	r3
 8001a5e:	3601      	adds	r6, #1
 8001a60:	e7ee      	b.n	8001a40 <__libc_init_array+0xc>
 8001a62:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a66:	4798      	blx	r3
 8001a68:	3601      	adds	r6, #1
 8001a6a:	e7f2      	b.n	8001a52 <__libc_init_array+0x1e>
 8001a6c:	08002cf0 	.word	0x08002cf0
 8001a70:	08002cf0 	.word	0x08002cf0
 8001a74:	08002cf0 	.word	0x08002cf0
 8001a78:	08002cf4 	.word	0x08002cf4

08001a7c <__retarget_lock_init_recursive>:
 8001a7c:	4770      	bx	lr

08001a7e <__retarget_lock_acquire_recursive>:
 8001a7e:	4770      	bx	lr

08001a80 <__retarget_lock_release_recursive>:
 8001a80:	4770      	bx	lr
	...

08001a84 <_free_r>:
 8001a84:	b538      	push	{r3, r4, r5, lr}
 8001a86:	4605      	mov	r5, r0
 8001a88:	2900      	cmp	r1, #0
 8001a8a:	d041      	beq.n	8001b10 <_free_r+0x8c>
 8001a8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a90:	1f0c      	subs	r4, r1, #4
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	bfb8      	it	lt
 8001a96:	18e4      	addlt	r4, r4, r3
 8001a98:	f000 f8e0 	bl	8001c5c <__malloc_lock>
 8001a9c:	4a1d      	ldr	r2, [pc, #116]	@ (8001b14 <_free_r+0x90>)
 8001a9e:	6813      	ldr	r3, [r2, #0]
 8001aa0:	b933      	cbnz	r3, 8001ab0 <_free_r+0x2c>
 8001aa2:	6063      	str	r3, [r4, #4]
 8001aa4:	6014      	str	r4, [r2, #0]
 8001aa6:	4628      	mov	r0, r5
 8001aa8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001aac:	f000 b8dc 	b.w	8001c68 <__malloc_unlock>
 8001ab0:	42a3      	cmp	r3, r4
 8001ab2:	d908      	bls.n	8001ac6 <_free_r+0x42>
 8001ab4:	6820      	ldr	r0, [r4, #0]
 8001ab6:	1821      	adds	r1, r4, r0
 8001ab8:	428b      	cmp	r3, r1
 8001aba:	bf01      	itttt	eq
 8001abc:	6819      	ldreq	r1, [r3, #0]
 8001abe:	685b      	ldreq	r3, [r3, #4]
 8001ac0:	1809      	addeq	r1, r1, r0
 8001ac2:	6021      	streq	r1, [r4, #0]
 8001ac4:	e7ed      	b.n	8001aa2 <_free_r+0x1e>
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	b10b      	cbz	r3, 8001ad0 <_free_r+0x4c>
 8001acc:	42a3      	cmp	r3, r4
 8001ace:	d9fa      	bls.n	8001ac6 <_free_r+0x42>
 8001ad0:	6811      	ldr	r1, [r2, #0]
 8001ad2:	1850      	adds	r0, r2, r1
 8001ad4:	42a0      	cmp	r0, r4
 8001ad6:	d10b      	bne.n	8001af0 <_free_r+0x6c>
 8001ad8:	6820      	ldr	r0, [r4, #0]
 8001ada:	4401      	add	r1, r0
 8001adc:	1850      	adds	r0, r2, r1
 8001ade:	4283      	cmp	r3, r0
 8001ae0:	6011      	str	r1, [r2, #0]
 8001ae2:	d1e0      	bne.n	8001aa6 <_free_r+0x22>
 8001ae4:	6818      	ldr	r0, [r3, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	6053      	str	r3, [r2, #4]
 8001aea:	4408      	add	r0, r1
 8001aec:	6010      	str	r0, [r2, #0]
 8001aee:	e7da      	b.n	8001aa6 <_free_r+0x22>
 8001af0:	d902      	bls.n	8001af8 <_free_r+0x74>
 8001af2:	230c      	movs	r3, #12
 8001af4:	602b      	str	r3, [r5, #0]
 8001af6:	e7d6      	b.n	8001aa6 <_free_r+0x22>
 8001af8:	6820      	ldr	r0, [r4, #0]
 8001afa:	1821      	adds	r1, r4, r0
 8001afc:	428b      	cmp	r3, r1
 8001afe:	bf04      	itt	eq
 8001b00:	6819      	ldreq	r1, [r3, #0]
 8001b02:	685b      	ldreq	r3, [r3, #4]
 8001b04:	6063      	str	r3, [r4, #4]
 8001b06:	bf04      	itt	eq
 8001b08:	1809      	addeq	r1, r1, r0
 8001b0a:	6021      	streq	r1, [r4, #0]
 8001b0c:	6054      	str	r4, [r2, #4]
 8001b0e:	e7ca      	b.n	8001aa6 <_free_r+0x22>
 8001b10:	bd38      	pop	{r3, r4, r5, pc}
 8001b12:	bf00      	nop
 8001b14:	200004bc 	.word	0x200004bc

08001b18 <sbrk_aligned>:
 8001b18:	b570      	push	{r4, r5, r6, lr}
 8001b1a:	4e0f      	ldr	r6, [pc, #60]	@ (8001b58 <sbrk_aligned+0x40>)
 8001b1c:	460c      	mov	r4, r1
 8001b1e:	6831      	ldr	r1, [r6, #0]
 8001b20:	4605      	mov	r5, r0
 8001b22:	b911      	cbnz	r1, 8001b2a <sbrk_aligned+0x12>
 8001b24:	f000 fcd4 	bl	80024d0 <_sbrk_r>
 8001b28:	6030      	str	r0, [r6, #0]
 8001b2a:	4621      	mov	r1, r4
 8001b2c:	4628      	mov	r0, r5
 8001b2e:	f000 fccf 	bl	80024d0 <_sbrk_r>
 8001b32:	1c43      	adds	r3, r0, #1
 8001b34:	d103      	bne.n	8001b3e <sbrk_aligned+0x26>
 8001b36:	f04f 34ff 	mov.w	r4, #4294967295
 8001b3a:	4620      	mov	r0, r4
 8001b3c:	bd70      	pop	{r4, r5, r6, pc}
 8001b3e:	1cc4      	adds	r4, r0, #3
 8001b40:	f024 0403 	bic.w	r4, r4, #3
 8001b44:	42a0      	cmp	r0, r4
 8001b46:	d0f8      	beq.n	8001b3a <sbrk_aligned+0x22>
 8001b48:	1a21      	subs	r1, r4, r0
 8001b4a:	4628      	mov	r0, r5
 8001b4c:	f000 fcc0 	bl	80024d0 <_sbrk_r>
 8001b50:	3001      	adds	r0, #1
 8001b52:	d1f2      	bne.n	8001b3a <sbrk_aligned+0x22>
 8001b54:	e7ef      	b.n	8001b36 <sbrk_aligned+0x1e>
 8001b56:	bf00      	nop
 8001b58:	200004b8 	.word	0x200004b8

08001b5c <_malloc_r>:
 8001b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b60:	1ccd      	adds	r5, r1, #3
 8001b62:	f025 0503 	bic.w	r5, r5, #3
 8001b66:	3508      	adds	r5, #8
 8001b68:	2d0c      	cmp	r5, #12
 8001b6a:	bf38      	it	cc
 8001b6c:	250c      	movcc	r5, #12
 8001b6e:	2d00      	cmp	r5, #0
 8001b70:	4606      	mov	r6, r0
 8001b72:	db01      	blt.n	8001b78 <_malloc_r+0x1c>
 8001b74:	42a9      	cmp	r1, r5
 8001b76:	d904      	bls.n	8001b82 <_malloc_r+0x26>
 8001b78:	230c      	movs	r3, #12
 8001b7a:	6033      	str	r3, [r6, #0]
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b82:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001c58 <_malloc_r+0xfc>
 8001b86:	f000 f869 	bl	8001c5c <__malloc_lock>
 8001b8a:	f8d8 3000 	ldr.w	r3, [r8]
 8001b8e:	461c      	mov	r4, r3
 8001b90:	bb44      	cbnz	r4, 8001be4 <_malloc_r+0x88>
 8001b92:	4629      	mov	r1, r5
 8001b94:	4630      	mov	r0, r6
 8001b96:	f7ff ffbf 	bl	8001b18 <sbrk_aligned>
 8001b9a:	1c43      	adds	r3, r0, #1
 8001b9c:	4604      	mov	r4, r0
 8001b9e:	d158      	bne.n	8001c52 <_malloc_r+0xf6>
 8001ba0:	f8d8 4000 	ldr.w	r4, [r8]
 8001ba4:	4627      	mov	r7, r4
 8001ba6:	2f00      	cmp	r7, #0
 8001ba8:	d143      	bne.n	8001c32 <_malloc_r+0xd6>
 8001baa:	2c00      	cmp	r4, #0
 8001bac:	d04b      	beq.n	8001c46 <_malloc_r+0xea>
 8001bae:	6823      	ldr	r3, [r4, #0]
 8001bb0:	4639      	mov	r1, r7
 8001bb2:	4630      	mov	r0, r6
 8001bb4:	eb04 0903 	add.w	r9, r4, r3
 8001bb8:	f000 fc8a 	bl	80024d0 <_sbrk_r>
 8001bbc:	4581      	cmp	r9, r0
 8001bbe:	d142      	bne.n	8001c46 <_malloc_r+0xea>
 8001bc0:	6821      	ldr	r1, [r4, #0]
 8001bc2:	1a6d      	subs	r5, r5, r1
 8001bc4:	4629      	mov	r1, r5
 8001bc6:	4630      	mov	r0, r6
 8001bc8:	f7ff ffa6 	bl	8001b18 <sbrk_aligned>
 8001bcc:	3001      	adds	r0, #1
 8001bce:	d03a      	beq.n	8001c46 <_malloc_r+0xea>
 8001bd0:	6823      	ldr	r3, [r4, #0]
 8001bd2:	442b      	add	r3, r5
 8001bd4:	6023      	str	r3, [r4, #0]
 8001bd6:	f8d8 3000 	ldr.w	r3, [r8]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	bb62      	cbnz	r2, 8001c38 <_malloc_r+0xdc>
 8001bde:	f8c8 7000 	str.w	r7, [r8]
 8001be2:	e00f      	b.n	8001c04 <_malloc_r+0xa8>
 8001be4:	6822      	ldr	r2, [r4, #0]
 8001be6:	1b52      	subs	r2, r2, r5
 8001be8:	d420      	bmi.n	8001c2c <_malloc_r+0xd0>
 8001bea:	2a0b      	cmp	r2, #11
 8001bec:	d917      	bls.n	8001c1e <_malloc_r+0xc2>
 8001bee:	1961      	adds	r1, r4, r5
 8001bf0:	42a3      	cmp	r3, r4
 8001bf2:	6025      	str	r5, [r4, #0]
 8001bf4:	bf18      	it	ne
 8001bf6:	6059      	strne	r1, [r3, #4]
 8001bf8:	6863      	ldr	r3, [r4, #4]
 8001bfa:	bf08      	it	eq
 8001bfc:	f8c8 1000 	streq.w	r1, [r8]
 8001c00:	5162      	str	r2, [r4, r5]
 8001c02:	604b      	str	r3, [r1, #4]
 8001c04:	4630      	mov	r0, r6
 8001c06:	f000 f82f 	bl	8001c68 <__malloc_unlock>
 8001c0a:	f104 000b 	add.w	r0, r4, #11
 8001c0e:	1d23      	adds	r3, r4, #4
 8001c10:	f020 0007 	bic.w	r0, r0, #7
 8001c14:	1ac2      	subs	r2, r0, r3
 8001c16:	bf1c      	itt	ne
 8001c18:	1a1b      	subne	r3, r3, r0
 8001c1a:	50a3      	strne	r3, [r4, r2]
 8001c1c:	e7af      	b.n	8001b7e <_malloc_r+0x22>
 8001c1e:	6862      	ldr	r2, [r4, #4]
 8001c20:	42a3      	cmp	r3, r4
 8001c22:	bf0c      	ite	eq
 8001c24:	f8c8 2000 	streq.w	r2, [r8]
 8001c28:	605a      	strne	r2, [r3, #4]
 8001c2a:	e7eb      	b.n	8001c04 <_malloc_r+0xa8>
 8001c2c:	4623      	mov	r3, r4
 8001c2e:	6864      	ldr	r4, [r4, #4]
 8001c30:	e7ae      	b.n	8001b90 <_malloc_r+0x34>
 8001c32:	463c      	mov	r4, r7
 8001c34:	687f      	ldr	r7, [r7, #4]
 8001c36:	e7b6      	b.n	8001ba6 <_malloc_r+0x4a>
 8001c38:	461a      	mov	r2, r3
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	42a3      	cmp	r3, r4
 8001c3e:	d1fb      	bne.n	8001c38 <_malloc_r+0xdc>
 8001c40:	2300      	movs	r3, #0
 8001c42:	6053      	str	r3, [r2, #4]
 8001c44:	e7de      	b.n	8001c04 <_malloc_r+0xa8>
 8001c46:	230c      	movs	r3, #12
 8001c48:	6033      	str	r3, [r6, #0]
 8001c4a:	4630      	mov	r0, r6
 8001c4c:	f000 f80c 	bl	8001c68 <__malloc_unlock>
 8001c50:	e794      	b.n	8001b7c <_malloc_r+0x20>
 8001c52:	6005      	str	r5, [r0, #0]
 8001c54:	e7d6      	b.n	8001c04 <_malloc_r+0xa8>
 8001c56:	bf00      	nop
 8001c58:	200004bc 	.word	0x200004bc

08001c5c <__malloc_lock>:
 8001c5c:	4801      	ldr	r0, [pc, #4]	@ (8001c64 <__malloc_lock+0x8>)
 8001c5e:	f7ff bf0e 	b.w	8001a7e <__retarget_lock_acquire_recursive>
 8001c62:	bf00      	nop
 8001c64:	200004b4 	.word	0x200004b4

08001c68 <__malloc_unlock>:
 8001c68:	4801      	ldr	r0, [pc, #4]	@ (8001c70 <__malloc_unlock+0x8>)
 8001c6a:	f7ff bf09 	b.w	8001a80 <__retarget_lock_release_recursive>
 8001c6e:	bf00      	nop
 8001c70:	200004b4 	.word	0x200004b4

08001c74 <__ssputs_r>:
 8001c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c78:	688e      	ldr	r6, [r1, #8]
 8001c7a:	461f      	mov	r7, r3
 8001c7c:	42be      	cmp	r6, r7
 8001c7e:	680b      	ldr	r3, [r1, #0]
 8001c80:	4682      	mov	sl, r0
 8001c82:	460c      	mov	r4, r1
 8001c84:	4690      	mov	r8, r2
 8001c86:	d82d      	bhi.n	8001ce4 <__ssputs_r+0x70>
 8001c88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001c8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001c90:	d026      	beq.n	8001ce0 <__ssputs_r+0x6c>
 8001c92:	6965      	ldr	r5, [r4, #20]
 8001c94:	6909      	ldr	r1, [r1, #16]
 8001c96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001c9a:	eba3 0901 	sub.w	r9, r3, r1
 8001c9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001ca2:	1c7b      	adds	r3, r7, #1
 8001ca4:	444b      	add	r3, r9
 8001ca6:	106d      	asrs	r5, r5, #1
 8001ca8:	429d      	cmp	r5, r3
 8001caa:	bf38      	it	cc
 8001cac:	461d      	movcc	r5, r3
 8001cae:	0553      	lsls	r3, r2, #21
 8001cb0:	d527      	bpl.n	8001d02 <__ssputs_r+0x8e>
 8001cb2:	4629      	mov	r1, r5
 8001cb4:	f7ff ff52 	bl	8001b5c <_malloc_r>
 8001cb8:	4606      	mov	r6, r0
 8001cba:	b360      	cbz	r0, 8001d16 <__ssputs_r+0xa2>
 8001cbc:	6921      	ldr	r1, [r4, #16]
 8001cbe:	464a      	mov	r2, r9
 8001cc0:	f000 fc16 	bl	80024f0 <memcpy>
 8001cc4:	89a3      	ldrh	r3, [r4, #12]
 8001cc6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001cca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cce:	81a3      	strh	r3, [r4, #12]
 8001cd0:	6126      	str	r6, [r4, #16]
 8001cd2:	6165      	str	r5, [r4, #20]
 8001cd4:	444e      	add	r6, r9
 8001cd6:	eba5 0509 	sub.w	r5, r5, r9
 8001cda:	6026      	str	r6, [r4, #0]
 8001cdc:	60a5      	str	r5, [r4, #8]
 8001cde:	463e      	mov	r6, r7
 8001ce0:	42be      	cmp	r6, r7
 8001ce2:	d900      	bls.n	8001ce6 <__ssputs_r+0x72>
 8001ce4:	463e      	mov	r6, r7
 8001ce6:	6820      	ldr	r0, [r4, #0]
 8001ce8:	4632      	mov	r2, r6
 8001cea:	4641      	mov	r1, r8
 8001cec:	f000 fbb4 	bl	8002458 <memmove>
 8001cf0:	68a3      	ldr	r3, [r4, #8]
 8001cf2:	1b9b      	subs	r3, r3, r6
 8001cf4:	60a3      	str	r3, [r4, #8]
 8001cf6:	6823      	ldr	r3, [r4, #0]
 8001cf8:	4433      	add	r3, r6
 8001cfa:	6023      	str	r3, [r4, #0]
 8001cfc:	2000      	movs	r0, #0
 8001cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d02:	462a      	mov	r2, r5
 8001d04:	f000 fc02 	bl	800250c <_realloc_r>
 8001d08:	4606      	mov	r6, r0
 8001d0a:	2800      	cmp	r0, #0
 8001d0c:	d1e0      	bne.n	8001cd0 <__ssputs_r+0x5c>
 8001d0e:	6921      	ldr	r1, [r4, #16]
 8001d10:	4650      	mov	r0, sl
 8001d12:	f7ff feb7 	bl	8001a84 <_free_r>
 8001d16:	230c      	movs	r3, #12
 8001d18:	f8ca 3000 	str.w	r3, [sl]
 8001d1c:	89a3      	ldrh	r3, [r4, #12]
 8001d1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d22:	81a3      	strh	r3, [r4, #12]
 8001d24:	f04f 30ff 	mov.w	r0, #4294967295
 8001d28:	e7e9      	b.n	8001cfe <__ssputs_r+0x8a>
	...

08001d2c <_svfiprintf_r>:
 8001d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d30:	4698      	mov	r8, r3
 8001d32:	898b      	ldrh	r3, [r1, #12]
 8001d34:	061b      	lsls	r3, r3, #24
 8001d36:	b09d      	sub	sp, #116	@ 0x74
 8001d38:	4607      	mov	r7, r0
 8001d3a:	460d      	mov	r5, r1
 8001d3c:	4614      	mov	r4, r2
 8001d3e:	d510      	bpl.n	8001d62 <_svfiprintf_r+0x36>
 8001d40:	690b      	ldr	r3, [r1, #16]
 8001d42:	b973      	cbnz	r3, 8001d62 <_svfiprintf_r+0x36>
 8001d44:	2140      	movs	r1, #64	@ 0x40
 8001d46:	f7ff ff09 	bl	8001b5c <_malloc_r>
 8001d4a:	6028      	str	r0, [r5, #0]
 8001d4c:	6128      	str	r0, [r5, #16]
 8001d4e:	b930      	cbnz	r0, 8001d5e <_svfiprintf_r+0x32>
 8001d50:	230c      	movs	r3, #12
 8001d52:	603b      	str	r3, [r7, #0]
 8001d54:	f04f 30ff 	mov.w	r0, #4294967295
 8001d58:	b01d      	add	sp, #116	@ 0x74
 8001d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d5e:	2340      	movs	r3, #64	@ 0x40
 8001d60:	616b      	str	r3, [r5, #20]
 8001d62:	2300      	movs	r3, #0
 8001d64:	9309      	str	r3, [sp, #36]	@ 0x24
 8001d66:	2320      	movs	r3, #32
 8001d68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001d6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8001d70:	2330      	movs	r3, #48	@ 0x30
 8001d72:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001f10 <_svfiprintf_r+0x1e4>
 8001d76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001d7a:	f04f 0901 	mov.w	r9, #1
 8001d7e:	4623      	mov	r3, r4
 8001d80:	469a      	mov	sl, r3
 8001d82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001d86:	b10a      	cbz	r2, 8001d8c <_svfiprintf_r+0x60>
 8001d88:	2a25      	cmp	r2, #37	@ 0x25
 8001d8a:	d1f9      	bne.n	8001d80 <_svfiprintf_r+0x54>
 8001d8c:	ebba 0b04 	subs.w	fp, sl, r4
 8001d90:	d00b      	beq.n	8001daa <_svfiprintf_r+0x7e>
 8001d92:	465b      	mov	r3, fp
 8001d94:	4622      	mov	r2, r4
 8001d96:	4629      	mov	r1, r5
 8001d98:	4638      	mov	r0, r7
 8001d9a:	f7ff ff6b 	bl	8001c74 <__ssputs_r>
 8001d9e:	3001      	adds	r0, #1
 8001da0:	f000 80a7 	beq.w	8001ef2 <_svfiprintf_r+0x1c6>
 8001da4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001da6:	445a      	add	r2, fp
 8001da8:	9209      	str	r2, [sp, #36]	@ 0x24
 8001daa:	f89a 3000 	ldrb.w	r3, [sl]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f000 809f 	beq.w	8001ef2 <_svfiprintf_r+0x1c6>
 8001db4:	2300      	movs	r3, #0
 8001db6:	f04f 32ff 	mov.w	r2, #4294967295
 8001dba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001dbe:	f10a 0a01 	add.w	sl, sl, #1
 8001dc2:	9304      	str	r3, [sp, #16]
 8001dc4:	9307      	str	r3, [sp, #28]
 8001dc6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001dca:	931a      	str	r3, [sp, #104]	@ 0x68
 8001dcc:	4654      	mov	r4, sl
 8001dce:	2205      	movs	r2, #5
 8001dd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001dd4:	484e      	ldr	r0, [pc, #312]	@ (8001f10 <_svfiprintf_r+0x1e4>)
 8001dd6:	f7fe f9fb 	bl	80001d0 <memchr>
 8001dda:	9a04      	ldr	r2, [sp, #16]
 8001ddc:	b9d8      	cbnz	r0, 8001e16 <_svfiprintf_r+0xea>
 8001dde:	06d0      	lsls	r0, r2, #27
 8001de0:	bf44      	itt	mi
 8001de2:	2320      	movmi	r3, #32
 8001de4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001de8:	0711      	lsls	r1, r2, #28
 8001dea:	bf44      	itt	mi
 8001dec:	232b      	movmi	r3, #43	@ 0x2b
 8001dee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001df2:	f89a 3000 	ldrb.w	r3, [sl]
 8001df6:	2b2a      	cmp	r3, #42	@ 0x2a
 8001df8:	d015      	beq.n	8001e26 <_svfiprintf_r+0xfa>
 8001dfa:	9a07      	ldr	r2, [sp, #28]
 8001dfc:	4654      	mov	r4, sl
 8001dfe:	2000      	movs	r0, #0
 8001e00:	f04f 0c0a 	mov.w	ip, #10
 8001e04:	4621      	mov	r1, r4
 8001e06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001e0a:	3b30      	subs	r3, #48	@ 0x30
 8001e0c:	2b09      	cmp	r3, #9
 8001e0e:	d94b      	bls.n	8001ea8 <_svfiprintf_r+0x17c>
 8001e10:	b1b0      	cbz	r0, 8001e40 <_svfiprintf_r+0x114>
 8001e12:	9207      	str	r2, [sp, #28]
 8001e14:	e014      	b.n	8001e40 <_svfiprintf_r+0x114>
 8001e16:	eba0 0308 	sub.w	r3, r0, r8
 8001e1a:	fa09 f303 	lsl.w	r3, r9, r3
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	9304      	str	r3, [sp, #16]
 8001e22:	46a2      	mov	sl, r4
 8001e24:	e7d2      	b.n	8001dcc <_svfiprintf_r+0xa0>
 8001e26:	9b03      	ldr	r3, [sp, #12]
 8001e28:	1d19      	adds	r1, r3, #4
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	9103      	str	r1, [sp, #12]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	bfbb      	ittet	lt
 8001e32:	425b      	neglt	r3, r3
 8001e34:	f042 0202 	orrlt.w	r2, r2, #2
 8001e38:	9307      	strge	r3, [sp, #28]
 8001e3a:	9307      	strlt	r3, [sp, #28]
 8001e3c:	bfb8      	it	lt
 8001e3e:	9204      	strlt	r2, [sp, #16]
 8001e40:	7823      	ldrb	r3, [r4, #0]
 8001e42:	2b2e      	cmp	r3, #46	@ 0x2e
 8001e44:	d10a      	bne.n	8001e5c <_svfiprintf_r+0x130>
 8001e46:	7863      	ldrb	r3, [r4, #1]
 8001e48:	2b2a      	cmp	r3, #42	@ 0x2a
 8001e4a:	d132      	bne.n	8001eb2 <_svfiprintf_r+0x186>
 8001e4c:	9b03      	ldr	r3, [sp, #12]
 8001e4e:	1d1a      	adds	r2, r3, #4
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	9203      	str	r2, [sp, #12]
 8001e54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001e58:	3402      	adds	r4, #2
 8001e5a:	9305      	str	r3, [sp, #20]
 8001e5c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8001f20 <_svfiprintf_r+0x1f4>
 8001e60:	7821      	ldrb	r1, [r4, #0]
 8001e62:	2203      	movs	r2, #3
 8001e64:	4650      	mov	r0, sl
 8001e66:	f7fe f9b3 	bl	80001d0 <memchr>
 8001e6a:	b138      	cbz	r0, 8001e7c <_svfiprintf_r+0x150>
 8001e6c:	9b04      	ldr	r3, [sp, #16]
 8001e6e:	eba0 000a 	sub.w	r0, r0, sl
 8001e72:	2240      	movs	r2, #64	@ 0x40
 8001e74:	4082      	lsls	r2, r0
 8001e76:	4313      	orrs	r3, r2
 8001e78:	3401      	adds	r4, #1
 8001e7a:	9304      	str	r3, [sp, #16]
 8001e7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e80:	4824      	ldr	r0, [pc, #144]	@ (8001f14 <_svfiprintf_r+0x1e8>)
 8001e82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001e86:	2206      	movs	r2, #6
 8001e88:	f7fe f9a2 	bl	80001d0 <memchr>
 8001e8c:	2800      	cmp	r0, #0
 8001e8e:	d036      	beq.n	8001efe <_svfiprintf_r+0x1d2>
 8001e90:	4b21      	ldr	r3, [pc, #132]	@ (8001f18 <_svfiprintf_r+0x1ec>)
 8001e92:	bb1b      	cbnz	r3, 8001edc <_svfiprintf_r+0x1b0>
 8001e94:	9b03      	ldr	r3, [sp, #12]
 8001e96:	3307      	adds	r3, #7
 8001e98:	f023 0307 	bic.w	r3, r3, #7
 8001e9c:	3308      	adds	r3, #8
 8001e9e:	9303      	str	r3, [sp, #12]
 8001ea0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001ea2:	4433      	add	r3, r6
 8001ea4:	9309      	str	r3, [sp, #36]	@ 0x24
 8001ea6:	e76a      	b.n	8001d7e <_svfiprintf_r+0x52>
 8001ea8:	fb0c 3202 	mla	r2, ip, r2, r3
 8001eac:	460c      	mov	r4, r1
 8001eae:	2001      	movs	r0, #1
 8001eb0:	e7a8      	b.n	8001e04 <_svfiprintf_r+0xd8>
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	3401      	adds	r4, #1
 8001eb6:	9305      	str	r3, [sp, #20]
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f04f 0c0a 	mov.w	ip, #10
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001ec4:	3a30      	subs	r2, #48	@ 0x30
 8001ec6:	2a09      	cmp	r2, #9
 8001ec8:	d903      	bls.n	8001ed2 <_svfiprintf_r+0x1a6>
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d0c6      	beq.n	8001e5c <_svfiprintf_r+0x130>
 8001ece:	9105      	str	r1, [sp, #20]
 8001ed0:	e7c4      	b.n	8001e5c <_svfiprintf_r+0x130>
 8001ed2:	fb0c 2101 	mla	r1, ip, r1, r2
 8001ed6:	4604      	mov	r4, r0
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e7f0      	b.n	8001ebe <_svfiprintf_r+0x192>
 8001edc:	ab03      	add	r3, sp, #12
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	462a      	mov	r2, r5
 8001ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8001f1c <_svfiprintf_r+0x1f0>)
 8001ee4:	a904      	add	r1, sp, #16
 8001ee6:	4638      	mov	r0, r7
 8001ee8:	f3af 8000 	nop.w
 8001eec:	1c42      	adds	r2, r0, #1
 8001eee:	4606      	mov	r6, r0
 8001ef0:	d1d6      	bne.n	8001ea0 <_svfiprintf_r+0x174>
 8001ef2:	89ab      	ldrh	r3, [r5, #12]
 8001ef4:	065b      	lsls	r3, r3, #25
 8001ef6:	f53f af2d 	bmi.w	8001d54 <_svfiprintf_r+0x28>
 8001efa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001efc:	e72c      	b.n	8001d58 <_svfiprintf_r+0x2c>
 8001efe:	ab03      	add	r3, sp, #12
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	462a      	mov	r2, r5
 8001f04:	4b05      	ldr	r3, [pc, #20]	@ (8001f1c <_svfiprintf_r+0x1f0>)
 8001f06:	a904      	add	r1, sp, #16
 8001f08:	4638      	mov	r0, r7
 8001f0a:	f000 f879 	bl	8002000 <_printf_i>
 8001f0e:	e7ed      	b.n	8001eec <_svfiprintf_r+0x1c0>
 8001f10:	08002cb5 	.word	0x08002cb5
 8001f14:	08002cbf 	.word	0x08002cbf
 8001f18:	00000000 	.word	0x00000000
 8001f1c:	08001c75 	.word	0x08001c75
 8001f20:	08002cbb 	.word	0x08002cbb

08001f24 <_printf_common>:
 8001f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f28:	4616      	mov	r6, r2
 8001f2a:	4698      	mov	r8, r3
 8001f2c:	688a      	ldr	r2, [r1, #8]
 8001f2e:	690b      	ldr	r3, [r1, #16]
 8001f30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001f34:	4293      	cmp	r3, r2
 8001f36:	bfb8      	it	lt
 8001f38:	4613      	movlt	r3, r2
 8001f3a:	6033      	str	r3, [r6, #0]
 8001f3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001f40:	4607      	mov	r7, r0
 8001f42:	460c      	mov	r4, r1
 8001f44:	b10a      	cbz	r2, 8001f4a <_printf_common+0x26>
 8001f46:	3301      	adds	r3, #1
 8001f48:	6033      	str	r3, [r6, #0]
 8001f4a:	6823      	ldr	r3, [r4, #0]
 8001f4c:	0699      	lsls	r1, r3, #26
 8001f4e:	bf42      	ittt	mi
 8001f50:	6833      	ldrmi	r3, [r6, #0]
 8001f52:	3302      	addmi	r3, #2
 8001f54:	6033      	strmi	r3, [r6, #0]
 8001f56:	6825      	ldr	r5, [r4, #0]
 8001f58:	f015 0506 	ands.w	r5, r5, #6
 8001f5c:	d106      	bne.n	8001f6c <_printf_common+0x48>
 8001f5e:	f104 0a19 	add.w	sl, r4, #25
 8001f62:	68e3      	ldr	r3, [r4, #12]
 8001f64:	6832      	ldr	r2, [r6, #0]
 8001f66:	1a9b      	subs	r3, r3, r2
 8001f68:	42ab      	cmp	r3, r5
 8001f6a:	dc26      	bgt.n	8001fba <_printf_common+0x96>
 8001f6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001f70:	6822      	ldr	r2, [r4, #0]
 8001f72:	3b00      	subs	r3, #0
 8001f74:	bf18      	it	ne
 8001f76:	2301      	movne	r3, #1
 8001f78:	0692      	lsls	r2, r2, #26
 8001f7a:	d42b      	bmi.n	8001fd4 <_printf_common+0xb0>
 8001f7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001f80:	4641      	mov	r1, r8
 8001f82:	4638      	mov	r0, r7
 8001f84:	47c8      	blx	r9
 8001f86:	3001      	adds	r0, #1
 8001f88:	d01e      	beq.n	8001fc8 <_printf_common+0xa4>
 8001f8a:	6823      	ldr	r3, [r4, #0]
 8001f8c:	6922      	ldr	r2, [r4, #16]
 8001f8e:	f003 0306 	and.w	r3, r3, #6
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	bf02      	ittt	eq
 8001f96:	68e5      	ldreq	r5, [r4, #12]
 8001f98:	6833      	ldreq	r3, [r6, #0]
 8001f9a:	1aed      	subeq	r5, r5, r3
 8001f9c:	68a3      	ldr	r3, [r4, #8]
 8001f9e:	bf0c      	ite	eq
 8001fa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001fa4:	2500      	movne	r5, #0
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	bfc4      	itt	gt
 8001faa:	1a9b      	subgt	r3, r3, r2
 8001fac:	18ed      	addgt	r5, r5, r3
 8001fae:	2600      	movs	r6, #0
 8001fb0:	341a      	adds	r4, #26
 8001fb2:	42b5      	cmp	r5, r6
 8001fb4:	d11a      	bne.n	8001fec <_printf_common+0xc8>
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	e008      	b.n	8001fcc <_printf_common+0xa8>
 8001fba:	2301      	movs	r3, #1
 8001fbc:	4652      	mov	r2, sl
 8001fbe:	4641      	mov	r1, r8
 8001fc0:	4638      	mov	r0, r7
 8001fc2:	47c8      	blx	r9
 8001fc4:	3001      	adds	r0, #1
 8001fc6:	d103      	bne.n	8001fd0 <_printf_common+0xac>
 8001fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fd0:	3501      	adds	r5, #1
 8001fd2:	e7c6      	b.n	8001f62 <_printf_common+0x3e>
 8001fd4:	18e1      	adds	r1, r4, r3
 8001fd6:	1c5a      	adds	r2, r3, #1
 8001fd8:	2030      	movs	r0, #48	@ 0x30
 8001fda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001fde:	4422      	add	r2, r4
 8001fe0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001fe4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001fe8:	3302      	adds	r3, #2
 8001fea:	e7c7      	b.n	8001f7c <_printf_common+0x58>
 8001fec:	2301      	movs	r3, #1
 8001fee:	4622      	mov	r2, r4
 8001ff0:	4641      	mov	r1, r8
 8001ff2:	4638      	mov	r0, r7
 8001ff4:	47c8      	blx	r9
 8001ff6:	3001      	adds	r0, #1
 8001ff8:	d0e6      	beq.n	8001fc8 <_printf_common+0xa4>
 8001ffa:	3601      	adds	r6, #1
 8001ffc:	e7d9      	b.n	8001fb2 <_printf_common+0x8e>
	...

08002000 <_printf_i>:
 8002000:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002004:	7e0f      	ldrb	r7, [r1, #24]
 8002006:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002008:	2f78      	cmp	r7, #120	@ 0x78
 800200a:	4691      	mov	r9, r2
 800200c:	4680      	mov	r8, r0
 800200e:	460c      	mov	r4, r1
 8002010:	469a      	mov	sl, r3
 8002012:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002016:	d807      	bhi.n	8002028 <_printf_i+0x28>
 8002018:	2f62      	cmp	r7, #98	@ 0x62
 800201a:	d80a      	bhi.n	8002032 <_printf_i+0x32>
 800201c:	2f00      	cmp	r7, #0
 800201e:	f000 80d1 	beq.w	80021c4 <_printf_i+0x1c4>
 8002022:	2f58      	cmp	r7, #88	@ 0x58
 8002024:	f000 80b8 	beq.w	8002198 <_printf_i+0x198>
 8002028:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800202c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002030:	e03a      	b.n	80020a8 <_printf_i+0xa8>
 8002032:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002036:	2b15      	cmp	r3, #21
 8002038:	d8f6      	bhi.n	8002028 <_printf_i+0x28>
 800203a:	a101      	add	r1, pc, #4	@ (adr r1, 8002040 <_printf_i+0x40>)
 800203c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002040:	08002099 	.word	0x08002099
 8002044:	080020ad 	.word	0x080020ad
 8002048:	08002029 	.word	0x08002029
 800204c:	08002029 	.word	0x08002029
 8002050:	08002029 	.word	0x08002029
 8002054:	08002029 	.word	0x08002029
 8002058:	080020ad 	.word	0x080020ad
 800205c:	08002029 	.word	0x08002029
 8002060:	08002029 	.word	0x08002029
 8002064:	08002029 	.word	0x08002029
 8002068:	08002029 	.word	0x08002029
 800206c:	080021ab 	.word	0x080021ab
 8002070:	080020d7 	.word	0x080020d7
 8002074:	08002165 	.word	0x08002165
 8002078:	08002029 	.word	0x08002029
 800207c:	08002029 	.word	0x08002029
 8002080:	080021cd 	.word	0x080021cd
 8002084:	08002029 	.word	0x08002029
 8002088:	080020d7 	.word	0x080020d7
 800208c:	08002029 	.word	0x08002029
 8002090:	08002029 	.word	0x08002029
 8002094:	0800216d 	.word	0x0800216d
 8002098:	6833      	ldr	r3, [r6, #0]
 800209a:	1d1a      	adds	r2, r3, #4
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6032      	str	r2, [r6, #0]
 80020a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80020a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80020a8:	2301      	movs	r3, #1
 80020aa:	e09c      	b.n	80021e6 <_printf_i+0x1e6>
 80020ac:	6833      	ldr	r3, [r6, #0]
 80020ae:	6820      	ldr	r0, [r4, #0]
 80020b0:	1d19      	adds	r1, r3, #4
 80020b2:	6031      	str	r1, [r6, #0]
 80020b4:	0606      	lsls	r6, r0, #24
 80020b6:	d501      	bpl.n	80020bc <_printf_i+0xbc>
 80020b8:	681d      	ldr	r5, [r3, #0]
 80020ba:	e003      	b.n	80020c4 <_printf_i+0xc4>
 80020bc:	0645      	lsls	r5, r0, #25
 80020be:	d5fb      	bpl.n	80020b8 <_printf_i+0xb8>
 80020c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80020c4:	2d00      	cmp	r5, #0
 80020c6:	da03      	bge.n	80020d0 <_printf_i+0xd0>
 80020c8:	232d      	movs	r3, #45	@ 0x2d
 80020ca:	426d      	negs	r5, r5
 80020cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80020d0:	4858      	ldr	r0, [pc, #352]	@ (8002234 <_printf_i+0x234>)
 80020d2:	230a      	movs	r3, #10
 80020d4:	e011      	b.n	80020fa <_printf_i+0xfa>
 80020d6:	6821      	ldr	r1, [r4, #0]
 80020d8:	6833      	ldr	r3, [r6, #0]
 80020da:	0608      	lsls	r0, r1, #24
 80020dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80020e0:	d402      	bmi.n	80020e8 <_printf_i+0xe8>
 80020e2:	0649      	lsls	r1, r1, #25
 80020e4:	bf48      	it	mi
 80020e6:	b2ad      	uxthmi	r5, r5
 80020e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80020ea:	4852      	ldr	r0, [pc, #328]	@ (8002234 <_printf_i+0x234>)
 80020ec:	6033      	str	r3, [r6, #0]
 80020ee:	bf14      	ite	ne
 80020f0:	230a      	movne	r3, #10
 80020f2:	2308      	moveq	r3, #8
 80020f4:	2100      	movs	r1, #0
 80020f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80020fa:	6866      	ldr	r6, [r4, #4]
 80020fc:	60a6      	str	r6, [r4, #8]
 80020fe:	2e00      	cmp	r6, #0
 8002100:	db05      	blt.n	800210e <_printf_i+0x10e>
 8002102:	6821      	ldr	r1, [r4, #0]
 8002104:	432e      	orrs	r6, r5
 8002106:	f021 0104 	bic.w	r1, r1, #4
 800210a:	6021      	str	r1, [r4, #0]
 800210c:	d04b      	beq.n	80021a6 <_printf_i+0x1a6>
 800210e:	4616      	mov	r6, r2
 8002110:	fbb5 f1f3 	udiv	r1, r5, r3
 8002114:	fb03 5711 	mls	r7, r3, r1, r5
 8002118:	5dc7      	ldrb	r7, [r0, r7]
 800211a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800211e:	462f      	mov	r7, r5
 8002120:	42bb      	cmp	r3, r7
 8002122:	460d      	mov	r5, r1
 8002124:	d9f4      	bls.n	8002110 <_printf_i+0x110>
 8002126:	2b08      	cmp	r3, #8
 8002128:	d10b      	bne.n	8002142 <_printf_i+0x142>
 800212a:	6823      	ldr	r3, [r4, #0]
 800212c:	07df      	lsls	r7, r3, #31
 800212e:	d508      	bpl.n	8002142 <_printf_i+0x142>
 8002130:	6923      	ldr	r3, [r4, #16]
 8002132:	6861      	ldr	r1, [r4, #4]
 8002134:	4299      	cmp	r1, r3
 8002136:	bfde      	ittt	le
 8002138:	2330      	movle	r3, #48	@ 0x30
 800213a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800213e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002142:	1b92      	subs	r2, r2, r6
 8002144:	6122      	str	r2, [r4, #16]
 8002146:	f8cd a000 	str.w	sl, [sp]
 800214a:	464b      	mov	r3, r9
 800214c:	aa03      	add	r2, sp, #12
 800214e:	4621      	mov	r1, r4
 8002150:	4640      	mov	r0, r8
 8002152:	f7ff fee7 	bl	8001f24 <_printf_common>
 8002156:	3001      	adds	r0, #1
 8002158:	d14a      	bne.n	80021f0 <_printf_i+0x1f0>
 800215a:	f04f 30ff 	mov.w	r0, #4294967295
 800215e:	b004      	add	sp, #16
 8002160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002164:	6823      	ldr	r3, [r4, #0]
 8002166:	f043 0320 	orr.w	r3, r3, #32
 800216a:	6023      	str	r3, [r4, #0]
 800216c:	4832      	ldr	r0, [pc, #200]	@ (8002238 <_printf_i+0x238>)
 800216e:	2778      	movs	r7, #120	@ 0x78
 8002170:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002174:	6823      	ldr	r3, [r4, #0]
 8002176:	6831      	ldr	r1, [r6, #0]
 8002178:	061f      	lsls	r7, r3, #24
 800217a:	f851 5b04 	ldr.w	r5, [r1], #4
 800217e:	d402      	bmi.n	8002186 <_printf_i+0x186>
 8002180:	065f      	lsls	r7, r3, #25
 8002182:	bf48      	it	mi
 8002184:	b2ad      	uxthmi	r5, r5
 8002186:	6031      	str	r1, [r6, #0]
 8002188:	07d9      	lsls	r1, r3, #31
 800218a:	bf44      	itt	mi
 800218c:	f043 0320 	orrmi.w	r3, r3, #32
 8002190:	6023      	strmi	r3, [r4, #0]
 8002192:	b11d      	cbz	r5, 800219c <_printf_i+0x19c>
 8002194:	2310      	movs	r3, #16
 8002196:	e7ad      	b.n	80020f4 <_printf_i+0xf4>
 8002198:	4826      	ldr	r0, [pc, #152]	@ (8002234 <_printf_i+0x234>)
 800219a:	e7e9      	b.n	8002170 <_printf_i+0x170>
 800219c:	6823      	ldr	r3, [r4, #0]
 800219e:	f023 0320 	bic.w	r3, r3, #32
 80021a2:	6023      	str	r3, [r4, #0]
 80021a4:	e7f6      	b.n	8002194 <_printf_i+0x194>
 80021a6:	4616      	mov	r6, r2
 80021a8:	e7bd      	b.n	8002126 <_printf_i+0x126>
 80021aa:	6833      	ldr	r3, [r6, #0]
 80021ac:	6825      	ldr	r5, [r4, #0]
 80021ae:	6961      	ldr	r1, [r4, #20]
 80021b0:	1d18      	adds	r0, r3, #4
 80021b2:	6030      	str	r0, [r6, #0]
 80021b4:	062e      	lsls	r6, r5, #24
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	d501      	bpl.n	80021be <_printf_i+0x1be>
 80021ba:	6019      	str	r1, [r3, #0]
 80021bc:	e002      	b.n	80021c4 <_printf_i+0x1c4>
 80021be:	0668      	lsls	r0, r5, #25
 80021c0:	d5fb      	bpl.n	80021ba <_printf_i+0x1ba>
 80021c2:	8019      	strh	r1, [r3, #0]
 80021c4:	2300      	movs	r3, #0
 80021c6:	6123      	str	r3, [r4, #16]
 80021c8:	4616      	mov	r6, r2
 80021ca:	e7bc      	b.n	8002146 <_printf_i+0x146>
 80021cc:	6833      	ldr	r3, [r6, #0]
 80021ce:	1d1a      	adds	r2, r3, #4
 80021d0:	6032      	str	r2, [r6, #0]
 80021d2:	681e      	ldr	r6, [r3, #0]
 80021d4:	6862      	ldr	r2, [r4, #4]
 80021d6:	2100      	movs	r1, #0
 80021d8:	4630      	mov	r0, r6
 80021da:	f7fd fff9 	bl	80001d0 <memchr>
 80021de:	b108      	cbz	r0, 80021e4 <_printf_i+0x1e4>
 80021e0:	1b80      	subs	r0, r0, r6
 80021e2:	6060      	str	r0, [r4, #4]
 80021e4:	6863      	ldr	r3, [r4, #4]
 80021e6:	6123      	str	r3, [r4, #16]
 80021e8:	2300      	movs	r3, #0
 80021ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80021ee:	e7aa      	b.n	8002146 <_printf_i+0x146>
 80021f0:	6923      	ldr	r3, [r4, #16]
 80021f2:	4632      	mov	r2, r6
 80021f4:	4649      	mov	r1, r9
 80021f6:	4640      	mov	r0, r8
 80021f8:	47d0      	blx	sl
 80021fa:	3001      	adds	r0, #1
 80021fc:	d0ad      	beq.n	800215a <_printf_i+0x15a>
 80021fe:	6823      	ldr	r3, [r4, #0]
 8002200:	079b      	lsls	r3, r3, #30
 8002202:	d413      	bmi.n	800222c <_printf_i+0x22c>
 8002204:	68e0      	ldr	r0, [r4, #12]
 8002206:	9b03      	ldr	r3, [sp, #12]
 8002208:	4298      	cmp	r0, r3
 800220a:	bfb8      	it	lt
 800220c:	4618      	movlt	r0, r3
 800220e:	e7a6      	b.n	800215e <_printf_i+0x15e>
 8002210:	2301      	movs	r3, #1
 8002212:	4632      	mov	r2, r6
 8002214:	4649      	mov	r1, r9
 8002216:	4640      	mov	r0, r8
 8002218:	47d0      	blx	sl
 800221a:	3001      	adds	r0, #1
 800221c:	d09d      	beq.n	800215a <_printf_i+0x15a>
 800221e:	3501      	adds	r5, #1
 8002220:	68e3      	ldr	r3, [r4, #12]
 8002222:	9903      	ldr	r1, [sp, #12]
 8002224:	1a5b      	subs	r3, r3, r1
 8002226:	42ab      	cmp	r3, r5
 8002228:	dcf2      	bgt.n	8002210 <_printf_i+0x210>
 800222a:	e7eb      	b.n	8002204 <_printf_i+0x204>
 800222c:	2500      	movs	r5, #0
 800222e:	f104 0619 	add.w	r6, r4, #25
 8002232:	e7f5      	b.n	8002220 <_printf_i+0x220>
 8002234:	08002cc6 	.word	0x08002cc6
 8002238:	08002cd7 	.word	0x08002cd7

0800223c <__sflush_r>:
 800223c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002244:	0716      	lsls	r6, r2, #28
 8002246:	4605      	mov	r5, r0
 8002248:	460c      	mov	r4, r1
 800224a:	d454      	bmi.n	80022f6 <__sflush_r+0xba>
 800224c:	684b      	ldr	r3, [r1, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	dc02      	bgt.n	8002258 <__sflush_r+0x1c>
 8002252:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002254:	2b00      	cmp	r3, #0
 8002256:	dd48      	ble.n	80022ea <__sflush_r+0xae>
 8002258:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800225a:	2e00      	cmp	r6, #0
 800225c:	d045      	beq.n	80022ea <__sflush_r+0xae>
 800225e:	2300      	movs	r3, #0
 8002260:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002264:	682f      	ldr	r7, [r5, #0]
 8002266:	6a21      	ldr	r1, [r4, #32]
 8002268:	602b      	str	r3, [r5, #0]
 800226a:	d030      	beq.n	80022ce <__sflush_r+0x92>
 800226c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800226e:	89a3      	ldrh	r3, [r4, #12]
 8002270:	0759      	lsls	r1, r3, #29
 8002272:	d505      	bpl.n	8002280 <__sflush_r+0x44>
 8002274:	6863      	ldr	r3, [r4, #4]
 8002276:	1ad2      	subs	r2, r2, r3
 8002278:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800227a:	b10b      	cbz	r3, 8002280 <__sflush_r+0x44>
 800227c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800227e:	1ad2      	subs	r2, r2, r3
 8002280:	2300      	movs	r3, #0
 8002282:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002284:	6a21      	ldr	r1, [r4, #32]
 8002286:	4628      	mov	r0, r5
 8002288:	47b0      	blx	r6
 800228a:	1c43      	adds	r3, r0, #1
 800228c:	89a3      	ldrh	r3, [r4, #12]
 800228e:	d106      	bne.n	800229e <__sflush_r+0x62>
 8002290:	6829      	ldr	r1, [r5, #0]
 8002292:	291d      	cmp	r1, #29
 8002294:	d82b      	bhi.n	80022ee <__sflush_r+0xb2>
 8002296:	4a2a      	ldr	r2, [pc, #168]	@ (8002340 <__sflush_r+0x104>)
 8002298:	40ca      	lsrs	r2, r1
 800229a:	07d6      	lsls	r6, r2, #31
 800229c:	d527      	bpl.n	80022ee <__sflush_r+0xb2>
 800229e:	2200      	movs	r2, #0
 80022a0:	6062      	str	r2, [r4, #4]
 80022a2:	04d9      	lsls	r1, r3, #19
 80022a4:	6922      	ldr	r2, [r4, #16]
 80022a6:	6022      	str	r2, [r4, #0]
 80022a8:	d504      	bpl.n	80022b4 <__sflush_r+0x78>
 80022aa:	1c42      	adds	r2, r0, #1
 80022ac:	d101      	bne.n	80022b2 <__sflush_r+0x76>
 80022ae:	682b      	ldr	r3, [r5, #0]
 80022b0:	b903      	cbnz	r3, 80022b4 <__sflush_r+0x78>
 80022b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80022b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80022b6:	602f      	str	r7, [r5, #0]
 80022b8:	b1b9      	cbz	r1, 80022ea <__sflush_r+0xae>
 80022ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80022be:	4299      	cmp	r1, r3
 80022c0:	d002      	beq.n	80022c8 <__sflush_r+0x8c>
 80022c2:	4628      	mov	r0, r5
 80022c4:	f7ff fbde 	bl	8001a84 <_free_r>
 80022c8:	2300      	movs	r3, #0
 80022ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80022cc:	e00d      	b.n	80022ea <__sflush_r+0xae>
 80022ce:	2301      	movs	r3, #1
 80022d0:	4628      	mov	r0, r5
 80022d2:	47b0      	blx	r6
 80022d4:	4602      	mov	r2, r0
 80022d6:	1c50      	adds	r0, r2, #1
 80022d8:	d1c9      	bne.n	800226e <__sflush_r+0x32>
 80022da:	682b      	ldr	r3, [r5, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0c6      	beq.n	800226e <__sflush_r+0x32>
 80022e0:	2b1d      	cmp	r3, #29
 80022e2:	d001      	beq.n	80022e8 <__sflush_r+0xac>
 80022e4:	2b16      	cmp	r3, #22
 80022e6:	d11e      	bne.n	8002326 <__sflush_r+0xea>
 80022e8:	602f      	str	r7, [r5, #0]
 80022ea:	2000      	movs	r0, #0
 80022ec:	e022      	b.n	8002334 <__sflush_r+0xf8>
 80022ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022f2:	b21b      	sxth	r3, r3
 80022f4:	e01b      	b.n	800232e <__sflush_r+0xf2>
 80022f6:	690f      	ldr	r7, [r1, #16]
 80022f8:	2f00      	cmp	r7, #0
 80022fa:	d0f6      	beq.n	80022ea <__sflush_r+0xae>
 80022fc:	0793      	lsls	r3, r2, #30
 80022fe:	680e      	ldr	r6, [r1, #0]
 8002300:	bf08      	it	eq
 8002302:	694b      	ldreq	r3, [r1, #20]
 8002304:	600f      	str	r7, [r1, #0]
 8002306:	bf18      	it	ne
 8002308:	2300      	movne	r3, #0
 800230a:	eba6 0807 	sub.w	r8, r6, r7
 800230e:	608b      	str	r3, [r1, #8]
 8002310:	f1b8 0f00 	cmp.w	r8, #0
 8002314:	dde9      	ble.n	80022ea <__sflush_r+0xae>
 8002316:	6a21      	ldr	r1, [r4, #32]
 8002318:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800231a:	4643      	mov	r3, r8
 800231c:	463a      	mov	r2, r7
 800231e:	4628      	mov	r0, r5
 8002320:	47b0      	blx	r6
 8002322:	2800      	cmp	r0, #0
 8002324:	dc08      	bgt.n	8002338 <__sflush_r+0xfc>
 8002326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800232a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800232e:	81a3      	strh	r3, [r4, #12]
 8002330:	f04f 30ff 	mov.w	r0, #4294967295
 8002334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002338:	4407      	add	r7, r0
 800233a:	eba8 0800 	sub.w	r8, r8, r0
 800233e:	e7e7      	b.n	8002310 <__sflush_r+0xd4>
 8002340:	20400001 	.word	0x20400001

08002344 <_fflush_r>:
 8002344:	b538      	push	{r3, r4, r5, lr}
 8002346:	690b      	ldr	r3, [r1, #16]
 8002348:	4605      	mov	r5, r0
 800234a:	460c      	mov	r4, r1
 800234c:	b913      	cbnz	r3, 8002354 <_fflush_r+0x10>
 800234e:	2500      	movs	r5, #0
 8002350:	4628      	mov	r0, r5
 8002352:	bd38      	pop	{r3, r4, r5, pc}
 8002354:	b118      	cbz	r0, 800235e <_fflush_r+0x1a>
 8002356:	6a03      	ldr	r3, [r0, #32]
 8002358:	b90b      	cbnz	r3, 800235e <_fflush_r+0x1a>
 800235a:	f7ff f98b 	bl	8001674 <__sinit>
 800235e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f3      	beq.n	800234e <_fflush_r+0xa>
 8002366:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002368:	07d0      	lsls	r0, r2, #31
 800236a:	d404      	bmi.n	8002376 <_fflush_r+0x32>
 800236c:	0599      	lsls	r1, r3, #22
 800236e:	d402      	bmi.n	8002376 <_fflush_r+0x32>
 8002370:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002372:	f7ff fb84 	bl	8001a7e <__retarget_lock_acquire_recursive>
 8002376:	4628      	mov	r0, r5
 8002378:	4621      	mov	r1, r4
 800237a:	f7ff ff5f 	bl	800223c <__sflush_r>
 800237e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002380:	07da      	lsls	r2, r3, #31
 8002382:	4605      	mov	r5, r0
 8002384:	d4e4      	bmi.n	8002350 <_fflush_r+0xc>
 8002386:	89a3      	ldrh	r3, [r4, #12]
 8002388:	059b      	lsls	r3, r3, #22
 800238a:	d4e1      	bmi.n	8002350 <_fflush_r+0xc>
 800238c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800238e:	f7ff fb77 	bl	8001a80 <__retarget_lock_release_recursive>
 8002392:	e7dd      	b.n	8002350 <_fflush_r+0xc>

08002394 <__swhatbuf_r>:
 8002394:	b570      	push	{r4, r5, r6, lr}
 8002396:	460c      	mov	r4, r1
 8002398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800239c:	2900      	cmp	r1, #0
 800239e:	b096      	sub	sp, #88	@ 0x58
 80023a0:	4615      	mov	r5, r2
 80023a2:	461e      	mov	r6, r3
 80023a4:	da0d      	bge.n	80023c2 <__swhatbuf_r+0x2e>
 80023a6:	89a3      	ldrh	r3, [r4, #12]
 80023a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80023ac:	f04f 0100 	mov.w	r1, #0
 80023b0:	bf14      	ite	ne
 80023b2:	2340      	movne	r3, #64	@ 0x40
 80023b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80023b8:	2000      	movs	r0, #0
 80023ba:	6031      	str	r1, [r6, #0]
 80023bc:	602b      	str	r3, [r5, #0]
 80023be:	b016      	add	sp, #88	@ 0x58
 80023c0:	bd70      	pop	{r4, r5, r6, pc}
 80023c2:	466a      	mov	r2, sp
 80023c4:	f000 f862 	bl	800248c <_fstat_r>
 80023c8:	2800      	cmp	r0, #0
 80023ca:	dbec      	blt.n	80023a6 <__swhatbuf_r+0x12>
 80023cc:	9901      	ldr	r1, [sp, #4]
 80023ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80023d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80023d6:	4259      	negs	r1, r3
 80023d8:	4159      	adcs	r1, r3
 80023da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023de:	e7eb      	b.n	80023b8 <__swhatbuf_r+0x24>

080023e0 <__smakebuf_r>:
 80023e0:	898b      	ldrh	r3, [r1, #12]
 80023e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80023e4:	079d      	lsls	r5, r3, #30
 80023e6:	4606      	mov	r6, r0
 80023e8:	460c      	mov	r4, r1
 80023ea:	d507      	bpl.n	80023fc <__smakebuf_r+0x1c>
 80023ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80023f0:	6023      	str	r3, [r4, #0]
 80023f2:	6123      	str	r3, [r4, #16]
 80023f4:	2301      	movs	r3, #1
 80023f6:	6163      	str	r3, [r4, #20]
 80023f8:	b003      	add	sp, #12
 80023fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023fc:	ab01      	add	r3, sp, #4
 80023fe:	466a      	mov	r2, sp
 8002400:	f7ff ffc8 	bl	8002394 <__swhatbuf_r>
 8002404:	9f00      	ldr	r7, [sp, #0]
 8002406:	4605      	mov	r5, r0
 8002408:	4639      	mov	r1, r7
 800240a:	4630      	mov	r0, r6
 800240c:	f7ff fba6 	bl	8001b5c <_malloc_r>
 8002410:	b948      	cbnz	r0, 8002426 <__smakebuf_r+0x46>
 8002412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002416:	059a      	lsls	r2, r3, #22
 8002418:	d4ee      	bmi.n	80023f8 <__smakebuf_r+0x18>
 800241a:	f023 0303 	bic.w	r3, r3, #3
 800241e:	f043 0302 	orr.w	r3, r3, #2
 8002422:	81a3      	strh	r3, [r4, #12]
 8002424:	e7e2      	b.n	80023ec <__smakebuf_r+0xc>
 8002426:	89a3      	ldrh	r3, [r4, #12]
 8002428:	6020      	str	r0, [r4, #0]
 800242a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800242e:	81a3      	strh	r3, [r4, #12]
 8002430:	9b01      	ldr	r3, [sp, #4]
 8002432:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002436:	b15b      	cbz	r3, 8002450 <__smakebuf_r+0x70>
 8002438:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800243c:	4630      	mov	r0, r6
 800243e:	f000 f837 	bl	80024b0 <_isatty_r>
 8002442:	b128      	cbz	r0, 8002450 <__smakebuf_r+0x70>
 8002444:	89a3      	ldrh	r3, [r4, #12]
 8002446:	f023 0303 	bic.w	r3, r3, #3
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	81a3      	strh	r3, [r4, #12]
 8002450:	89a3      	ldrh	r3, [r4, #12]
 8002452:	431d      	orrs	r5, r3
 8002454:	81a5      	strh	r5, [r4, #12]
 8002456:	e7cf      	b.n	80023f8 <__smakebuf_r+0x18>

08002458 <memmove>:
 8002458:	4288      	cmp	r0, r1
 800245a:	b510      	push	{r4, lr}
 800245c:	eb01 0402 	add.w	r4, r1, r2
 8002460:	d902      	bls.n	8002468 <memmove+0x10>
 8002462:	4284      	cmp	r4, r0
 8002464:	4623      	mov	r3, r4
 8002466:	d807      	bhi.n	8002478 <memmove+0x20>
 8002468:	1e43      	subs	r3, r0, #1
 800246a:	42a1      	cmp	r1, r4
 800246c:	d008      	beq.n	8002480 <memmove+0x28>
 800246e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002472:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002476:	e7f8      	b.n	800246a <memmove+0x12>
 8002478:	4402      	add	r2, r0
 800247a:	4601      	mov	r1, r0
 800247c:	428a      	cmp	r2, r1
 800247e:	d100      	bne.n	8002482 <memmove+0x2a>
 8002480:	bd10      	pop	{r4, pc}
 8002482:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002486:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800248a:	e7f7      	b.n	800247c <memmove+0x24>

0800248c <_fstat_r>:
 800248c:	b538      	push	{r3, r4, r5, lr}
 800248e:	4d07      	ldr	r5, [pc, #28]	@ (80024ac <_fstat_r+0x20>)
 8002490:	2300      	movs	r3, #0
 8002492:	4604      	mov	r4, r0
 8002494:	4608      	mov	r0, r1
 8002496:	4611      	mov	r1, r2
 8002498:	602b      	str	r3, [r5, #0]
 800249a:	f7fe fcb0 	bl	8000dfe <_fstat>
 800249e:	1c43      	adds	r3, r0, #1
 80024a0:	d102      	bne.n	80024a8 <_fstat_r+0x1c>
 80024a2:	682b      	ldr	r3, [r5, #0]
 80024a4:	b103      	cbz	r3, 80024a8 <_fstat_r+0x1c>
 80024a6:	6023      	str	r3, [r4, #0]
 80024a8:	bd38      	pop	{r3, r4, r5, pc}
 80024aa:	bf00      	nop
 80024ac:	200004b0 	.word	0x200004b0

080024b0 <_isatty_r>:
 80024b0:	b538      	push	{r3, r4, r5, lr}
 80024b2:	4d06      	ldr	r5, [pc, #24]	@ (80024cc <_isatty_r+0x1c>)
 80024b4:	2300      	movs	r3, #0
 80024b6:	4604      	mov	r4, r0
 80024b8:	4608      	mov	r0, r1
 80024ba:	602b      	str	r3, [r5, #0]
 80024bc:	f7fe fcaf 	bl	8000e1e <_isatty>
 80024c0:	1c43      	adds	r3, r0, #1
 80024c2:	d102      	bne.n	80024ca <_isatty_r+0x1a>
 80024c4:	682b      	ldr	r3, [r5, #0]
 80024c6:	b103      	cbz	r3, 80024ca <_isatty_r+0x1a>
 80024c8:	6023      	str	r3, [r4, #0]
 80024ca:	bd38      	pop	{r3, r4, r5, pc}
 80024cc:	200004b0 	.word	0x200004b0

080024d0 <_sbrk_r>:
 80024d0:	b538      	push	{r3, r4, r5, lr}
 80024d2:	4d06      	ldr	r5, [pc, #24]	@ (80024ec <_sbrk_r+0x1c>)
 80024d4:	2300      	movs	r3, #0
 80024d6:	4604      	mov	r4, r0
 80024d8:	4608      	mov	r0, r1
 80024da:	602b      	str	r3, [r5, #0]
 80024dc:	f7fe fcb8 	bl	8000e50 <_sbrk>
 80024e0:	1c43      	adds	r3, r0, #1
 80024e2:	d102      	bne.n	80024ea <_sbrk_r+0x1a>
 80024e4:	682b      	ldr	r3, [r5, #0]
 80024e6:	b103      	cbz	r3, 80024ea <_sbrk_r+0x1a>
 80024e8:	6023      	str	r3, [r4, #0]
 80024ea:	bd38      	pop	{r3, r4, r5, pc}
 80024ec:	200004b0 	.word	0x200004b0

080024f0 <memcpy>:
 80024f0:	440a      	add	r2, r1
 80024f2:	4291      	cmp	r1, r2
 80024f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80024f8:	d100      	bne.n	80024fc <memcpy+0xc>
 80024fa:	4770      	bx	lr
 80024fc:	b510      	push	{r4, lr}
 80024fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002502:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002506:	4291      	cmp	r1, r2
 8002508:	d1f9      	bne.n	80024fe <memcpy+0xe>
 800250a:	bd10      	pop	{r4, pc}

0800250c <_realloc_r>:
 800250c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002510:	4607      	mov	r7, r0
 8002512:	4614      	mov	r4, r2
 8002514:	460d      	mov	r5, r1
 8002516:	b921      	cbnz	r1, 8002522 <_realloc_r+0x16>
 8002518:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800251c:	4611      	mov	r1, r2
 800251e:	f7ff bb1d 	b.w	8001b5c <_malloc_r>
 8002522:	b92a      	cbnz	r2, 8002530 <_realloc_r+0x24>
 8002524:	f7ff faae 	bl	8001a84 <_free_r>
 8002528:	4625      	mov	r5, r4
 800252a:	4628      	mov	r0, r5
 800252c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002530:	f000 f81a 	bl	8002568 <_malloc_usable_size_r>
 8002534:	4284      	cmp	r4, r0
 8002536:	4606      	mov	r6, r0
 8002538:	d802      	bhi.n	8002540 <_realloc_r+0x34>
 800253a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800253e:	d8f4      	bhi.n	800252a <_realloc_r+0x1e>
 8002540:	4621      	mov	r1, r4
 8002542:	4638      	mov	r0, r7
 8002544:	f7ff fb0a 	bl	8001b5c <_malloc_r>
 8002548:	4680      	mov	r8, r0
 800254a:	b908      	cbnz	r0, 8002550 <_realloc_r+0x44>
 800254c:	4645      	mov	r5, r8
 800254e:	e7ec      	b.n	800252a <_realloc_r+0x1e>
 8002550:	42b4      	cmp	r4, r6
 8002552:	4622      	mov	r2, r4
 8002554:	4629      	mov	r1, r5
 8002556:	bf28      	it	cs
 8002558:	4632      	movcs	r2, r6
 800255a:	f7ff ffc9 	bl	80024f0 <memcpy>
 800255e:	4629      	mov	r1, r5
 8002560:	4638      	mov	r0, r7
 8002562:	f7ff fa8f 	bl	8001a84 <_free_r>
 8002566:	e7f1      	b.n	800254c <_realloc_r+0x40>

08002568 <_malloc_usable_size_r>:
 8002568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800256c:	1f18      	subs	r0, r3, #4
 800256e:	2b00      	cmp	r3, #0
 8002570:	bfbc      	itt	lt
 8002572:	580b      	ldrlt	r3, [r1, r0]
 8002574:	18c0      	addlt	r0, r0, r3
 8002576:	4770      	bx	lr

08002578 <_init>:
 8002578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800257a:	bf00      	nop
 800257c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800257e:	bc08      	pop	{r3}
 8002580:	469e      	mov	lr, r3
 8002582:	4770      	bx	lr

08002584 <_fini>:
 8002584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002586:	bf00      	nop
 8002588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800258a:	bc08      	pop	{r3}
 800258c:	469e      	mov	lr, r3
 800258e:	4770      	bx	lr
