
Project2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002540  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b8  080026d0  080026d0  000036d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c88  08002c88  00004070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002c88  08002c88  00003c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c90  08002c90  00004070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c90  08002c90  00003c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002c94  08002c94  00003c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08002c98  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  20000070  08002d08  00004070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  08002d08  0000431c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000384e  00000000  00000000  000040a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ec0  00000000  00000000  000078ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000310  00000000  00000000  000087b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000021a  00000000  00000000  00008ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000268f2  00000000  00000000  00008cda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000056a0  00000000  00000000  0002f5cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e816c  00000000  00000000  00034c6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011cdd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001284  00000000  00000000  0011ce1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0011e0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080026b8 	.word	0x080026b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080026b8 	.word	0x080026b8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <LED_Init>:
// User LED = LD2 Green LED = PA.5
//******************************************************************************************
#define LED_PIN 5

void LED_Init(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
	// Enable the peripheral clock of GPIO Port
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80005ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000664 <LED_Init+0x7c>)
 80005ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f0:	4a1c      	ldr	r2, [pc, #112]	@ (8000664 <LED_Init+0x7c>)
 80005f2:	f043 0301 	orr.w	r3, r3, #1
 80005f6:	64d3      	str	r3, [r2, #76]	@ 0x4c

	// GPIO Mode: Input(00), Output(01), AlterFunc(10), Analog(11, reset)
	GPIOA->MODER &= ~(3U<<(2*LED_PIN));
 80005f8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000602:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000606:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 1U<<(2*LED_PIN);      //  Output(01)
 8000608:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000612:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000616:	6013      	str	r3, [r2, #0]

	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR &= ~(3U<<(2*LED_PIN));
 8000618:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800061c:	689b      	ldr	r3, [r3, #8]
 800061e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000622:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000626:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |=   3U<<(2*LED_PIN);  // High speed
 8000628:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800062c:	689b      	ldr	r3, [r3, #8]
 800062e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000632:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000636:	6093      	str	r3, [r2, #8]

	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1)
	GPIOA->OTYPER &= ~(1U<<LED_PIN);       // Push-pull
 8000638:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800063c:	685b      	ldr	r3, [r3, #4]
 800063e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000642:	f023 0320 	bic.w	r3, r3, #32
 8000646:	6053      	str	r3, [r2, #4]

	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3U<<(2*LED_PIN));  // No pull-up, no pull-down
 8000648:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800064c:	68db      	ldr	r3, [r3, #12]
 800064e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000652:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000656:	60d3      	str	r3, [r2, #12]
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	40021000 	.word	0x40021000

08000668 <clock_init>:


#include "stm32l476xx.h"

void clock_init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	// 1. Enable HSI (16 MHz internal oscillator)
	RCC->CR |= ((uint32_t)RCC_CR_HSION);
 800066c:	4b34      	ldr	r3, [pc, #208]	@ (8000740 <clock_init+0xd8>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a33      	ldr	r2, [pc, #204]	@ (8000740 <clock_init+0xd8>)
 8000672:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000676:	6013      	str	r3, [r2, #0]

    // wait until HSI is ready
    while ( (RCC->CR & (uint32_t) RCC_CR_HSIRDY) == 0 ) {;}
 8000678:	bf00      	nop
 800067a:	4b31      	ldr	r3, [pc, #196]	@ (8000740 <clock_init+0xd8>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000682:	2b00      	cmp	r3, #0
 8000684:	d0f9      	beq.n	800067a <clock_init+0x12>

    // 2. Configure Flash latency for 80 MHz
    FLASH->ACR |= FLASH_ACR_LATENCY_4WS;
 8000686:	4b2f      	ldr	r3, [pc, #188]	@ (8000744 <clock_init+0xdc>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a2e      	ldr	r2, [pc, #184]	@ (8000744 <clock_init+0xdc>)
 800068c:	f043 0304 	orr.w	r3, r3, #4
 8000690:	6013      	str	r3, [r2, #0]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLASH_ACR_LATENCY_4WS);
 8000692:	bf00      	nop
 8000694:	4b2b      	ldr	r3, [pc, #172]	@ (8000744 <clock_init+0xdc>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f003 0307 	and.w	r3, r3, #7
 800069c:	2b04      	cmp	r3, #4
 800069e:	d1f9      	bne.n	8000694 <clock_init+0x2c>

    // MP-Sept-25:
    //    // 3. ***** USE this code for PLL clock (80MHz) *****
    //
    // Disable PLL before config
    RCC->CR &= ~RCC_CR_PLLON;
 80006a0:	4b27      	ldr	r3, [pc, #156]	@ (8000740 <clock_init+0xd8>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a26      	ldr	r2, [pc, #152]	@ (8000740 <clock_init+0xd8>)
 80006a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80006aa:	6013      	str	r3, [r2, #0]
    while (RCC->CR & RCC_CR_PLLRDY);  // wait until PLL fully stops
 80006ac:	bf00      	nop
 80006ae:	4b24      	ldr	r3, [pc, #144]	@ (8000740 <clock_init+0xd8>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d1f9      	bne.n	80006ae <clock_init+0x46>

    // Configure PLL
    RCC->PLLCFGR = 0;
 80006ba:	4b21      	ldr	r3, [pc, #132]	@ (8000740 <clock_init+0xd8>)
 80006bc:	2200      	movs	r2, #0
 80006be:	60da      	str	r2, [r3, #12]
    RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI;    // source HSI16
 80006c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000740 <clock_init+0xd8>)
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	4a1e      	ldr	r2, [pc, #120]	@ (8000740 <clock_init+0xd8>)
 80006c6:	f043 0302 	orr.w	r3, r3, #2
 80006ca:	60d3      	str	r3, [r2, #12]
    RCC->PLLCFGR |= (1 << RCC_PLLCFGR_PLLM_Pos); // PLLM = 2 (divide by 2)
 80006cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000740 <clock_init+0xd8>)
 80006ce:	68db      	ldr	r3, [r3, #12]
 80006d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000740 <clock_init+0xd8>)
 80006d2:	f043 0310 	orr.w	r3, r3, #16
 80006d6:	60d3      	str	r3, [r2, #12]
    RCC->PLLCFGR |= (20 << RCC_PLLCFGR_PLLN_Pos); // PLLN = 20 (multiply by 20)
 80006d8:	4b19      	ldr	r3, [pc, #100]	@ (8000740 <clock_init+0xd8>)
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	4a18      	ldr	r2, [pc, #96]	@ (8000740 <clock_init+0xd8>)
 80006de:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 80006e2:	60d3      	str	r3, [r2, #12]
    RCC->PLLCFGR |= (0 << RCC_PLLCFGR_PLLR_Pos);  // PLLR = 2 (divide by 2)
 80006e4:	4b16      	ldr	r3, [pc, #88]	@ (8000740 <clock_init+0xd8>)
 80006e6:	4a16      	ldr	r2, [pc, #88]	@ (8000740 <clock_init+0xd8>)
 80006e8:	68db      	ldr	r3, [r3, #12]
 80006ea:	60d3      	str	r3, [r2, #12]
    RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN;           // Enable PLLR output
 80006ec:	4b14      	ldr	r3, [pc, #80]	@ (8000740 <clock_init+0xd8>)
 80006ee:	68db      	ldr	r3, [r3, #12]
 80006f0:	4a13      	ldr	r2, [pc, #76]	@ (8000740 <clock_init+0xd8>)
 80006f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80006f6:	60d3      	str	r3, [r2, #12]

    // Enable PLL
    RCC->CR |= RCC_CR_PLLON;
 80006f8:	4b11      	ldr	r3, [pc, #68]	@ (8000740 <clock_init+0xd8>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a10      	ldr	r2, [pc, #64]	@ (8000740 <clock_init+0xd8>)
 80006fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000702:	6013      	str	r3, [r2, #0]
    while ((RCC->CR & RCC_CR_PLLRDY) == 0);  // wait until PLL ready
 8000704:	bf00      	nop
 8000706:	4b0e      	ldr	r3, [pc, #56]	@ (8000740 <clock_init+0xd8>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800070e:	2b00      	cmp	r3, #0
 8000710:	d0f9      	beq.n	8000706 <clock_init+0x9e>

    // Select PLL as system clock source
    RCC->CFGR &= ~RCC_CFGR_SW;
 8000712:	4b0b      	ldr	r3, [pc, #44]	@ (8000740 <clock_init+0xd8>)
 8000714:	689b      	ldr	r3, [r3, #8]
 8000716:	4a0a      	ldr	r2, [pc, #40]	@ (8000740 <clock_init+0xd8>)
 8000718:	f023 0303 	bic.w	r3, r3, #3
 800071c:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;    // select PLL as system clock
 800071e:	4b08      	ldr	r3, [pc, #32]	@ (8000740 <clock_init+0xd8>)
 8000720:	689b      	ldr	r3, [r3, #8]
 8000722:	4a07      	ldr	r2, [pc, #28]	@ (8000740 <clock_init+0xd8>)
 8000724:	f043 0303 	orr.w	r3, r3, #3
 8000728:	6093      	str	r3, [r2, #8]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);  // wait for switch
 800072a:	bf00      	nop
 800072c:	4b04      	ldr	r3, [pc, #16]	@ (8000740 <clock_init+0xd8>)
 800072e:	689b      	ldr	r3, [r3, #8]
 8000730:	f003 030c 	and.w	r3, r3, #12
 8000734:	2b0c      	cmp	r3, #12
 8000736:	d1f9      	bne.n	800072c <clock_init+0xc4>
//
//    // 3. ***** USE this code for HSI clock (16MHz) *****


    // 4. Update System Clock to ensure its set correctly
    SystemCoreClockUpdate();
 8000738:	f000 fc72 	bl	8001020 <SystemCoreClockUpdate>
}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40021000 	.word	0x40021000
 8000744:	40022000 	.word	0x40022000

08000748 <delay_ms>:
static uint32_t num_pulses   = PULSES_DEFAULT;
static uint32_t lower_us     = LOWER_DEFAULT;
static uint32_t upper_us     = LOWER_DEFAULT + 100;

// crude delay for demos
static void delay_ms(uint32_t ms) {
 8000748:	b480      	push	{r7}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
    // use SysTick if you already set it; this is just a busy-wait fallback
    for (volatile uint32_t i = 0; i < (ms * 8000UL); ++i) __NOP(); // ~1ms @80MHz (rough)
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	e003      	b.n	800075e <delay_ms+0x16>
 8000756:	bf00      	nop
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	3301      	adds	r3, #1
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000764:	fb03 f202 	mul.w	r2, r3, r2
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	429a      	cmp	r2, r3
 800076c:	d8f3      	bhi.n	8000756 <delay_ms+0xe>
}
 800076e:	bf00      	nop
 8000770:	bf00      	nop
 8000772:	3714      	adds	r7, #20
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <init_systick>:

// This function is to Initialize SysTick registers
void init_systick()
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
	// Use the SysTick global structure pointer to do the following in this
	// exact order with separate lines for each step:
	//
	// Disable SysTick by clearing the CTRL (CSR) register.
	SysTick->CTRL = 0UL;
 8000780:	4b10      	ldr	r3, [pc, #64]	@ (80007c4 <init_systick+0x48>)
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]

	// Set the LOAD (RVR) to 15,999 to give us a 1 millisecond timer
	// System clock is 16MHz
	SysTick->LOAD |= (SysTick_LOAD_RELOAD_Msk & 15999UL);
 8000786:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <init_systick+0x48>)
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	4a0e      	ldr	r2, [pc, #56]	@ (80007c4 <init_systick+0x48>)
 800078c:	f443 5379 	orr.w	r3, r3, #15936	@ 0x3e40
 8000790:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8000794:	6053      	str	r3, [r2, #4]

	// Set the clock source bit in the CTRL (CSR) to the internal clock.
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 8000796:	4b0b      	ldr	r3, [pc, #44]	@ (80007c4 <init_systick+0x48>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a0a      	ldr	r2, [pc, #40]	@ (80007c4 <init_systick+0x48>)
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	6013      	str	r3, [r2, #0]

	// Enable the interrupt bit
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 80007a2:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <init_systick+0x48>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a07      	ldr	r2, [pc, #28]	@ (80007c4 <init_systick+0x48>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6013      	str	r3, [r2, #0]

	// Set the enable bit in the CTRL (CSR) to start the timer.
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk ;
 80007ae:	4b05      	ldr	r3, [pc, #20]	@ (80007c4 <init_systick+0x48>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a04      	ldr	r2, [pc, #16]	@ (80007c4 <init_systick+0x48>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6013      	str	r3, [r2, #0]
}
 80007ba:	bf00      	nop
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	e000e010 	.word	0xe000e010

080007c8 <SysTick_Handler>:

//******************************************************************************************
// This function is to handle SysTick Timer
//******************************************************************************************
void SysTick_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
	//In this example, we will have LED blinking at One second interval so first Update One Second Counter
	//three_second_counter++;
	one_second_counter++;
 80007cc:	4b0a      	ldr	r3, [pc, #40]	@ (80007f8 <SysTick_Handler+0x30>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	3301      	adds	r3, #1
 80007d2:	4a09      	ldr	r2, [pc, #36]	@ (80007f8 <SysTick_Handler+0x30>)
 80007d4:	6013      	str	r3, [r2, #0]

	// Set a global One second elapsed flag when the handler has been called 1000 times
	// Once flag is set, reset the counter
	if (one_second_counter == 1000)
 80007d6:	4b08      	ldr	r3, [pc, #32]	@ (80007f8 <SysTick_Handler+0x30>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80007de:	d105      	bne.n	80007ec <SysTick_Handler+0x24>
	{
		one_second_elapsed = true;
 80007e0:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <SysTick_Handler+0x34>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	701a      	strb	r2, [r3, #0]
		one_second_counter = 0;
 80007e6:	4b04      	ldr	r3, [pc, #16]	@ (80007f8 <SysTick_Handler+0x30>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
	}
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	20000090 	.word	0x20000090
 80007fc:	20000094 	.word	0x20000094

08000800 <parse_uint>:


static int parse_uint(const char *s, uint32_t *out){
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
 8000808:	6039      	str	r1, [r7, #0]
    if (!s || !*s) return 0;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d003      	beq.n	8000818 <parse_uint+0x18>
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d101      	bne.n	800081c <parse_uint+0x1c>
 8000818:	2300      	movs	r3, #0
 800081a:	e026      	b.n	800086a <parse_uint+0x6a>
    uint32_t v = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
    for (const char *p = s; *p; ++p){
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	e019      	b.n	800085a <parse_uint+0x5a>
        if (!isdigit((unsigned char)*p)) return 0;
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	3301      	adds	r3, #1
 800082c:	4a12      	ldr	r2, [pc, #72]	@ (8000878 <parse_uint+0x78>)
 800082e:	4413      	add	r3, r2
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	2b00      	cmp	r3, #0
 8000838:	d101      	bne.n	800083e <parse_uint+0x3e>
 800083a:	2300      	movs	r3, #0
 800083c:	e015      	b.n	800086a <parse_uint+0x6a>
        v = (uint32_t)(v*10u + (uint32_t)(*p - '0'));
 800083e:	68fa      	ldr	r2, [r7, #12]
 8000840:	4613      	mov	r3, r2
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	4413      	add	r3, r2
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	461a      	mov	r2, r3
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	4413      	add	r3, r2
 8000850:	3b30      	subs	r3, #48	@ 0x30
 8000852:	60fb      	str	r3, [r7, #12]
    for (const char *p = s; *p; ++p){
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	3301      	adds	r3, #1
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d1e1      	bne.n	8000826 <parse_uint+0x26>
    }
    *out = v;
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	68fa      	ldr	r2, [r7, #12]
 8000866:	601a      	str	r2, [r3, #0]
    return 1;
 8000868:	2301      	movs	r3, #1
}
 800086a:	4618      	mov	r0, r3
 800086c:	3714      	adds	r7, #20
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	08002b54 	.word	0x08002b54

0800087c <HAL_GPIO_EXTI_Callback>:

//******************************************************************************************
// This function is to handle interrupts generated because of pressing B1 switch
//******************************************************************************************
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8000886:	88fb      	ldrh	r3, [r7, #6]
 8000888:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800088c:	d117      	bne.n	80008be <HAL_GPIO_EXTI_Callback+0x42>
		// Add your code ---

		// If more than 3 second then Switch to Pattern Mode

		// Reset Switch time (in milliseconds)
		B1_Switch_Press_time_ms = 0;
 800088e:	4b0e      	ldr	r3, [pc, #56]	@ (80008c8 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]

		while(GPIO_PIN_RESET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 8000894:	e00b      	b.n	80008ae <HAL_GPIO_EXTI_Callback+0x32>
		{
			// Blocking code --

			// We can use SysTick Interrupt to keep track of time
			while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
 8000896:	bf00      	nop
 8000898:	4b0c      	ldr	r3, [pc, #48]	@ (80008cc <HAL_GPIO_EXTI_Callback+0x50>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d0f9      	beq.n	8000898 <HAL_GPIO_EXTI_Callback+0x1c>
			{
				// do nothing -- Blocking code -- 1ms timer
			}
			B1_Switch_Press_time_ms++;
 80008a4:	4b08      	ldr	r3, [pc, #32]	@ (80008c8 <HAL_GPIO_EXTI_Callback+0x4c>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	3301      	adds	r3, #1
 80008aa:	4a07      	ldr	r2, [pc, #28]	@ (80008c8 <HAL_GPIO_EXTI_Callback+0x4c>)
 80008ac:	6013      	str	r3, [r2, #0]
		while(GPIO_PIN_RESET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 80008ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008b2:	4807      	ldr	r0, [pc, #28]	@ (80008d0 <HAL_GPIO_EXTI_Callback+0x54>)
 80008b4:	f000 face 	bl	8000e54 <HAL_GPIO_ReadPin>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d0eb      	beq.n	8000896 <HAL_GPIO_EXTI_Callback+0x1a>

			// If we are in Auto mode and B1 Switch is Pressed for 3 Seconds or more then Switch to Pattern Mode
			// ---- Add your code
		}
	}
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	2000008c 	.word	0x2000008c
 80008cc:	e000e010 	.word	0xe000e010
 80008d0:	48000800 	.word	0x48000800

080008d4 <run_demo>:
//******************************************************************************************
// Run Demo -- main function with forever loop
//******************************************************************************************

void run_demo( void )
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0
	// Default mode is Auto Mode
	printf("%s\r\n", "*** AUTO MODE ***");
 80008da:	4995      	ldr	r1, [pc, #596]	@ (8000b30 <run_demo+0x25c>)
 80008dc:	4895      	ldr	r0, [pc, #596]	@ (8000b34 <run_demo+0x260>)
 80008de:	f000 fe93 	bl	8001608 <printf>

	// Set buffer for Command Buffer
	uint32_t input_index = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	617b      	str	r3, [r7, #20]
	memset(command_buffer, 0, 100);
 80008e6:	2264      	movs	r2, #100	@ 0x64
 80008e8:	2100      	movs	r1, #0
 80008ea:	4893      	ldr	r0, [pc, #588]	@ (8000b38 <run_demo+0x264>)
 80008ec:	f001 f8ee 	bl	8001acc <memset>

	// Start forever loop
	while(1)
	{
		// Read USART to see if USER typed any commands
		char one_char = USART_Read_NB(USART2);
 80008f0:	4892      	ldr	r0, [pc, #584]	@ (8000b3c <run_demo+0x268>)
 80008f2:	f000 fe13 	bl	800151c <USART_Read_NB>
 80008f6:	4603      	mov	r3, r0
 80008f8:	74fb      	strb	r3, [r7, #19]
		(void) one_char;	/// avoid compiler warning

		if(OP_MODE == AUTO_MODE){
 80008fa:	4b91      	ldr	r3, [pc, #580]	@ (8000b40 <run_demo+0x26c>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	f040 81be 	bne.w	8000c80 <run_demo+0x3ac>
		    switch (ui_state){
 8000904:	4b8f      	ldr	r3, [pc, #572]	@ (8000b44 <run_demo+0x270>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b05      	cmp	r3, #5
 800090a:	f200 81b9 	bhi.w	8000c80 <run_demo+0x3ac>
 800090e:	a201      	add	r2, pc, #4	@ (adr r2, 8000914 <run_demo+0x40>)
 8000910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000914:	0800092d 	.word	0x0800092d
 8000918:	080009af 	.word	0x080009af
 800091c:	08000aaf 	.word	0x08000aaf
 8000920:	08000c31 	.word	0x08000c31
 8000924:	08000c81 	.word	0x08000c81
 8000928:	08000c81 	.word	0x08000c81
		    	case UI_INIT:
					printf("%s\r\n", "\0");
 800092c:	4986      	ldr	r1, [pc, #536]	@ (8000b48 <run_demo+0x274>)
 800092e:	4881      	ldr	r0, [pc, #516]	@ (8000b34 <run_demo+0x260>)
 8000930:	f000 fe6a 	bl	8001608 <printf>
					printf("%s\r\n", "*** Default Number of Pulses to read ***");
 8000934:	4985      	ldr	r1, [pc, #532]	@ (8000b4c <run_demo+0x278>)
 8000936:	487f      	ldr	r0, [pc, #508]	@ (8000b34 <run_demo+0x260>)
 8000938:	f000 fe66 	bl	8001608 <printf>
					printf("  Number of pulses : %lu\r\n", (unsigned long)num_pulses);
 800093c:	4b84      	ldr	r3, [pc, #528]	@ (8000b50 <run_demo+0x27c>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4619      	mov	r1, r3
 8000942:	4884      	ldr	r0, [pc, #528]	@ (8000b54 <run_demo+0x280>)
 8000944:	f000 fe60 	bl	8001608 <printf>
					printf("%s\r\n", "*** Default Lower Limit of the pulse ***");
 8000948:	4983      	ldr	r1, [pc, #524]	@ (8000b58 <run_demo+0x284>)
 800094a:	487a      	ldr	r0, [pc, #488]	@ (8000b34 <run_demo+0x260>)
 800094c:	f000 fe5c 	bl	8001608 <printf>
					printf("  Lower limit (us) : %lu\r\n", (unsigned long)lower_us);
 8000950:	4b82      	ldr	r3, [pc, #520]	@ (8000b5c <run_demo+0x288>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4619      	mov	r1, r3
 8000956:	4882      	ldr	r0, [pc, #520]	@ (8000b60 <run_demo+0x28c>)
 8000958:	f000 fe56 	bl	8001608 <printf>
					printf("%s\r\n", "*** Default Upper Limit of the pulse ***");
 800095c:	4981      	ldr	r1, [pc, #516]	@ (8000b64 <run_demo+0x290>)
 800095e:	4875      	ldr	r0, [pc, #468]	@ (8000b34 <run_demo+0x260>)
 8000960:	f000 fe52 	bl	8001608 <printf>
					printf("  Upper limit (us) : %lu\r\n", (unsigned long)upper_us);
 8000964:	4b80      	ldr	r3, [pc, #512]	@ (8000b68 <run_demo+0x294>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4619      	mov	r1, r3
 800096a:	4880      	ldr	r0, [pc, #512]	@ (8000b6c <run_demo+0x298>)
 800096c:	f000 fe4c 	bl	8001608 <printf>
					printf("%s\r\n", "\0");
 8000970:	4975      	ldr	r1, [pc, #468]	@ (8000b48 <run_demo+0x274>)
 8000972:	4870      	ldr	r0, [pc, #448]	@ (8000b34 <run_demo+0x260>)
 8000974:	f000 fe48 	bl	8001608 <printf>
					memset(command_buffer, 0, 100);
 8000978:	2264      	movs	r2, #100	@ 0x64
 800097a:	2100      	movs	r1, #0
 800097c:	486e      	ldr	r0, [pc, #440]	@ (8000b38 <run_demo+0x264>)
 800097e:	f001 f8a5 	bl	8001acc <memset>
					input_index = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	617b      	str	r3, [r7, #20]
					ui_state = UI_PROMPT_PULSES;
 8000986:	4b6f      	ldr	r3, [pc, #444]	@ (8000b44 <run_demo+0x270>)
 8000988:	2201      	movs	r2, #1
 800098a:	701a      	strb	r2, [r3, #0]

					printf("%s\r\n", "\0");
 800098c:	496e      	ldr	r1, [pc, #440]	@ (8000b48 <run_demo+0x274>)
 800098e:	4869      	ldr	r0, [pc, #420]	@ (8000b34 <run_demo+0x260>)
 8000990:	f000 fe3a 	bl	8001608 <printf>
					printf("%s\r\n", "Entering UI_PROMPT_PULSES");
 8000994:	4976      	ldr	r1, [pc, #472]	@ (8000b70 <run_demo+0x29c>)
 8000996:	4867      	ldr	r0, [pc, #412]	@ (8000b34 <run_demo+0x260>)
 8000998:	f000 fe36 	bl	8001608 <printf>
					printf("%s\r\n", "*** TYPE Number of pulses then press enter, or enter for default***");
 800099c:	4975      	ldr	r1, [pc, #468]	@ (8000b74 <run_demo+0x2a0>)
 800099e:	4865      	ldr	r0, [pc, #404]	@ (8000b34 <run_demo+0x260>)
 80009a0:	f000 fe32 	bl	8001608 <printf>
					printf("%s\r\n", "\0");
 80009a4:	4968      	ldr	r1, [pc, #416]	@ (8000b48 <run_demo+0x274>)
 80009a6:	4863      	ldr	r0, [pc, #396]	@ (8000b34 <run_demo+0x260>)
 80009a8:	f000 fe2e 	bl	8001608 <printf>
					break;
 80009ac:	e168      	b.n	8000c80 <run_demo+0x3ac>
		    	case UI_PROMPT_PULSES:
					if (one_char == 0x0D){
 80009ae:	7cfb      	ldrb	r3, [r7, #19]
 80009b0:	2b0d      	cmp	r3, #13
 80009b2:	d164      	bne.n	8000a7e <run_demo+0x1aa>
						if (input_index == 0){
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d104      	bne.n	80009c4 <run_demo+0xf0>
							num_pulses = PULSES_DEFAULT;
 80009ba:	4b65      	ldr	r3, [pc, #404]	@ (8000b50 <run_demo+0x27c>)
 80009bc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	e033      	b.n	8000a2c <run_demo+0x158>
						}
						else {
							uint32_t v;
							parse_uint(command_buffer, &v);
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	4619      	mov	r1, r3
 80009c8:	485b      	ldr	r0, [pc, #364]	@ (8000b38 <run_demo+0x264>)
 80009ca:	f7ff ff19 	bl	8000800 <parse_uint>
							if (v >= PULSES_MIN && v <= PULSES_MAX && v != 0){
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2b63      	cmp	r3, #99	@ 0x63
 80009d2:	d90b      	bls.n	80009ec <run_demo+0x118>
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80009da:	4293      	cmp	r3, r2
 80009dc:	d806      	bhi.n	80009ec <run_demo+0x118>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d003      	beq.n	80009ec <run_demo+0x118>
								//valid
								num_pulses = v;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4a5a      	ldr	r2, [pc, #360]	@ (8000b50 <run_demo+0x27c>)
 80009e8:	6013      	str	r3, [r2, #0]
 80009ea:	e01f      	b.n	8000a2c <run_demo+0x158>
							}
							else {
								//invalid
								printf("%s\r\n", "\0");
 80009ec:	4956      	ldr	r1, [pc, #344]	@ (8000b48 <run_demo+0x274>)
 80009ee:	4851      	ldr	r0, [pc, #324]	@ (8000b34 <run_demo+0x260>)
 80009f0:	f000 fe0a 	bl	8001608 <printf>
								printf("%s\r\n", "*** invalid pulse chosen***");
 80009f4:	4960      	ldr	r1, [pc, #384]	@ (8000b78 <run_demo+0x2a4>)
 80009f6:	484f      	ldr	r0, [pc, #316]	@ (8000b34 <run_demo+0x260>)
 80009f8:	f000 fe06 	bl	8001608 <printf>
								printf("*** Limit of the pulse count [%u..%u] (default %u) ***\r\n", PULSES_MIN, PULSES_MAX, PULSES_DEFAULT);
 80009fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a00:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000a04:	2164      	movs	r1, #100	@ 0x64
 8000a06:	485d      	ldr	r0, [pc, #372]	@ (8000b7c <run_demo+0x2a8>)
 8000a08:	f000 fdfe 	bl	8001608 <printf>
								printf("%s\r\n", "*** TYPE Number of pulses then press enter, or enter for default***");
 8000a0c:	4959      	ldr	r1, [pc, #356]	@ (8000b74 <run_demo+0x2a0>)
 8000a0e:	4849      	ldr	r0, [pc, #292]	@ (8000b34 <run_demo+0x260>)
 8000a10:	f000 fdfa 	bl	8001608 <printf>
								printf("%s\r\n", "\0");
 8000a14:	494c      	ldr	r1, [pc, #304]	@ (8000b48 <run_demo+0x274>)
 8000a16:	4847      	ldr	r0, [pc, #284]	@ (8000b34 <run_demo+0x260>)
 8000a18:	f000 fdf6 	bl	8001608 <printf>
							    memset(command_buffer, 0, 100);
 8000a1c:	2264      	movs	r2, #100	@ 0x64
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4845      	ldr	r0, [pc, #276]	@ (8000b38 <run_demo+0x264>)
 8000a22:	f001 f853 	bl	8001acc <memset>
							    input_index = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]
 8000a2a:	e129      	b.n	8000c80 <run_demo+0x3ac>
							    break;
							}
						}
						printf("%s\r\n", "\0");
 8000a2c:	4946      	ldr	r1, [pc, #280]	@ (8000b48 <run_demo+0x274>)
 8000a2e:	4841      	ldr	r0, [pc, #260]	@ (8000b34 <run_demo+0x260>)
 8000a30:	f000 fdea 	bl	8001608 <printf>
						printf("  Number of pulses chosen : %lu\r\n", (unsigned long)num_pulses);
 8000a34:	4b46      	ldr	r3, [pc, #280]	@ (8000b50 <run_demo+0x27c>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4851      	ldr	r0, [pc, #324]	@ (8000b80 <run_demo+0x2ac>)
 8000a3c:	f000 fde4 	bl	8001608 <printf>
						printf("%s\r\n", "\0");
 8000a40:	4941      	ldr	r1, [pc, #260]	@ (8000b48 <run_demo+0x274>)
 8000a42:	483c      	ldr	r0, [pc, #240]	@ (8000b34 <run_demo+0x260>)
 8000a44:	f000 fde0 	bl	8001608 <printf>
						memset(command_buffer, 0, 100);
 8000a48:	2264      	movs	r2, #100	@ 0x64
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	483a      	ldr	r0, [pc, #232]	@ (8000b38 <run_demo+0x264>)
 8000a4e:	f001 f83d 	bl	8001acc <memset>
						input_index = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	617b      	str	r3, [r7, #20]
						ui_state = UI_PROMPT_LOWER;
 8000a56:	4b3b      	ldr	r3, [pc, #236]	@ (8000b44 <run_demo+0x270>)
 8000a58:	2202      	movs	r2, #2
 8000a5a:	701a      	strb	r2, [r3, #0]
						printf("%s\r\n", "\0");
 8000a5c:	493a      	ldr	r1, [pc, #232]	@ (8000b48 <run_demo+0x274>)
 8000a5e:	4835      	ldr	r0, [pc, #212]	@ (8000b34 <run_demo+0x260>)
 8000a60:	f000 fdd2 	bl	8001608 <printf>
						printf("%s\r\n", "Entering UI_PROMPT_LOWER");
 8000a64:	4947      	ldr	r1, [pc, #284]	@ (8000b84 <run_demo+0x2b0>)
 8000a66:	4833      	ldr	r0, [pc, #204]	@ (8000b34 <run_demo+0x260>)
 8000a68:	f000 fdce 	bl	8001608 <printf>
						printf("%s\r\n", "*** TYPE lower bound of pulses then press enter, or enter for default***");
 8000a6c:	4946      	ldr	r1, [pc, #280]	@ (8000b88 <run_demo+0x2b4>)
 8000a6e:	4831      	ldr	r0, [pc, #196]	@ (8000b34 <run_demo+0x260>)
 8000a70:	f000 fdca 	bl	8001608 <printf>
						printf("%s\r\n", "\0");
 8000a74:	4934      	ldr	r1, [pc, #208]	@ (8000b48 <run_demo+0x274>)
 8000a76:	482f      	ldr	r0, [pc, #188]	@ (8000b34 <run_demo+0x260>)
 8000a78:	f000 fdc6 	bl	8001608 <printf>
				} else if (one_char != '\0' && input_index < sizeof(command_buffer)-1) {
					command_buffer[input_index++] = one_char;
					command_buffer[input_index]   = '\0';
					printf("\r%s", command_buffer);
				}
				break;
 8000a7c:	e0fd      	b.n	8000c7a <run_demo+0x3a6>
				} else if (one_char != '\0' && input_index < sizeof(command_buffer)-1) {
 8000a7e:	7cfb      	ldrb	r3, [r7, #19]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	f000 80fa 	beq.w	8000c7a <run_demo+0x3a6>
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	2b62      	cmp	r3, #98	@ 0x62
 8000a8a:	f200 80f6 	bhi.w	8000c7a <run_demo+0x3a6>
					command_buffer[input_index++] = one_char;
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	1c5a      	adds	r2, r3, #1
 8000a92:	617a      	str	r2, [r7, #20]
 8000a94:	4928      	ldr	r1, [pc, #160]	@ (8000b38 <run_demo+0x264>)
 8000a96:	7cfa      	ldrb	r2, [r7, #19]
 8000a98:	54ca      	strb	r2, [r1, r3]
					command_buffer[input_index]   = '\0';
 8000a9a:	4a27      	ldr	r2, [pc, #156]	@ (8000b38 <run_demo+0x264>)
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	701a      	strb	r2, [r3, #0]
					printf("\r%s", command_buffer);
 8000aa4:	4924      	ldr	r1, [pc, #144]	@ (8000b38 <run_demo+0x264>)
 8000aa6:	4839      	ldr	r0, [pc, #228]	@ (8000b8c <run_demo+0x2b8>)
 8000aa8:	f000 fdae 	bl	8001608 <printf>
				break;
 8000aac:	e0e5      	b.n	8000c7a <run_demo+0x3a6>

		    case UI_PROMPT_LOWER:
		    	if (one_char == 0x0D){
 8000aae:	7cfb      	ldrb	r3, [r7, #19]
 8000ab0:	2b0d      	cmp	r3, #13
 8000ab2:	f040 80a7 	bne.w	8000c04 <run_demo+0x330>
		    		if (input_index == 0){
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d104      	bne.n	8000ac6 <run_demo+0x1f2>
		    			lower_us = LOWER_DEFAULT;
 8000abc:	4b27      	ldr	r3, [pc, #156]	@ (8000b5c <run_demo+0x288>)
 8000abe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	e06a      	b.n	8000b9c <run_demo+0x2c8>
		    		}
		    		else {
						uint32_t v;
						parse_uint(command_buffer, &v);
 8000ac6:	463b      	mov	r3, r7
 8000ac8:	4619      	mov	r1, r3
 8000aca:	481b      	ldr	r0, [pc, #108]	@ (8000b38 <run_demo+0x264>)
 8000acc:	f7ff fe98 	bl	8000800 <parse_uint>
						if (v >= LOWER_MIN_US && v <= LOWER_MAX_US && v != 0){
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	2b63      	cmp	r3, #99	@ 0x63
 8000ad4:	d90b      	bls.n	8000aee <run_demo+0x21a>
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	f242 3228 	movw	r2, #9000	@ 0x2328
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d806      	bhi.n	8000aee <run_demo+0x21a>
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d003      	beq.n	8000aee <run_demo+0x21a>
							//valid
							lower_us = v;
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	4a1c      	ldr	r2, [pc, #112]	@ (8000b5c <run_demo+0x288>)
 8000aea:	6013      	str	r3, [r2, #0]
 8000aec:	e056      	b.n	8000b9c <run_demo+0x2c8>
						}
						else {
							printf("%s\r\n", "\0");
 8000aee:	4916      	ldr	r1, [pc, #88]	@ (8000b48 <run_demo+0x274>)
 8000af0:	4810      	ldr	r0, [pc, #64]	@ (8000b34 <run_demo+0x260>)
 8000af2:	f000 fd89 	bl	8001608 <printf>
							printf("%s\r\n", "*** invalid pulse lower limit chosen***");
 8000af6:	4926      	ldr	r1, [pc, #152]	@ (8000b90 <run_demo+0x2bc>)
 8000af8:	480e      	ldr	r0, [pc, #56]	@ (8000b34 <run_demo+0x260>)
 8000afa:	f000 fd85 	bl	8001608 <printf>
		                    printf("*** Lower Limit of the pulse in microseconds [%u..%u] (default %u) ***\r\n", LOWER_MIN_US, LOWER_MAX_US, LOWER_DEFAULT);
 8000afe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b02:	f242 3228 	movw	r2, #9000	@ 0x2328
 8000b06:	2164      	movs	r1, #100	@ 0x64
 8000b08:	4822      	ldr	r0, [pc, #136]	@ (8000b94 <run_demo+0x2c0>)
 8000b0a:	f000 fd7d 	bl	8001608 <printf>
							printf("%s\r\n", "*** TYPE lower limit for pulses then press enter, or enter for default***");
 8000b0e:	4922      	ldr	r1, [pc, #136]	@ (8000b98 <run_demo+0x2c4>)
 8000b10:	4808      	ldr	r0, [pc, #32]	@ (8000b34 <run_demo+0x260>)
 8000b12:	f000 fd79 	bl	8001608 <printf>
							printf("%s\r\n", "\0");
 8000b16:	490c      	ldr	r1, [pc, #48]	@ (8000b48 <run_demo+0x274>)
 8000b18:	4806      	ldr	r0, [pc, #24]	@ (8000b34 <run_demo+0x260>)
 8000b1a:	f000 fd75 	bl	8001608 <printf>
							memset(command_buffer, 0, 100);
 8000b1e:	2264      	movs	r2, #100	@ 0x64
 8000b20:	2100      	movs	r1, #0
 8000b22:	4805      	ldr	r0, [pc, #20]	@ (8000b38 <run_demo+0x264>)
 8000b24:	f000 ffd2 	bl	8001acc <memset>
							input_index = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	617b      	str	r3, [r7, #20]
 8000b2c:	e0a8      	b.n	8000c80 <run_demo+0x3ac>
 8000b2e:	bf00      	nop
 8000b30:	080026d0 	.word	0x080026d0
 8000b34:	080026e4 	.word	0x080026e4
 8000b38:	20000098 	.word	0x20000098
 8000b3c:	40004400 	.word	0x40004400
 8000b40:	20000095 	.word	0x20000095
 8000b44:	20000096 	.word	0x20000096
 8000b48:	080026ec 	.word	0x080026ec
 8000b4c:	080026f0 	.word	0x080026f0
 8000b50:	20000000 	.word	0x20000000
 8000b54:	0800271c 	.word	0x0800271c
 8000b58:	08002738 	.word	0x08002738
 8000b5c:	20000004 	.word	0x20000004
 8000b60:	08002764 	.word	0x08002764
 8000b64:	08002780 	.word	0x08002780
 8000b68:	20000008 	.word	0x20000008
 8000b6c:	080027ac 	.word	0x080027ac
 8000b70:	080027c8 	.word	0x080027c8
 8000b74:	080027e4 	.word	0x080027e4
 8000b78:	08002828 	.word	0x08002828
 8000b7c:	08002844 	.word	0x08002844
 8000b80:	08002880 	.word	0x08002880
 8000b84:	080028a4 	.word	0x080028a4
 8000b88:	080028c0 	.word	0x080028c0
 8000b8c:	0800290c 	.word	0x0800290c
 8000b90:	08002910 	.word	0x08002910
 8000b94:	08002938 	.word	0x08002938
 8000b98:	08002984 	.word	0x08002984
							break;
						}
		    		}
					printf("%s\r\n", "\0");
 8000b9c:	4947      	ldr	r1, [pc, #284]	@ (8000cbc <run_demo+0x3e8>)
 8000b9e:	4848      	ldr	r0, [pc, #288]	@ (8000cc0 <run_demo+0x3ec>)
 8000ba0:	f000 fd32 	bl	8001608 <printf>
					printf("Minimum pulse chosen : %lu\r\n", (unsigned long)lower_us);
 8000ba4:	4b47      	ldr	r3, [pc, #284]	@ (8000cc4 <run_demo+0x3f0>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4847      	ldr	r0, [pc, #284]	@ (8000cc8 <run_demo+0x3f4>)
 8000bac:	f000 fd2c 	bl	8001608 <printf>
					upper_us = lower_us + 100;
 8000bb0:	4b44      	ldr	r3, [pc, #272]	@ (8000cc4 <run_demo+0x3f0>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	3364      	adds	r3, #100	@ 0x64
 8000bb6:	4a45      	ldr	r2, [pc, #276]	@ (8000ccc <run_demo+0x3f8>)
 8000bb8:	6013      	str	r3, [r2, #0]
					printf("Maximum pulse : %lu\r\n", (unsigned long)upper_us);
 8000bba:	4b44      	ldr	r3, [pc, #272]	@ (8000ccc <run_demo+0x3f8>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4843      	ldr	r0, [pc, #268]	@ (8000cd0 <run_demo+0x3fc>)
 8000bc2:	f000 fd21 	bl	8001608 <printf>
					printf("%s\r\n", "\0");
 8000bc6:	493d      	ldr	r1, [pc, #244]	@ (8000cbc <run_demo+0x3e8>)
 8000bc8:	483d      	ldr	r0, [pc, #244]	@ (8000cc0 <run_demo+0x3ec>)
 8000bca:	f000 fd1d 	bl	8001608 <printf>
					memset(command_buffer, 0, 100);
 8000bce:	2264      	movs	r2, #100	@ 0x64
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4840      	ldr	r0, [pc, #256]	@ (8000cd4 <run_demo+0x400>)
 8000bd4:	f000 ff7a 	bl	8001acc <memset>
					input_index = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
					ui_state = UI_CONFIRM;
 8000bdc:	4b3e      	ldr	r3, [pc, #248]	@ (8000cd8 <run_demo+0x404>)
 8000bde:	2203      	movs	r2, #3
 8000be0:	701a      	strb	r2, [r3, #0]
					printf("%s\r\n", "\0");
 8000be2:	4936      	ldr	r1, [pc, #216]	@ (8000cbc <run_demo+0x3e8>)
 8000be4:	4836      	ldr	r0, [pc, #216]	@ (8000cc0 <run_demo+0x3ec>)
 8000be6:	f000 fd0f 	bl	8001608 <printf>
					printf("%s\r\n", "Entering UI_CONFIRM");
 8000bea:	493c      	ldr	r1, [pc, #240]	@ (8000cdc <run_demo+0x408>)
 8000bec:	4834      	ldr	r0, [pc, #208]	@ (8000cc0 <run_demo+0x3ec>)
 8000bee:	f000 fd0b 	bl	8001608 <printf>
					printf("%s\r\n", "*** REVIEW SETTINGS ***");
 8000bf2:	493b      	ldr	r1, [pc, #236]	@ (8000ce0 <run_demo+0x40c>)
 8000bf4:	4832      	ldr	r0, [pc, #200]	@ (8000cc0 <run_demo+0x3ec>)
 8000bf6:	f000 fd07 	bl	8001608 <printf>
					printf("%s\r\n", "\0");
 8000bfa:	4930      	ldr	r1, [pc, #192]	@ (8000cbc <run_demo+0x3e8>)
 8000bfc:	4830      	ldr	r0, [pc, #192]	@ (8000cc0 <run_demo+0x3ec>)
 8000bfe:	f000 fd03 	bl	8001608 <printf>
		    	} else if (one_char != '\0' && input_index < sizeof(command_buffer)-1) {
					command_buffer[input_index++] = one_char;
					command_buffer[input_index]   = '\0';
					printf("\r%s", command_buffer);
				}
		    	break;
 8000c02:	e03c      	b.n	8000c7e <run_demo+0x3aa>
		    	} else if (one_char != '\0' && input_index < sizeof(command_buffer)-1) {
 8000c04:	7cfb      	ldrb	r3, [r7, #19]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d039      	beq.n	8000c7e <run_demo+0x3aa>
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	2b62      	cmp	r3, #98	@ 0x62
 8000c0e:	d836      	bhi.n	8000c7e <run_demo+0x3aa>
					command_buffer[input_index++] = one_char;
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	1c5a      	adds	r2, r3, #1
 8000c14:	617a      	str	r2, [r7, #20]
 8000c16:	492f      	ldr	r1, [pc, #188]	@ (8000cd4 <run_demo+0x400>)
 8000c18:	7cfa      	ldrb	r2, [r7, #19]
 8000c1a:	54ca      	strb	r2, [r1, r3]
					command_buffer[input_index]   = '\0';
 8000c1c:	4a2d      	ldr	r2, [pc, #180]	@ (8000cd4 <run_demo+0x400>)
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	4413      	add	r3, r2
 8000c22:	2200      	movs	r2, #0
 8000c24:	701a      	strb	r2, [r3, #0]
					printf("\r%s", command_buffer);
 8000c26:	492b      	ldr	r1, [pc, #172]	@ (8000cd4 <run_demo+0x400>)
 8000c28:	482e      	ldr	r0, [pc, #184]	@ (8000ce4 <run_demo+0x410>)
 8000c2a:	f000 fced 	bl	8001608 <printf>
		    	break;
 8000c2e:	e026      	b.n	8000c7e <run_demo+0x3aa>
		    case UI_CONFIRM:
		    	printf("%s\r\n", "\0");
 8000c30:	4922      	ldr	r1, [pc, #136]	@ (8000cbc <run_demo+0x3e8>)
 8000c32:	4823      	ldr	r0, [pc, #140]	@ (8000cc0 <run_demo+0x3ec>)
 8000c34:	f000 fce8 	bl	8001608 <printf>
		        printf("  Number of pulses : %lu\r\n", (unsigned long)num_pulses);
 8000c38:	4b2b      	ldr	r3, [pc, #172]	@ (8000ce8 <run_demo+0x414>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	482b      	ldr	r0, [pc, #172]	@ (8000cec <run_demo+0x418>)
 8000c40:	f000 fce2 	bl	8001608 <printf>
		        printf("  Lower limit (us) : %lu\r\n", (unsigned long)lower_us);
 8000c44:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc4 <run_demo+0x3f0>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4829      	ldr	r0, [pc, #164]	@ (8000cf0 <run_demo+0x41c>)
 8000c4c:	f000 fcdc 	bl	8001608 <printf>
		        printf("  Upper limit (us) : %lu  (lower + 100)\r\n", (unsigned long)upper_us);
 8000c50:	4b1e      	ldr	r3, [pc, #120]	@ (8000ccc <run_demo+0x3f8>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4619      	mov	r1, r3
 8000c56:	4827      	ldr	r0, [pc, #156]	@ (8000cf4 <run_demo+0x420>)
 8000c58:	f000 fcd6 	bl	8001608 <printf>
		        printf("\r\nPress Enter to START measurements...\r\n");
 8000c5c:	4826      	ldr	r0, [pc, #152]	@ (8000cf8 <run_demo+0x424>)
 8000c5e:	f000 fe35 	bl	80018cc <puts>
		        printf("%s\r\n", "Entering UI_WAIT_START");
 8000c62:	4926      	ldr	r1, [pc, #152]	@ (8000cfc <run_demo+0x428>)
 8000c64:	4816      	ldr	r0, [pc, #88]	@ (8000cc0 <run_demo+0x3ec>)
 8000c66:	f000 fccf 	bl	8001608 <printf>
		        printf("%s\r\n", "\0");
 8000c6a:	4914      	ldr	r1, [pc, #80]	@ (8000cbc <run_demo+0x3e8>)
 8000c6c:	4814      	ldr	r0, [pc, #80]	@ (8000cc0 <run_demo+0x3ec>)
 8000c6e:	f000 fccb 	bl	8001608 <printf>
		        ui_state = UI_WAIT_START;
 8000c72:	4b19      	ldr	r3, [pc, #100]	@ (8000cd8 <run_demo+0x404>)
 8000c74:	2204      	movs	r2, #4
 8000c76:	701a      	strb	r2, [r3, #0]
		    	break;
 8000c78:	e002      	b.n	8000c80 <run_demo+0x3ac>
				break;
 8000c7a:	bf00      	nop
 8000c7c:	e000      	b.n	8000c80 <run_demo+0x3ac>
		    	break;
 8000c7e:	bf00      	nop
		    }
		}
		// Switch between Modes

		// MP-Sept-25: Revised code for Input Capture Info, showing Period and Freq
		uint32_t ticks = TIM2_GetPeriodTicks(); // copy volatile safely
 8000c80:	f000 fbac 	bl	80013dc <TIM2_GetPeriodTicks>
 8000c84:	60f8      	str	r0, [r7, #12]
		if (ticks > 0)
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d013      	beq.n	8000cb4 <run_demo+0x3e0>
		{
			float freq = 1e6f / ticks;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	ee07 3a90 	vmov	s15, r3
 8000c92:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c96:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8000d00 <run_demo+0x42c>
 8000c9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c9e:	edc7 7a02 	vstr	s15, [r7, #8]
			printf("Period = %lu us, Freq = %.2f Hz\r\n", ticks, freq);
 8000ca2:	68b8      	ldr	r0, [r7, #8]
 8000ca4:	f7ff fc48 	bl	8000538 <__aeabi_f2d>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	460b      	mov	r3, r1
 8000cac:	68f9      	ldr	r1, [r7, #12]
 8000cae:	4815      	ldr	r0, [pc, #84]	@ (8000d04 <run_demo+0x430>)
 8000cb0:	f000 fcaa 	bl	8001608 <printf>
		}

		// MP-Sept-25: delay for demo only -- this is not required for Project as you will not be outputing anything until after
		// you have histogram is ready to display
		delay_ms(10);
 8000cb4:	200a      	movs	r0, #10
 8000cb6:	f7ff fd47 	bl	8000748 <delay_ms>
	{
 8000cba:	e619      	b.n	80008f0 <run_demo+0x1c>
 8000cbc:	080026ec 	.word	0x080026ec
 8000cc0:	080026e4 	.word	0x080026e4
 8000cc4:	20000004 	.word	0x20000004
 8000cc8:	080029d0 	.word	0x080029d0
 8000ccc:	20000008 	.word	0x20000008
 8000cd0:	080029f0 	.word	0x080029f0
 8000cd4:	20000098 	.word	0x20000098
 8000cd8:	20000096 	.word	0x20000096
 8000cdc:	08002a08 	.word	0x08002a08
 8000ce0:	08002a1c 	.word	0x08002a1c
 8000ce4:	0800290c 	.word	0x0800290c
 8000ce8:	20000000 	.word	0x20000000
 8000cec:	0800271c 	.word	0x0800271c
 8000cf0:	08002764 	.word	0x08002764
 8000cf4:	08002a34 	.word	0x08002a34
 8000cf8:	08002a60 	.word	0x08002a60
 8000cfc:	08002a88 	.word	0x08002a88
 8000d00:	49742400 	.word	0x49742400
 8000d04:	08002aa0 	.word	0x08002aa0

08000d08 <GPIO_Init>:

/*----------------------------------------------------------------------------*/
/* Configure GPIO                                                             */
/*----------------------------------------------------------------------------*/
void GPIO_Init(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
    // 1. Enable GPIO clocks
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;   // for LED (PA5), UART2 (PA2/PA3), TIM2_CH1 (PA0)
 8000d0c:	4b3e      	ldr	r3, [pc, #248]	@ (8000e08 <GPIO_Init+0x100>)
 8000d0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d10:	4a3d      	ldr	r2, [pc, #244]	@ (8000e08 <GPIO_Init+0x100>)
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	64d3      	str	r3, [r2, #76]	@ 0x4c
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;   // for User Button (PC13)
 8000d18:	4b3b      	ldr	r3, [pc, #236]	@ (8000e08 <GPIO_Init+0x100>)
 8000d1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1c:	4a3a      	ldr	r2, [pc, #232]	@ (8000e08 <GPIO_Init+0x100>)
 8000d1e:	f043 0304 	orr.w	r3, r3, #4
 8000d22:	64d3      	str	r3, [r2, #76]	@ 0x4c

    // ----------------------------
    // Configure PA5: User LED
    // ----------------------------
    GPIOA->MODER &= ~(3u << (5*2));        // clear mode bits
 8000d24:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d2e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000d32:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (1u << (5*2));        // 01 = output
 8000d34:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d42:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER &= ~(1u << 5);           // 0 = push-pull
 8000d44:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d4e:	f023 0320 	bic.w	r3, r3, #32
 8000d52:	6053      	str	r3, [r2, #4]
    GPIOA->OSPEEDR |=  (3u << (5*2));      // very high speed
 8000d54:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d5e:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000d62:	6093      	str	r3, [r2, #8]
    GPIOA->PUPDR &= ~(3u << (5*2));        // no pull
 8000d64:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d6e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000d72:	60d3      	str	r3, [r2, #12]

    // ----------------------------
    // Configure PC13: User Button
    // ----------------------------
    GPIOC->MODER &= ~(3u << (13*2));       // 00 = input
 8000d74:	4b25      	ldr	r3, [pc, #148]	@ (8000e0c <GPIO_Init+0x104>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a24      	ldr	r2, [pc, #144]	@ (8000e0c <GPIO_Init+0x104>)
 8000d7a:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000d7e:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR &= ~(3u << (13*2));       // no pull (Nucleo board already has ext pull-up)
 8000d80:	4b22      	ldr	r3, [pc, #136]	@ (8000e0c <GPIO_Init+0x104>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	4a21      	ldr	r2, [pc, #132]	@ (8000e0c <GPIO_Init+0x104>)
 8000d86:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000d8a:	60d3      	str	r3, [r2, #12]

    // ----------------------------
    // Configure PA0: TIM2_CH1 input capture
    // ----------------------------
    GPIOA->MODER &= ~(3u << (0*2));
 8000d8c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000d96:	f023 0303 	bic.w	r3, r3, #3
 8000d9a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (2u << (0*2));        					// 10 = alternate function
 8000d9c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000da6:	f043 0302 	orr.w	r3, r3, #2
 8000daa:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~(0xFu << (0*4));
 8000dac:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000db0:	6a1b      	ldr	r3, [r3, #32]
 8000db2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000db6:	f023 030f 	bic.w	r3, r3, #15
 8000dba:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=  (0x1u << (0*4));     					// AF1 = TIM2_CH1
 8000dbc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000dc0:	6a1b      	ldr	r3, [r3, #32]
 8000dc2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000dc6:	f043 0301 	orr.w	r3, r3, #1
 8000dca:	6213      	str	r3, [r2, #32]
    GPIOA->OSPEEDR |=  (3u << (0*2));      					// very high speed
 8000dcc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000dd6:	f043 0303 	orr.w	r3, r3, #3
 8000dda:	6093      	str	r3, [r2, #8]
    GPIOA->PUPDR   &= ~(3u << (0*2));
 8000ddc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000de0:	68db      	ldr	r3, [r3, #12]
 8000de2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000de6:	f023 0303 	bic.w	r3, r3, #3
 8000dea:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (2u << (0*2));      					// pull-down → avoids floating input when no signal
 8000dec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000df0:	68db      	ldr	r3, [r3, #12]
 8000df2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000df6:	f043 0302 	orr.w	r3, r3, #2
 8000dfa:	60d3      	str	r3, [r2, #12]
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	48000800 	.word	0x48000800

08000e10 <EXTI15_10_IRQHandler>:

//******************************************************************************************
// This function is to handle GPIO Extended Interrupt
//******************************************************************************************
void EXTI15_10_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000e14:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000e18:	f000 f834 	bl	8000e84 <HAL_GPIO_EXTI_IRQHandler>
}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <main>:
#include "timer.h"			// Timer module

	
// Default Entry Point
int main(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
	// initialization Clock, LED, SysTick, USART and GPIO Modules
	clock_init();
 8000e24:	f7ff fc20 	bl	8000668 <clock_init>
	GPIO_Init();
 8000e28:	f7ff ff6e 	bl	8000d08 <GPIO_Init>
	init_systick();
 8000e2c:	f7ff fca6 	bl	800077c <init_systick>
	USART2_Init(115200);
 8000e30:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 8000e34:	f000 fade 	bl	80013f4 <USART2_Init>
	USART2_WriteString("Complete Clock, GPIO and UART config!\r\n");
 8000e38:	4805      	ldr	r0, [pc, #20]	@ (8000e50 <main+0x30>)
 8000e3a:	f000 fbcf 	bl	80015dc <USART2_WriteString>
	LED_Init();
 8000e3e:	f7ff fbd3 	bl	80005e8 <LED_Init>
	// Timer Initialization for Project 2
    TIM2_Init();
 8000e42:	f000 fa01 	bl	8001248 <TIM2_Init>

	// Run Demo
	run_demo();
 8000e46:	f7ff fd45 	bl	80008d4 <run_demo>
 8000e4a:	2300      	movs	r3, #0
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	08002ac4 	.word	0x08002ac4

08000e54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	691a      	ldr	r2, [r3, #16]
 8000e64:	887b      	ldrh	r3, [r7, #2]
 8000e66:	4013      	ands	r3, r2
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d002      	beq.n	8000e72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	73fb      	strb	r3, [r7, #15]
 8000e70:	e001      	b.n	8000e76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e72:	2300      	movs	r3, #0
 8000e74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e8e:	4b08      	ldr	r3, [pc, #32]	@ (8000eb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e90:	695a      	ldr	r2, [r3, #20]
 8000e92:	88fb      	ldrh	r3, [r7, #6]
 8000e94:	4013      	ands	r3, r2
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d006      	beq.n	8000ea8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e9a:	4a05      	ldr	r2, [pc, #20]	@ (8000eb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e9c:	88fb      	ldrh	r3, [r7, #6]
 8000e9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fcea 	bl	800087c <HAL_GPIO_EXTI_Callback>
  }
}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40010400 	.word	0x40010400

08000eb4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
 8000ec4:	e00a      	b.n	8000edc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ec6:	f3af 8000 	nop.w
 8000eca:	4601      	mov	r1, r0
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	1c5a      	adds	r2, r3, #1
 8000ed0:	60ba      	str	r2, [r7, #8]
 8000ed2:	b2ca      	uxtb	r2, r1
 8000ed4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	617b      	str	r3, [r7, #20]
 8000edc:	697a      	ldr	r2, [r7, #20]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	dbf0      	blt.n	8000ec6 <_read+0x12>
	}

return len;
 8000ee4:	687b      	ldr	r3, [r7, #4]
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3718      	adds	r7, #24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b086      	sub	sp, #24
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	60f8      	str	r0, [r7, #12]
 8000ef6:	60b9      	str	r1, [r7, #8]
 8000ef8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	617b      	str	r3, [r7, #20]
 8000efe:	e009      	b.n	8000f14 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	1c5a      	adds	r2, r3, #1
 8000f04:	60ba      	str	r2, [r7, #8]
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	3301      	adds	r3, #1
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	697a      	ldr	r2, [r7, #20]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	dbf1      	blt.n	8000f00 <_write+0x12>
	}
	return len;
 8000f1c:	687b      	ldr	r3, [r7, #4]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <_close>:

int _close(int file)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b083      	sub	sp, #12
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
	return -1;
 8000f2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	b083      	sub	sp, #12
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
 8000f46:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f4e:	605a      	str	r2, [r3, #4]
	return 0;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <_isatty>:

int _isatty(int file)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b083      	sub	sp, #12
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
	return 1;
 8000f66:	2301      	movs	r3, #1
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
	return 0;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
	...

08000f90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f98:	4a14      	ldr	r2, [pc, #80]	@ (8000fec <_sbrk+0x5c>)
 8000f9a:	4b15      	ldr	r3, [pc, #84]	@ (8000ff0 <_sbrk+0x60>)
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa4:	4b13      	ldr	r3, [pc, #76]	@ (8000ff4 <_sbrk+0x64>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d102      	bne.n	8000fb2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fac:	4b11      	ldr	r3, [pc, #68]	@ (8000ff4 <_sbrk+0x64>)
 8000fae:	4a12      	ldr	r2, [pc, #72]	@ (8000ff8 <_sbrk+0x68>)
 8000fb0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fb2:	4b10      	ldr	r3, [pc, #64]	@ (8000ff4 <_sbrk+0x64>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4413      	add	r3, r2
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d207      	bcs.n	8000fd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fc0:	f000 fdd2 	bl	8001b68 <__errno>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fca:	f04f 33ff 	mov.w	r3, #4294967295
 8000fce:	e009      	b.n	8000fe4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fd0:	4b08      	ldr	r3, [pc, #32]	@ (8000ff4 <_sbrk+0x64>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fd6:	4b07      	ldr	r3, [pc, #28]	@ (8000ff4 <_sbrk+0x64>)
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4413      	add	r3, r2
 8000fde:	4a05      	ldr	r2, [pc, #20]	@ (8000ff4 <_sbrk+0x64>)
 8000fe0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3718      	adds	r7, #24
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20018000 	.word	0x20018000
 8000ff0:	00000400 	.word	0x00000400
 8000ff4:	200000fc 	.word	0x200000fc
 8000ff8:	20000320 	.word	0x20000320

08000ffc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001000:	4b06      	ldr	r3, [pc, #24]	@ (800101c <SystemInit+0x20>)
 8001002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001006:	4a05      	ldr	r2, [pc, #20]	@ (800101c <SystemInit+0x20>)
 8001008:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800100c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001020:	b480      	push	{r7}
 8001022:	b087      	sub	sp, #28
 8001024:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if ((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8001026:	4b4f      	ldr	r3, [pc, #316]	@ (8001164 <SystemCoreClockUpdate+0x144>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0308 	and.w	r3, r3, #8
 800102e:	2b00      	cmp	r3, #0
 8001030:	d107      	bne.n	8001042 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8001032:	4b4c      	ldr	r3, [pc, #304]	@ (8001164 <SystemCoreClockUpdate+0x144>)
 8001034:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001038:	0a1b      	lsrs	r3, r3, #8
 800103a:	f003 030f 	and.w	r3, r3, #15
 800103e:	617b      	str	r3, [r7, #20]
 8001040:	e005      	b.n	800104e <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8001042:	4b48      	ldr	r3, [pc, #288]	@ (8001164 <SystemCoreClockUpdate+0x144>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	091b      	lsrs	r3, r3, #4
 8001048:	f003 030f 	and.w	r3, r3, #15
 800104c:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800104e:	4a46      	ldr	r2, [pc, #280]	@ (8001168 <SystemCoreClockUpdate+0x148>)
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001056:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001058:	4b42      	ldr	r3, [pc, #264]	@ (8001164 <SystemCoreClockUpdate+0x144>)
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	f003 030c 	and.w	r3, r3, #12
 8001060:	2b0c      	cmp	r3, #12
 8001062:	d866      	bhi.n	8001132 <SystemCoreClockUpdate+0x112>
 8001064:	a201      	add	r2, pc, #4	@ (adr r2, 800106c <SystemCoreClockUpdate+0x4c>)
 8001066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800106a:	bf00      	nop
 800106c:	080010a1 	.word	0x080010a1
 8001070:	08001133 	.word	0x08001133
 8001074:	08001133 	.word	0x08001133
 8001078:	08001133 	.word	0x08001133
 800107c:	080010a9 	.word	0x080010a9
 8001080:	08001133 	.word	0x08001133
 8001084:	08001133 	.word	0x08001133
 8001088:	08001133 	.word	0x08001133
 800108c:	080010b1 	.word	0x080010b1
 8001090:	08001133 	.word	0x08001133
 8001094:	08001133 	.word	0x08001133
 8001098:	08001133 	.word	0x08001133
 800109c:	080010b9 	.word	0x080010b9
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80010a0:	4a32      	ldr	r2, [pc, #200]	@ (800116c <SystemCoreClockUpdate+0x14c>)
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	6013      	str	r3, [r2, #0]
      break;
 80010a6:	e048      	b.n	800113a <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80010a8:	4b30      	ldr	r3, [pc, #192]	@ (800116c <SystemCoreClockUpdate+0x14c>)
 80010aa:	4a31      	ldr	r2, [pc, #196]	@ (8001170 <SystemCoreClockUpdate+0x150>)
 80010ac:	601a      	str	r2, [r3, #0]
      break;
 80010ae:	e044      	b.n	800113a <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80010b0:	4b2e      	ldr	r3, [pc, #184]	@ (800116c <SystemCoreClockUpdate+0x14c>)
 80010b2:	4a30      	ldr	r2, [pc, #192]	@ (8001174 <SystemCoreClockUpdate+0x154>)
 80010b4:	601a      	str	r2, [r3, #0]
      break;
 80010b6:	e040      	b.n	800113a <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80010b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001164 <SystemCoreClockUpdate+0x144>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	f003 0303 	and.w	r3, r3, #3
 80010c0:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80010c2:	4b28      	ldr	r3, [pc, #160]	@ (8001164 <SystemCoreClockUpdate+0x144>)
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	091b      	lsrs	r3, r3, #4
 80010c8:	f003 0307 	and.w	r3, r3, #7
 80010cc:	3301      	adds	r3, #1
 80010ce:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d003      	beq.n	80010de <SystemCoreClockUpdate+0xbe>
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	2b03      	cmp	r3, #3
 80010da:	d006      	beq.n	80010ea <SystemCoreClockUpdate+0xca>
 80010dc:	e00b      	b.n	80010f6 <SystemCoreClockUpdate+0xd6>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 80010de:	4a24      	ldr	r2, [pc, #144]	@ (8001170 <SystemCoreClockUpdate+0x150>)
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e6:	613b      	str	r3, [r7, #16]
          break;
 80010e8:	e00b      	b.n	8001102 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80010ea:	4a22      	ldr	r2, [pc, #136]	@ (8001174 <SystemCoreClockUpdate+0x154>)
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f2:	613b      	str	r3, [r7, #16]
          break;
 80010f4:	e005      	b.n	8001102 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80010f6:	697a      	ldr	r2, [r7, #20]
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fe:	613b      	str	r3, [r7, #16]
          break;
 8001100:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8001102:	4b18      	ldr	r3, [pc, #96]	@ (8001164 <SystemCoreClockUpdate+0x144>)
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	0a1b      	lsrs	r3, r3, #8
 8001108:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	fb02 f303 	mul.w	r3, r2, r3
 8001112:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001114:	4b13      	ldr	r3, [pc, #76]	@ (8001164 <SystemCoreClockUpdate+0x144>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	0e5b      	lsrs	r3, r3, #25
 800111a:	f003 0303 	and.w	r3, r3, #3
 800111e:	3301      	adds	r3, #1
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	fbb2 f3f3 	udiv	r3, r2, r3
 800112c:	4a0f      	ldr	r2, [pc, #60]	@ (800116c <SystemCoreClockUpdate+0x14c>)
 800112e:	6013      	str	r3, [r2, #0]
      break;
 8001130:	e003      	b.n	800113a <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8001132:	4a0e      	ldr	r2, [pc, #56]	@ (800116c <SystemCoreClockUpdate+0x14c>)
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	6013      	str	r3, [r2, #0]
      break;
 8001138:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800113a:	4b0a      	ldr	r3, [pc, #40]	@ (8001164 <SystemCoreClockUpdate+0x144>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	091b      	lsrs	r3, r3, #4
 8001140:	f003 030f 	and.w	r3, r3, #15
 8001144:	4a0c      	ldr	r2, [pc, #48]	@ (8001178 <SystemCoreClockUpdate+0x158>)
 8001146:	5cd3      	ldrb	r3, [r2, r3]
 8001148:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800114a:	4b08      	ldr	r3, [pc, #32]	@ (800116c <SystemCoreClockUpdate+0x14c>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	fa22 f303 	lsr.w	r3, r2, r3
 8001154:	4a05      	ldr	r2, [pc, #20]	@ (800116c <SystemCoreClockUpdate+0x14c>)
 8001156:	6013      	str	r3, [r2, #0]
}
 8001158:	bf00      	nop
 800115a:	371c      	adds	r7, #28
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr
 8001164:	40021000 	.word	0x40021000
 8001168:	08002b24 	.word	0x08002b24
 800116c:	2000000c 	.word	0x2000000c
 8001170:	00f42400 	.word	0x00f42400
 8001174:	007a1200 	.word	0x007a1200
 8001178:	08002b14 	.word	0x08002b14

0800117c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	2b00      	cmp	r3, #0
 800118c:	db0b      	blt.n	80011a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	f003 021f 	and.w	r2, r3, #31
 8001194:	4907      	ldr	r1, [pc, #28]	@ (80011b4 <__NVIC_EnableIRQ+0x38>)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	095b      	lsrs	r3, r3, #5
 800119c:	2001      	movs	r0, #1
 800119e:	fa00 f202 	lsl.w	r2, r0, r2
 80011a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e000e100 	.word	0xe000e100

080011b8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	db0c      	blt.n	80011e4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	f003 021f 	and.w	r2, r3, #31
 80011d0:	4907      	ldr	r1, [pc, #28]	@ (80011f0 <__NVIC_ClearPendingIRQ+0x38>)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	095b      	lsrs	r3, r3, #5
 80011d8:	2001      	movs	r0, #1
 80011da:	fa00 f202 	lsl.w	r2, r0, r2
 80011de:	3360      	adds	r3, #96	@ 0x60
 80011e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000e100 	.word	0xe000e100

080011f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	6039      	str	r1, [r7, #0]
 80011fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001200:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001204:	2b00      	cmp	r3, #0
 8001206:	db0a      	blt.n	800121e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	b2da      	uxtb	r2, r3
 800120c:	490c      	ldr	r1, [pc, #48]	@ (8001240 <__NVIC_SetPriority+0x4c>)
 800120e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001212:	0112      	lsls	r2, r2, #4
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	440b      	add	r3, r1
 8001218:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800121c:	e00a      	b.n	8001234 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4908      	ldr	r1, [pc, #32]	@ (8001244 <__NVIC_SetPriority+0x50>)
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	f003 030f 	and.w	r3, r3, #15
 800122a:	3b04      	subs	r3, #4
 800122c:	0112      	lsls	r2, r2, #4
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	440b      	add	r3, r1
 8001232:	761a      	strb	r2, [r3, #24]
}
 8001234:	bf00      	nop
 8001236:	370c      	adds	r7, #12
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000e100 	.word	0xe000e100
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <TIM2_Init>:

//******************************************************************************************
// This function is to Initialize Timer 2
//******************************************************************************************
void TIM2_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
	// reset TIM2 before configuration
	RCC->APB1RSTR1 |= RCC_APB1RSTR1_TIM2RST;
 800124e:	4b43      	ldr	r3, [pc, #268]	@ (800135c <TIM2_Init+0x114>)
 8001250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001252:	4a42      	ldr	r2, [pc, #264]	@ (800135c <TIM2_Init+0x114>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6393      	str	r3, [r2, #56]	@ 0x38
	RCC->APB1RSTR1 &= ~RCC_APB1RSTR1_TIM2RST;
 800125a:	4b40      	ldr	r3, [pc, #256]	@ (800135c <TIM2_Init+0x114>)
 800125c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800125e:	4a3f      	ldr	r2, [pc, #252]	@ (800135c <TIM2_Init+0x114>)
 8001260:	f023 0301 	bic.w	r3, r3, #1
 8001264:	6393      	str	r3, [r2, #56]	@ 0x38

	// 1) Enable TIM2 clock (APB1)
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 8001266:	4b3d      	ldr	r3, [pc, #244]	@ (800135c <TIM2_Init+0x114>)
 8001268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800126a:	4a3c      	ldr	r2, [pc, #240]	@ (800135c <TIM2_Init+0x114>)
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6593      	str	r3, [r2, #88]	@ 0x58
	// When we write value to PSC register, it stored info in preload register (like shadow register).
	// New setting will take into effect only after an Update event. Since we were setting ARR as 0xFFFFFFFF,
	// we have to wait unit counter resets to see new PSC value applied. This is the reason why i was seeing
	// behavior where my Period/Frequency values were incorrect for 3-5 minutes. Once counter resets and
	// new PSC value takes into effect, i started to see correct period and freq values.
	uint32_t psc = (SystemCoreClock / 1000000UL) - 1UL;
 8001272:	4b3b      	ldr	r3, [pc, #236]	@ (8001360 <TIM2_Init+0x118>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a3b      	ldr	r2, [pc, #236]	@ (8001364 <TIM2_Init+0x11c>)
 8001278:	fba2 2303 	umull	r2, r3, r2, r3
 800127c:	0c9b      	lsrs	r3, r3, #18
 800127e:	3b01      	subs	r3, #1
 8001280:	607b      	str	r3, [r7, #4]
	TIM2->PSC = psc;           // e.g., at 16 MHz, PSC = 15
 8001282:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6293      	str	r3, [r2, #40]	@ 0x28
	TIM2->EGR |= TIM_EGR_UG;  // generate an update event to reload PSC immediately
 800128a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800128e:	695b      	ldr	r3, [r3, #20]
 8001290:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	6153      	str	r3, [r2, #20]
	TIM2->ARR = 0xFFFFFFFFUL;  // free-run 32-bit (TIM2 is 32-bit on L4)
 800129a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800129e:	f04f 32ff 	mov.w	r2, #4294967295
 80012a2:	62da      	str	r2, [r3, #44]	@ 0x2c

	printf("SystemCoreClock = %lu, TIM2 PSC = %lu\r\n", SystemCoreClock, TIM2->PSC);
 80012a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001360 <TIM2_Init+0x118>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012ac:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80012ae:	4619      	mov	r1, r3
 80012b0:	482d      	ldr	r0, [pc, #180]	@ (8001368 <TIM2_Init+0x120>)
 80012b2:	f000 f9a9 	bl	8001608 <printf>

	// 3) Configure CH1 as input, mapped to TI1
	//    CC1S = 01 (input on TI1)
	TIM2->CCMR1 &= ~(TIM_CCMR1_CC1S_Msk);
 80012b6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012c0:	f023 0303 	bic.w	r3, r3, #3
 80012c4:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |=  (1u << TIM_CCMR1_CC1S_Pos);   	// CC1S=01 = TI1 input
 80012c6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6193      	str	r3, [r2, #24]

	// Optional digital filter (IC1F). 0 = no filter; choose >0 if you have a noisy signal
	TIM2->CCMR1 &= ~(TIM_CCMR1_IC1F_Msk);
 80012d6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80012e4:	6193      	str	r3, [r2, #24]

	// Select rising edge (CC1P=0, CC1NP=0)
	TIM2->CCER &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80012e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012ea:	6a1b      	ldr	r3, [r3, #32]
 80012ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012f0:	f023 030a 	bic.w	r3, r3, #10
 80012f4:	6213      	str	r3, [r2, #32]

	// No prescaler on capture (IC1PSC=00) => capture every edge (i.e. rising edge)
	TIM2->CCMR1 &= ~(TIM_CCMR1_IC1PSC_Msk);
 80012f6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001300:	f023 030c 	bic.w	r3, r3, #12
 8001304:	6193      	str	r3, [r2, #24]

	// 4) Enable interrupt on capture
	TIM2->DIER |= TIM_DIER_CC1IE;
 8001306:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001310:	f043 0302 	orr.w	r3, r3, #2
 8001314:	60d3      	str	r3, [r2, #12]

	// 5) Enable capture and counter
	TIM2->CCER |= TIM_CCER_CC1E;
 8001316:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800131a:	6a1b      	ldr	r3, [r3, #32]
 800131c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6213      	str	r3, [r2, #32]
	TIM2->CR1  |= TIM_CR1_CEN;
 8001326:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6013      	str	r3, [r2, #0]

	// 6) Clear all interrupt flags before starting
	TIM2->SR = 0;
 8001336:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800133a:	2200      	movs	r2, #0
 800133c:	611a      	str	r2, [r3, #16]

	// 7) Enable NVIC Interrupt
	NVIC_ClearPendingIRQ(TIM2_IRQn);
 800133e:	201c      	movs	r0, #28
 8001340:	f7ff ff3a 	bl	80011b8 <__NVIC_ClearPendingIRQ>
	NVIC_SetPriority(TIM2_IRQn, 1);
 8001344:	2101      	movs	r1, #1
 8001346:	201c      	movs	r0, #28
 8001348:	f7ff ff54 	bl	80011f4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn);
 800134c:	201c      	movs	r0, #28
 800134e:	f7ff ff15 	bl	800117c <__NVIC_EnableIRQ>
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40021000 	.word	0x40021000
 8001360:	2000000c 	.word	0x2000000c
 8001364:	431bde83 	.word	0x431bde83
 8001368:	08002aec 	.word	0x08002aec

0800136c <TIM2_IRQHandler>:

//******************************************************************************************
// This function is to handle Timer2 Interrupt, triggered when rising edge is detected
//******************************************************************************************
void TIM2_IRQHandler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
	// Capture event on CH1 only
	if (TIM2->SR & TIM_SR_CC1IF)
 8001372:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001376:	691b      	ldr	r3, [r3, #16]
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d020      	beq.n	80013c2 <TIM2_IRQHandler+0x56>
    {
		// Current captured counter
		uint32_t current_ticks = TIM2->CCR1;
 8001380:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001386:	607b      	str	r3, [r7, #4]

        // MP-Sept-25: Revised and simplified code
        // Let's skip first reading to ensure we have valid signal to work with
        if (!first_capture)
 8001388:	4b11      	ldr	r3, [pc, #68]	@ (80013d0 <TIM2_IRQHandler+0x64>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	b2db      	uxtb	r3, r3
 800138e:	f083 0301 	eor.w	r3, r3, #1
 8001392:	b2db      	uxtb	r3, r3
 8001394:	2b00      	cmp	r3, #0
 8001396:	d006      	beq.n	80013a6 <TIM2_IRQHandler+0x3a>
        {
        	// Calculate period using current and last rising edge values
        	// This should handle overflow automatically
        	period_ticks = (current_ticks - last_capture);
 8001398:	4b0e      	ldr	r3, [pc, #56]	@ (80013d4 <TIM2_IRQHandler+0x68>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	4a0d      	ldr	r2, [pc, #52]	@ (80013d8 <TIM2_IRQHandler+0x6c>)
 80013a2:	6013      	str	r3, [r2, #0]
 80013a4:	e002      	b.n	80013ac <TIM2_IRQHandler+0x40>
        }
        else
        {
        	// Skip very first reading
        	first_capture = false;
 80013a6:	4b0a      	ldr	r3, [pc, #40]	@ (80013d0 <TIM2_IRQHandler+0x64>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]
        }
        // Save for next edge
        last_capture = current_ticks;
 80013ac:	4a09      	ldr	r2, [pc, #36]	@ (80013d4 <TIM2_IRQHandler+0x68>)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6013      	str	r3, [r2, #0]

    	// Clear flag
    	TIM2->SR &= ~TIM_SR_CC1IF;
 80013b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013bc:	f023 0302 	bic.w	r3, r3, #2
 80013c0:	6113      	str	r3, [r2, #16]
    }
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	20000010 	.word	0x20000010
 80013d4:	20000100 	.word	0x20000100
 80013d8:	20000104 	.word	0x20000104

080013dc <TIM2_GetPeriodTicks>:

//******************************************************************************************
// This function is to get Period of input signal measured
//******************************************************************************************
uint32_t TIM2_GetPeriodTicks(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
	return period_ticks;	// already in µs since PSC is set accordingly
 80013e0:	4b03      	ldr	r3, [pc, #12]	@ (80013f0 <TIM2_GetPeriodTicks+0x14>)
 80013e2:	681b      	ldr	r3, [r3, #0]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	20000104 	.word	0x20000104

080013f4 <USART2_Init>:
//	while ( (USART2->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
//	while ( (USART2->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
//}

void USART2_Init(int baudrate)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
    // Enable clocks
    RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;
 80013fc:	4b44      	ldr	r3, [pc, #272]	@ (8001510 <USART2_Init+0x11c>)
 80013fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001400:	4a43      	ldr	r2, [pc, #268]	@ (8001510 <USART2_Init+0x11c>)
 8001402:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001406:	6593      	str	r3, [r2, #88]	@ 0x58
    RCC->AHB2ENR  |= RCC_AHB2ENR_GPIOAEN;
 8001408:	4b41      	ldr	r3, [pc, #260]	@ (8001510 <USART2_Init+0x11c>)
 800140a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140c:	4a40      	ldr	r2, [pc, #256]	@ (8001510 <USART2_Init+0x11c>)
 800140e:	f043 0301 	orr.w	r3, r3, #1
 8001412:	64d3      	str	r3, [r2, #76]	@ 0x4c

    // ----------------------------
    // Configure PA2 (USART2_TX), PA3 (USART2_RX)
    // ----------------------------
    GPIOA->MODER &= ~((3u << (2*2)) | (3u << (3*2)));
 8001414:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800141e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001422:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  ((2u << (2*2)) | (2u << (3*2)));  		// 10 = alternate function
 8001424:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800142e:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8001432:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~((0xFu << (2*4)) | (0xFu << (3*4)));
 8001434:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001438:	6a1b      	ldr	r3, [r3, #32]
 800143a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800143e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001442:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=  ((7u << (2*4)) | (7u << (3*4))); 		// AF7 = USART2
 8001444:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001448:	6a1b      	ldr	r3, [r3, #32]
 800144a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800144e:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8001452:	6213      	str	r3, [r2, #32]
    GPIOA->OTYPER &= ~((1u<<2) | (1u<<3));             		// push-pull
 8001454:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800145e:	f023 030c 	bic.w	r3, r3, #12
 8001462:	6053      	str	r3, [r2, #4]
    GPIOA->OSPEEDR |= ((3u << (2*2)) | (3u << (3*2))); 		// very high speed
 8001464:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800146e:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8001472:	6093      	str	r3, [r2, #8]
    GPIOA->PUPDR &= ~((3u << (2*2)) | (3u << (3*2)));  		// no pull
 8001474:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800147e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001482:	60d3      	str	r3, [r2, #12]

    // Disable USART before config
    USART2->CR1 &= ~USART_CR1_UE;
 8001484:	4b23      	ldr	r3, [pc, #140]	@ (8001514 <USART2_Init+0x120>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a22      	ldr	r2, [pc, #136]	@ (8001514 <USART2_Init+0x120>)
 800148a:	f023 0301 	bic.w	r3, r3, #1
 800148e:	6013      	str	r3, [r2, #0]

    // Word length = 8, no parity, oversampling = 16
    USART2->CR1 &= ~(USART_CR1_M | USART_CR1_PCE | USART_CR1_OVER8);
 8001490:	4b20      	ldr	r3, [pc, #128]	@ (8001514 <USART2_Init+0x120>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a1f      	ldr	r2, [pc, #124]	@ (8001514 <USART2_Init+0x120>)
 8001496:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800149a:	f423 4314 	bic.w	r3, r3, #37888	@ 0x9400
 800149e:	6013      	str	r3, [r2, #0]

    // Stop bits = 1
    USART2->CR2 &= ~USART_CR2_STOP;
 80014a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001514 <USART2_Init+0x120>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001514 <USART2_Init+0x120>)
 80014a6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80014aa:	6053      	str	r3, [r2, #4]

    // No flow control
    USART2->CR3 &= ~(USART_CR3_RTSE | USART_CR3_CTSE);
 80014ac:	4b19      	ldr	r3, [pc, #100]	@ (8001514 <USART2_Init+0x120>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	4a18      	ldr	r2, [pc, #96]	@ (8001514 <USART2_Init+0x120>)
 80014b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80014b6:	6093      	str	r3, [r2, #8]

    // MP-Sept-25: Set Baud rate --- Update for 16MHz or 80MHz
    //uint32_t pclk1 = 16000000UL; /// if HSI at 16MHz, APB1 prescaler = 1
    uint32_t pclk1 = 80000000UL;  // if PLL at 80 MHz, APB1 prescaler = 1
 80014b8:	4b17      	ldr	r3, [pc, #92]	@ (8001518 <USART2_Init+0x124>)
 80014ba:	60fb      	str	r3, [r7, #12]
    USART2->BRR = (pclk1 + (baudrate/2U)) / baudrate;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	085a      	lsrs	r2, r3, #1
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	441a      	add	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4913      	ldr	r1, [pc, #76]	@ (8001514 <USART2_Init+0x120>)
 80014c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80014cc:	60cb      	str	r3, [r1, #12]

    // Enable transmitter and receiver
    USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;
 80014ce:	4b11      	ldr	r3, [pc, #68]	@ (8001514 <USART2_Init+0x120>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a10      	ldr	r2, [pc, #64]	@ (8001514 <USART2_Init+0x120>)
 80014d4:	f043 030c 	orr.w	r3, r3, #12
 80014d8:	6013      	str	r3, [r2, #0]

    // Enable USART
    USART2->CR1 |= USART_CR1_UE;
 80014da:	4b0e      	ldr	r3, [pc, #56]	@ (8001514 <USART2_Init+0x120>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a0d      	ldr	r2, [pc, #52]	@ (8001514 <USART2_Init+0x120>)
 80014e0:	f043 0301 	orr.w	r3, r3, #1
 80014e4:	6013      	str	r3, [r2, #0]

    while (!(USART2->ISR & USART_ISR_TEACK));
 80014e6:	bf00      	nop
 80014e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001514 <USART2_Init+0x120>)
 80014ea:	69db      	ldr	r3, [r3, #28]
 80014ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0f9      	beq.n	80014e8 <USART2_Init+0xf4>
    while (!(USART2->ISR & USART_ISR_REACK));
 80014f4:	bf00      	nop
 80014f6:	4b07      	ldr	r3, [pc, #28]	@ (8001514 <USART2_Init+0x120>)
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d0f9      	beq.n	80014f6 <USART2_Init+0x102>
}
 8001502:	bf00      	nop
 8001504:	bf00      	nop
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	40021000 	.word	0x40021000
 8001514:	40004400 	.word	0x40004400
 8001518:	04c4b400 	.word	0x04c4b400

0800151c <USART_Read_NB>:
	// Reading USART_DR automatically clears the RXNE flag 
}

//Read from USART - Non-Blocking
uint8_t USART_Read_NB (USART_TypeDef * USARTx)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
    // SR_RXNE (Read data register not empty) bit is set by hardware
    if (!(USARTx->ISR & USART_ISR_RXNE)) {
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	69db      	ldr	r3, [r3, #28]
 8001528:	f003 0320 	and.w	r3, r3, #32
 800152c:	2b00      	cmp	r3, #0
 800152e:	d101      	bne.n	8001534 <USART_Read_NB+0x18>
        // USART resets the RXNE flag automatically after reading DR
        return 0;
 8001530:	2300      	movs	r3, #0
 8001532:	e003      	b.n	800153c <USART_Read_NB+0x20>
    }
    else {
        return ((uint8_t)(USARTx->RDR & 0xFF));
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001538:	b29b      	uxth	r3, r3
 800153a:	b2db      	uxtb	r3, r3
    // Reading USART_DR automatically clears the RXNE flag
    }
}
 800153c:	4618      	mov	r0, r3
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <USART_Write>:

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes)
{
 8001548:	b480      	push	{r7}
 800154a:	b087      	sub	sp, #28
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
	int i;
	// A byte to be transmitted is written to the TDR (transmit data register), and the TXE (transmit empty) bit is cleared.
	// The TDR is copied to an output shift register for serialization when that register is empty, and the TXE bit is set.
	for (i = 0; i < nBytes; i++) {
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
 8001558:	e010      	b.n	800157c <USART_Write+0x34>
		while (!(USARTx->ISR & USART_ISR_TXE))
 800155a:	bf00      	nop
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	69db      	ldr	r3, [r3, #28]
 8001560:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001564:	2b00      	cmp	r3, #0
 8001566:	d0f9      	beq.n	800155c <USART_Write+0x14>
			;   							// wait until TXE (TX empty) bit is set
		USARTx->TDR = buffer[i] & 0xFF;		// writing USART_TDR automatically clears the TXE flag
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	68ba      	ldr	r2, [r7, #8]
 800156c:	4413      	add	r3, r2
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	461a      	mov	r2, r3
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	851a      	strh	r2, [r3, #40]	@ 0x28
	for (i = 0; i < nBytes; i++) {
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	3301      	adds	r3, #1
 800157a:	617b      	str	r3, [r7, #20]
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	429a      	cmp	r2, r3
 8001582:	d8ea      	bhi.n	800155a <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC))
 8001584:	bf00      	nop
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800158e:	2b00      	cmp	r3, #0
 8001590:	d0f9      	beq.n	8001586 <USART_Write+0x3e>
		;  									// wait until TC bit is set
	USARTx->ISR &= ~USART_ISR_TC;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	61da      	str	r2, [r3, #28]
}   
 800159e:	bf00      	nop
 80015a0:	371c      	adds	r7, #28
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
	...

080015ac <USART2_WriteChar>:

//******************************************************************************************
// USART Write functions for testing
//******************************************************************************************
void USART2_WriteChar(char c)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->ISR & USART_ISR_TXE)); // wait until TX buffer empty - blocking
 80015b6:	bf00      	nop
 80015b8:	4b07      	ldr	r3, [pc, #28]	@ (80015d8 <USART2_WriteChar+0x2c>)
 80015ba:	69db      	ldr	r3, [r3, #28]
 80015bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d0f9      	beq.n	80015b8 <USART2_WriteChar+0xc>
    USART2->TDR = c;
 80015c4:	4b04      	ldr	r3, [pc, #16]	@ (80015d8 <USART2_WriteChar+0x2c>)
 80015c6:	79fa      	ldrb	r2, [r7, #7]
 80015c8:	b292      	uxth	r2, r2
 80015ca:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	40004400 	.word	0x40004400

080015dc <USART2_WriteString>:

void USART2_WriteString(const char *s)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
    while (*s)
 80015e4:	e006      	b.n	80015f4 <USART2_WriteString+0x18>
    {
        USART2_WriteChar(*s++);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	1c5a      	adds	r2, r3, #1
 80015ea:	607a      	str	r2, [r7, #4]
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff ffdc 	bl	80015ac <USART2_WriteChar>
    while (*s)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1f4      	bne.n	80015e6 <USART2_WriteString+0xa>
    }
}
 80015fc:	bf00      	nop
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <printf>:
//******************************************************************************************
// For USART Print -- Could be moved to UART module
//******************************************************************************************
static uint8_t buffer[200];

int printf (const char *format, ...) {
 8001608:	b40f      	push	{r0, r1, r2, r3}
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
    va_list aptr;
    int ret;

    va_start (aptr, format);
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	603b      	str	r3, [r7, #0]
    ret = vsprintf ((char*)buffer, format, aptr);
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	6939      	ldr	r1, [r7, #16]
 800161a:	4809      	ldr	r0, [pc, #36]	@ (8001640 <printf+0x38>)
 800161c:	f000 f9b8 	bl	8001990 <vsiprintf>
 8001620:	6078      	str	r0, [r7, #4]
    va_end (aptr);

    USART_Write (USART2, buffer, ret);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	461a      	mov	r2, r3
 8001626:	4906      	ldr	r1, [pc, #24]	@ (8001640 <printf+0x38>)
 8001628:	4806      	ldr	r0, [pc, #24]	@ (8001644 <printf+0x3c>)
 800162a:	f7ff ff8d 	bl	8001548 <USART_Write>

    return ret;
 800162e:	687b      	ldr	r3, [r7, #4]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800163a:	b004      	add	sp, #16
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	20000108 	.word	0x20000108
 8001644:	40004400 	.word	0x40004400

08001648 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001648:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001680 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800164c:	f7ff fcd6 	bl	8000ffc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001650:	480c      	ldr	r0, [pc, #48]	@ (8001684 <LoopForever+0x6>)
  ldr r1, =_edata
 8001652:	490d      	ldr	r1, [pc, #52]	@ (8001688 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001654:	4a0d      	ldr	r2, [pc, #52]	@ (800168c <LoopForever+0xe>)
  movs r3, #0
 8001656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001658:	e002      	b.n	8001660 <LoopCopyDataInit>

0800165a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800165a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800165c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800165e:	3304      	adds	r3, #4

08001660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001664:	d3f9      	bcc.n	800165a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001666:	4a0a      	ldr	r2, [pc, #40]	@ (8001690 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001668:	4c0a      	ldr	r4, [pc, #40]	@ (8001694 <LoopForever+0x16>)
  movs r3, #0
 800166a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800166c:	e001      	b.n	8001672 <LoopFillZerobss>

0800166e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800166e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001670:	3204      	adds	r2, #4

08001672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001674:	d3fb      	bcc.n	800166e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001676:	f000 fa7d 	bl	8001b74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800167a:	f7ff fbd1 	bl	8000e20 <main>

0800167e <LoopForever>:

LoopForever:
    b LoopForever
 800167e:	e7fe      	b.n	800167e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001680:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001688:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800168c:	08002c98 	.word	0x08002c98
  ldr r2, =_sbss
 8001690:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001694:	2000031c 	.word	0x2000031c

08001698 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001698:	e7fe      	b.n	8001698 <ADC1_2_IRQHandler>
	...

0800169c <std>:
 800169c:	2300      	movs	r3, #0
 800169e:	b510      	push	{r4, lr}
 80016a0:	4604      	mov	r4, r0
 80016a2:	e9c0 3300 	strd	r3, r3, [r0]
 80016a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80016aa:	6083      	str	r3, [r0, #8]
 80016ac:	8181      	strh	r1, [r0, #12]
 80016ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80016b0:	81c2      	strh	r2, [r0, #14]
 80016b2:	6183      	str	r3, [r0, #24]
 80016b4:	4619      	mov	r1, r3
 80016b6:	2208      	movs	r2, #8
 80016b8:	305c      	adds	r0, #92	@ 0x5c
 80016ba:	f000 fa07 	bl	8001acc <memset>
 80016be:	4b0d      	ldr	r3, [pc, #52]	@ (80016f4 <std+0x58>)
 80016c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80016c2:	4b0d      	ldr	r3, [pc, #52]	@ (80016f8 <std+0x5c>)
 80016c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80016c6:	4b0d      	ldr	r3, [pc, #52]	@ (80016fc <std+0x60>)
 80016c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80016ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001700 <std+0x64>)
 80016cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80016ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001704 <std+0x68>)
 80016d0:	6224      	str	r4, [r4, #32]
 80016d2:	429c      	cmp	r4, r3
 80016d4:	d006      	beq.n	80016e4 <std+0x48>
 80016d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80016da:	4294      	cmp	r4, r2
 80016dc:	d002      	beq.n	80016e4 <std+0x48>
 80016de:	33d0      	adds	r3, #208	@ 0xd0
 80016e0:	429c      	cmp	r4, r3
 80016e2:	d105      	bne.n	80016f0 <std+0x54>
 80016e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80016e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016ec:	f000 ba66 	b.w	8001bbc <__retarget_lock_init_recursive>
 80016f0:	bd10      	pop	{r4, pc}
 80016f2:	bf00      	nop
 80016f4:	080018dd 	.word	0x080018dd
 80016f8:	080018ff 	.word	0x080018ff
 80016fc:	08001937 	.word	0x08001937
 8001700:	0800195b 	.word	0x0800195b
 8001704:	200001d0 	.word	0x200001d0

08001708 <stdio_exit_handler>:
 8001708:	4a02      	ldr	r2, [pc, #8]	@ (8001714 <stdio_exit_handler+0xc>)
 800170a:	4903      	ldr	r1, [pc, #12]	@ (8001718 <stdio_exit_handler+0x10>)
 800170c:	4803      	ldr	r0, [pc, #12]	@ (800171c <stdio_exit_handler+0x14>)
 800170e:	f000 b869 	b.w	80017e4 <_fwalk_sglue>
 8001712:	bf00      	nop
 8001714:	20000014 	.word	0x20000014
 8001718:	08002485 	.word	0x08002485
 800171c:	20000024 	.word	0x20000024

08001720 <cleanup_stdio>:
 8001720:	6841      	ldr	r1, [r0, #4]
 8001722:	4b0c      	ldr	r3, [pc, #48]	@ (8001754 <cleanup_stdio+0x34>)
 8001724:	4299      	cmp	r1, r3
 8001726:	b510      	push	{r4, lr}
 8001728:	4604      	mov	r4, r0
 800172a:	d001      	beq.n	8001730 <cleanup_stdio+0x10>
 800172c:	f000 feaa 	bl	8002484 <_fflush_r>
 8001730:	68a1      	ldr	r1, [r4, #8]
 8001732:	4b09      	ldr	r3, [pc, #36]	@ (8001758 <cleanup_stdio+0x38>)
 8001734:	4299      	cmp	r1, r3
 8001736:	d002      	beq.n	800173e <cleanup_stdio+0x1e>
 8001738:	4620      	mov	r0, r4
 800173a:	f000 fea3 	bl	8002484 <_fflush_r>
 800173e:	68e1      	ldr	r1, [r4, #12]
 8001740:	4b06      	ldr	r3, [pc, #24]	@ (800175c <cleanup_stdio+0x3c>)
 8001742:	4299      	cmp	r1, r3
 8001744:	d004      	beq.n	8001750 <cleanup_stdio+0x30>
 8001746:	4620      	mov	r0, r4
 8001748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800174c:	f000 be9a 	b.w	8002484 <_fflush_r>
 8001750:	bd10      	pop	{r4, pc}
 8001752:	bf00      	nop
 8001754:	200001d0 	.word	0x200001d0
 8001758:	20000238 	.word	0x20000238
 800175c:	200002a0 	.word	0x200002a0

08001760 <global_stdio_init.part.0>:
 8001760:	b510      	push	{r4, lr}
 8001762:	4b0b      	ldr	r3, [pc, #44]	@ (8001790 <global_stdio_init.part.0+0x30>)
 8001764:	4c0b      	ldr	r4, [pc, #44]	@ (8001794 <global_stdio_init.part.0+0x34>)
 8001766:	4a0c      	ldr	r2, [pc, #48]	@ (8001798 <global_stdio_init.part.0+0x38>)
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	4620      	mov	r0, r4
 800176c:	2200      	movs	r2, #0
 800176e:	2104      	movs	r1, #4
 8001770:	f7ff ff94 	bl	800169c <std>
 8001774:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001778:	2201      	movs	r2, #1
 800177a:	2109      	movs	r1, #9
 800177c:	f7ff ff8e 	bl	800169c <std>
 8001780:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001784:	2202      	movs	r2, #2
 8001786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800178a:	2112      	movs	r1, #18
 800178c:	f7ff bf86 	b.w	800169c <std>
 8001790:	20000308 	.word	0x20000308
 8001794:	200001d0 	.word	0x200001d0
 8001798:	08001709 	.word	0x08001709

0800179c <__sfp_lock_acquire>:
 800179c:	4801      	ldr	r0, [pc, #4]	@ (80017a4 <__sfp_lock_acquire+0x8>)
 800179e:	f000 ba0e 	b.w	8001bbe <__retarget_lock_acquire_recursive>
 80017a2:	bf00      	nop
 80017a4:	20000311 	.word	0x20000311

080017a8 <__sfp_lock_release>:
 80017a8:	4801      	ldr	r0, [pc, #4]	@ (80017b0 <__sfp_lock_release+0x8>)
 80017aa:	f000 ba09 	b.w	8001bc0 <__retarget_lock_release_recursive>
 80017ae:	bf00      	nop
 80017b0:	20000311 	.word	0x20000311

080017b4 <__sinit>:
 80017b4:	b510      	push	{r4, lr}
 80017b6:	4604      	mov	r4, r0
 80017b8:	f7ff fff0 	bl	800179c <__sfp_lock_acquire>
 80017bc:	6a23      	ldr	r3, [r4, #32]
 80017be:	b11b      	cbz	r3, 80017c8 <__sinit+0x14>
 80017c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017c4:	f7ff bff0 	b.w	80017a8 <__sfp_lock_release>
 80017c8:	4b04      	ldr	r3, [pc, #16]	@ (80017dc <__sinit+0x28>)
 80017ca:	6223      	str	r3, [r4, #32]
 80017cc:	4b04      	ldr	r3, [pc, #16]	@ (80017e0 <__sinit+0x2c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1f5      	bne.n	80017c0 <__sinit+0xc>
 80017d4:	f7ff ffc4 	bl	8001760 <global_stdio_init.part.0>
 80017d8:	e7f2      	b.n	80017c0 <__sinit+0xc>
 80017da:	bf00      	nop
 80017dc:	08001721 	.word	0x08001721
 80017e0:	20000308 	.word	0x20000308

080017e4 <_fwalk_sglue>:
 80017e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017e8:	4607      	mov	r7, r0
 80017ea:	4688      	mov	r8, r1
 80017ec:	4614      	mov	r4, r2
 80017ee:	2600      	movs	r6, #0
 80017f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80017f4:	f1b9 0901 	subs.w	r9, r9, #1
 80017f8:	d505      	bpl.n	8001806 <_fwalk_sglue+0x22>
 80017fa:	6824      	ldr	r4, [r4, #0]
 80017fc:	2c00      	cmp	r4, #0
 80017fe:	d1f7      	bne.n	80017f0 <_fwalk_sglue+0xc>
 8001800:	4630      	mov	r0, r6
 8001802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001806:	89ab      	ldrh	r3, [r5, #12]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d907      	bls.n	800181c <_fwalk_sglue+0x38>
 800180c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001810:	3301      	adds	r3, #1
 8001812:	d003      	beq.n	800181c <_fwalk_sglue+0x38>
 8001814:	4629      	mov	r1, r5
 8001816:	4638      	mov	r0, r7
 8001818:	47c0      	blx	r8
 800181a:	4306      	orrs	r6, r0
 800181c:	3568      	adds	r5, #104	@ 0x68
 800181e:	e7e9      	b.n	80017f4 <_fwalk_sglue+0x10>

08001820 <_puts_r>:
 8001820:	6a03      	ldr	r3, [r0, #32]
 8001822:	b570      	push	{r4, r5, r6, lr}
 8001824:	6884      	ldr	r4, [r0, #8]
 8001826:	4605      	mov	r5, r0
 8001828:	460e      	mov	r6, r1
 800182a:	b90b      	cbnz	r3, 8001830 <_puts_r+0x10>
 800182c:	f7ff ffc2 	bl	80017b4 <__sinit>
 8001830:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001832:	07db      	lsls	r3, r3, #31
 8001834:	d405      	bmi.n	8001842 <_puts_r+0x22>
 8001836:	89a3      	ldrh	r3, [r4, #12]
 8001838:	0598      	lsls	r0, r3, #22
 800183a:	d402      	bmi.n	8001842 <_puts_r+0x22>
 800183c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800183e:	f000 f9be 	bl	8001bbe <__retarget_lock_acquire_recursive>
 8001842:	89a3      	ldrh	r3, [r4, #12]
 8001844:	0719      	lsls	r1, r3, #28
 8001846:	d502      	bpl.n	800184e <_puts_r+0x2e>
 8001848:	6923      	ldr	r3, [r4, #16]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d135      	bne.n	80018ba <_puts_r+0x9a>
 800184e:	4621      	mov	r1, r4
 8001850:	4628      	mov	r0, r5
 8001852:	f000 f8e5 	bl	8001a20 <__swsetup_r>
 8001856:	b380      	cbz	r0, 80018ba <_puts_r+0x9a>
 8001858:	f04f 35ff 	mov.w	r5, #4294967295
 800185c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800185e:	07da      	lsls	r2, r3, #31
 8001860:	d405      	bmi.n	800186e <_puts_r+0x4e>
 8001862:	89a3      	ldrh	r3, [r4, #12]
 8001864:	059b      	lsls	r3, r3, #22
 8001866:	d402      	bmi.n	800186e <_puts_r+0x4e>
 8001868:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800186a:	f000 f9a9 	bl	8001bc0 <__retarget_lock_release_recursive>
 800186e:	4628      	mov	r0, r5
 8001870:	bd70      	pop	{r4, r5, r6, pc}
 8001872:	2b00      	cmp	r3, #0
 8001874:	da04      	bge.n	8001880 <_puts_r+0x60>
 8001876:	69a2      	ldr	r2, [r4, #24]
 8001878:	429a      	cmp	r2, r3
 800187a:	dc17      	bgt.n	80018ac <_puts_r+0x8c>
 800187c:	290a      	cmp	r1, #10
 800187e:	d015      	beq.n	80018ac <_puts_r+0x8c>
 8001880:	6823      	ldr	r3, [r4, #0]
 8001882:	1c5a      	adds	r2, r3, #1
 8001884:	6022      	str	r2, [r4, #0]
 8001886:	7019      	strb	r1, [r3, #0]
 8001888:	68a3      	ldr	r3, [r4, #8]
 800188a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800188e:	3b01      	subs	r3, #1
 8001890:	60a3      	str	r3, [r4, #8]
 8001892:	2900      	cmp	r1, #0
 8001894:	d1ed      	bne.n	8001872 <_puts_r+0x52>
 8001896:	2b00      	cmp	r3, #0
 8001898:	da11      	bge.n	80018be <_puts_r+0x9e>
 800189a:	4622      	mov	r2, r4
 800189c:	210a      	movs	r1, #10
 800189e:	4628      	mov	r0, r5
 80018a0:	f000 f880 	bl	80019a4 <__swbuf_r>
 80018a4:	3001      	adds	r0, #1
 80018a6:	d0d7      	beq.n	8001858 <_puts_r+0x38>
 80018a8:	250a      	movs	r5, #10
 80018aa:	e7d7      	b.n	800185c <_puts_r+0x3c>
 80018ac:	4622      	mov	r2, r4
 80018ae:	4628      	mov	r0, r5
 80018b0:	f000 f878 	bl	80019a4 <__swbuf_r>
 80018b4:	3001      	adds	r0, #1
 80018b6:	d1e7      	bne.n	8001888 <_puts_r+0x68>
 80018b8:	e7ce      	b.n	8001858 <_puts_r+0x38>
 80018ba:	3e01      	subs	r6, #1
 80018bc:	e7e4      	b.n	8001888 <_puts_r+0x68>
 80018be:	6823      	ldr	r3, [r4, #0]
 80018c0:	1c5a      	adds	r2, r3, #1
 80018c2:	6022      	str	r2, [r4, #0]
 80018c4:	220a      	movs	r2, #10
 80018c6:	701a      	strb	r2, [r3, #0]
 80018c8:	e7ee      	b.n	80018a8 <_puts_r+0x88>
	...

080018cc <puts>:
 80018cc:	4b02      	ldr	r3, [pc, #8]	@ (80018d8 <puts+0xc>)
 80018ce:	4601      	mov	r1, r0
 80018d0:	6818      	ldr	r0, [r3, #0]
 80018d2:	f7ff bfa5 	b.w	8001820 <_puts_r>
 80018d6:	bf00      	nop
 80018d8:	20000020 	.word	0x20000020

080018dc <__sread>:
 80018dc:	b510      	push	{r4, lr}
 80018de:	460c      	mov	r4, r1
 80018e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018e4:	f000 f91c 	bl	8001b20 <_read_r>
 80018e8:	2800      	cmp	r0, #0
 80018ea:	bfab      	itete	ge
 80018ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80018ee:	89a3      	ldrhlt	r3, [r4, #12]
 80018f0:	181b      	addge	r3, r3, r0
 80018f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80018f6:	bfac      	ite	ge
 80018f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80018fa:	81a3      	strhlt	r3, [r4, #12]
 80018fc:	bd10      	pop	{r4, pc}

080018fe <__swrite>:
 80018fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001902:	461f      	mov	r7, r3
 8001904:	898b      	ldrh	r3, [r1, #12]
 8001906:	05db      	lsls	r3, r3, #23
 8001908:	4605      	mov	r5, r0
 800190a:	460c      	mov	r4, r1
 800190c:	4616      	mov	r6, r2
 800190e:	d505      	bpl.n	800191c <__swrite+0x1e>
 8001910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001914:	2302      	movs	r3, #2
 8001916:	2200      	movs	r2, #0
 8001918:	f000 f8f0 	bl	8001afc <_lseek_r>
 800191c:	89a3      	ldrh	r3, [r4, #12]
 800191e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001922:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001926:	81a3      	strh	r3, [r4, #12]
 8001928:	4632      	mov	r2, r6
 800192a:	463b      	mov	r3, r7
 800192c:	4628      	mov	r0, r5
 800192e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001932:	f000 b907 	b.w	8001b44 <_write_r>

08001936 <__sseek>:
 8001936:	b510      	push	{r4, lr}
 8001938:	460c      	mov	r4, r1
 800193a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800193e:	f000 f8dd 	bl	8001afc <_lseek_r>
 8001942:	1c43      	adds	r3, r0, #1
 8001944:	89a3      	ldrh	r3, [r4, #12]
 8001946:	bf15      	itete	ne
 8001948:	6560      	strne	r0, [r4, #84]	@ 0x54
 800194a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800194e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001952:	81a3      	strheq	r3, [r4, #12]
 8001954:	bf18      	it	ne
 8001956:	81a3      	strhne	r3, [r4, #12]
 8001958:	bd10      	pop	{r4, pc}

0800195a <__sclose>:
 800195a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800195e:	f000 b8bd 	b.w	8001adc <_close_r>
	...

08001964 <_vsiprintf_r>:
 8001964:	b510      	push	{r4, lr}
 8001966:	b09a      	sub	sp, #104	@ 0x68
 8001968:	2400      	movs	r4, #0
 800196a:	9100      	str	r1, [sp, #0]
 800196c:	9104      	str	r1, [sp, #16]
 800196e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001972:	9105      	str	r1, [sp, #20]
 8001974:	9102      	str	r1, [sp, #8]
 8001976:	4905      	ldr	r1, [pc, #20]	@ (800198c <_vsiprintf_r+0x28>)
 8001978:	9103      	str	r1, [sp, #12]
 800197a:	4669      	mov	r1, sp
 800197c:	9419      	str	r4, [sp, #100]	@ 0x64
 800197e:	f000 fa75 	bl	8001e6c <_svfiprintf_r>
 8001982:	9b00      	ldr	r3, [sp, #0]
 8001984:	701c      	strb	r4, [r3, #0]
 8001986:	b01a      	add	sp, #104	@ 0x68
 8001988:	bd10      	pop	{r4, pc}
 800198a:	bf00      	nop
 800198c:	ffff0208 	.word	0xffff0208

08001990 <vsiprintf>:
 8001990:	4613      	mov	r3, r2
 8001992:	460a      	mov	r2, r1
 8001994:	4601      	mov	r1, r0
 8001996:	4802      	ldr	r0, [pc, #8]	@ (80019a0 <vsiprintf+0x10>)
 8001998:	6800      	ldr	r0, [r0, #0]
 800199a:	f7ff bfe3 	b.w	8001964 <_vsiprintf_r>
 800199e:	bf00      	nop
 80019a0:	20000020 	.word	0x20000020

080019a4 <__swbuf_r>:
 80019a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019a6:	460e      	mov	r6, r1
 80019a8:	4614      	mov	r4, r2
 80019aa:	4605      	mov	r5, r0
 80019ac:	b118      	cbz	r0, 80019b6 <__swbuf_r+0x12>
 80019ae:	6a03      	ldr	r3, [r0, #32]
 80019b0:	b90b      	cbnz	r3, 80019b6 <__swbuf_r+0x12>
 80019b2:	f7ff feff 	bl	80017b4 <__sinit>
 80019b6:	69a3      	ldr	r3, [r4, #24]
 80019b8:	60a3      	str	r3, [r4, #8]
 80019ba:	89a3      	ldrh	r3, [r4, #12]
 80019bc:	071a      	lsls	r2, r3, #28
 80019be:	d501      	bpl.n	80019c4 <__swbuf_r+0x20>
 80019c0:	6923      	ldr	r3, [r4, #16]
 80019c2:	b943      	cbnz	r3, 80019d6 <__swbuf_r+0x32>
 80019c4:	4621      	mov	r1, r4
 80019c6:	4628      	mov	r0, r5
 80019c8:	f000 f82a 	bl	8001a20 <__swsetup_r>
 80019cc:	b118      	cbz	r0, 80019d6 <__swbuf_r+0x32>
 80019ce:	f04f 37ff 	mov.w	r7, #4294967295
 80019d2:	4638      	mov	r0, r7
 80019d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019d6:	6823      	ldr	r3, [r4, #0]
 80019d8:	6922      	ldr	r2, [r4, #16]
 80019da:	1a98      	subs	r0, r3, r2
 80019dc:	6963      	ldr	r3, [r4, #20]
 80019de:	b2f6      	uxtb	r6, r6
 80019e0:	4283      	cmp	r3, r0
 80019e2:	4637      	mov	r7, r6
 80019e4:	dc05      	bgt.n	80019f2 <__swbuf_r+0x4e>
 80019e6:	4621      	mov	r1, r4
 80019e8:	4628      	mov	r0, r5
 80019ea:	f000 fd4b 	bl	8002484 <_fflush_r>
 80019ee:	2800      	cmp	r0, #0
 80019f0:	d1ed      	bne.n	80019ce <__swbuf_r+0x2a>
 80019f2:	68a3      	ldr	r3, [r4, #8]
 80019f4:	3b01      	subs	r3, #1
 80019f6:	60a3      	str	r3, [r4, #8]
 80019f8:	6823      	ldr	r3, [r4, #0]
 80019fa:	1c5a      	adds	r2, r3, #1
 80019fc:	6022      	str	r2, [r4, #0]
 80019fe:	701e      	strb	r6, [r3, #0]
 8001a00:	6962      	ldr	r2, [r4, #20]
 8001a02:	1c43      	adds	r3, r0, #1
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d004      	beq.n	8001a12 <__swbuf_r+0x6e>
 8001a08:	89a3      	ldrh	r3, [r4, #12]
 8001a0a:	07db      	lsls	r3, r3, #31
 8001a0c:	d5e1      	bpl.n	80019d2 <__swbuf_r+0x2e>
 8001a0e:	2e0a      	cmp	r6, #10
 8001a10:	d1df      	bne.n	80019d2 <__swbuf_r+0x2e>
 8001a12:	4621      	mov	r1, r4
 8001a14:	4628      	mov	r0, r5
 8001a16:	f000 fd35 	bl	8002484 <_fflush_r>
 8001a1a:	2800      	cmp	r0, #0
 8001a1c:	d0d9      	beq.n	80019d2 <__swbuf_r+0x2e>
 8001a1e:	e7d6      	b.n	80019ce <__swbuf_r+0x2a>

08001a20 <__swsetup_r>:
 8001a20:	b538      	push	{r3, r4, r5, lr}
 8001a22:	4b29      	ldr	r3, [pc, #164]	@ (8001ac8 <__swsetup_r+0xa8>)
 8001a24:	4605      	mov	r5, r0
 8001a26:	6818      	ldr	r0, [r3, #0]
 8001a28:	460c      	mov	r4, r1
 8001a2a:	b118      	cbz	r0, 8001a34 <__swsetup_r+0x14>
 8001a2c:	6a03      	ldr	r3, [r0, #32]
 8001a2e:	b90b      	cbnz	r3, 8001a34 <__swsetup_r+0x14>
 8001a30:	f7ff fec0 	bl	80017b4 <__sinit>
 8001a34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a38:	0719      	lsls	r1, r3, #28
 8001a3a:	d422      	bmi.n	8001a82 <__swsetup_r+0x62>
 8001a3c:	06da      	lsls	r2, r3, #27
 8001a3e:	d407      	bmi.n	8001a50 <__swsetup_r+0x30>
 8001a40:	2209      	movs	r2, #9
 8001a42:	602a      	str	r2, [r5, #0]
 8001a44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a48:	81a3      	strh	r3, [r4, #12]
 8001a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8001a4e:	e033      	b.n	8001ab8 <__swsetup_r+0x98>
 8001a50:	0758      	lsls	r0, r3, #29
 8001a52:	d512      	bpl.n	8001a7a <__swsetup_r+0x5a>
 8001a54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001a56:	b141      	cbz	r1, 8001a6a <__swsetup_r+0x4a>
 8001a58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001a5c:	4299      	cmp	r1, r3
 8001a5e:	d002      	beq.n	8001a66 <__swsetup_r+0x46>
 8001a60:	4628      	mov	r0, r5
 8001a62:	f000 f8af 	bl	8001bc4 <_free_r>
 8001a66:	2300      	movs	r3, #0
 8001a68:	6363      	str	r3, [r4, #52]	@ 0x34
 8001a6a:	89a3      	ldrh	r3, [r4, #12]
 8001a6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001a70:	81a3      	strh	r3, [r4, #12]
 8001a72:	2300      	movs	r3, #0
 8001a74:	6063      	str	r3, [r4, #4]
 8001a76:	6923      	ldr	r3, [r4, #16]
 8001a78:	6023      	str	r3, [r4, #0]
 8001a7a:	89a3      	ldrh	r3, [r4, #12]
 8001a7c:	f043 0308 	orr.w	r3, r3, #8
 8001a80:	81a3      	strh	r3, [r4, #12]
 8001a82:	6923      	ldr	r3, [r4, #16]
 8001a84:	b94b      	cbnz	r3, 8001a9a <__swsetup_r+0x7a>
 8001a86:	89a3      	ldrh	r3, [r4, #12]
 8001a88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001a8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a90:	d003      	beq.n	8001a9a <__swsetup_r+0x7a>
 8001a92:	4621      	mov	r1, r4
 8001a94:	4628      	mov	r0, r5
 8001a96:	f000 fd43 	bl	8002520 <__smakebuf_r>
 8001a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a9e:	f013 0201 	ands.w	r2, r3, #1
 8001aa2:	d00a      	beq.n	8001aba <__swsetup_r+0x9a>
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	60a2      	str	r2, [r4, #8]
 8001aa8:	6962      	ldr	r2, [r4, #20]
 8001aaa:	4252      	negs	r2, r2
 8001aac:	61a2      	str	r2, [r4, #24]
 8001aae:	6922      	ldr	r2, [r4, #16]
 8001ab0:	b942      	cbnz	r2, 8001ac4 <__swsetup_r+0xa4>
 8001ab2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001ab6:	d1c5      	bne.n	8001a44 <__swsetup_r+0x24>
 8001ab8:	bd38      	pop	{r3, r4, r5, pc}
 8001aba:	0799      	lsls	r1, r3, #30
 8001abc:	bf58      	it	pl
 8001abe:	6962      	ldrpl	r2, [r4, #20]
 8001ac0:	60a2      	str	r2, [r4, #8]
 8001ac2:	e7f4      	b.n	8001aae <__swsetup_r+0x8e>
 8001ac4:	2000      	movs	r0, #0
 8001ac6:	e7f7      	b.n	8001ab8 <__swsetup_r+0x98>
 8001ac8:	20000020 	.word	0x20000020

08001acc <memset>:
 8001acc:	4402      	add	r2, r0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d100      	bne.n	8001ad6 <memset+0xa>
 8001ad4:	4770      	bx	lr
 8001ad6:	f803 1b01 	strb.w	r1, [r3], #1
 8001ada:	e7f9      	b.n	8001ad0 <memset+0x4>

08001adc <_close_r>:
 8001adc:	b538      	push	{r3, r4, r5, lr}
 8001ade:	4d06      	ldr	r5, [pc, #24]	@ (8001af8 <_close_r+0x1c>)
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	4604      	mov	r4, r0
 8001ae4:	4608      	mov	r0, r1
 8001ae6:	602b      	str	r3, [r5, #0]
 8001ae8:	f7ff fa1d 	bl	8000f26 <_close>
 8001aec:	1c43      	adds	r3, r0, #1
 8001aee:	d102      	bne.n	8001af6 <_close_r+0x1a>
 8001af0:	682b      	ldr	r3, [r5, #0]
 8001af2:	b103      	cbz	r3, 8001af6 <_close_r+0x1a>
 8001af4:	6023      	str	r3, [r4, #0]
 8001af6:	bd38      	pop	{r3, r4, r5, pc}
 8001af8:	2000030c 	.word	0x2000030c

08001afc <_lseek_r>:
 8001afc:	b538      	push	{r3, r4, r5, lr}
 8001afe:	4d07      	ldr	r5, [pc, #28]	@ (8001b1c <_lseek_r+0x20>)
 8001b00:	4604      	mov	r4, r0
 8001b02:	4608      	mov	r0, r1
 8001b04:	4611      	mov	r1, r2
 8001b06:	2200      	movs	r2, #0
 8001b08:	602a      	str	r2, [r5, #0]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	f7ff fa32 	bl	8000f74 <_lseek>
 8001b10:	1c43      	adds	r3, r0, #1
 8001b12:	d102      	bne.n	8001b1a <_lseek_r+0x1e>
 8001b14:	682b      	ldr	r3, [r5, #0]
 8001b16:	b103      	cbz	r3, 8001b1a <_lseek_r+0x1e>
 8001b18:	6023      	str	r3, [r4, #0]
 8001b1a:	bd38      	pop	{r3, r4, r5, pc}
 8001b1c:	2000030c 	.word	0x2000030c

08001b20 <_read_r>:
 8001b20:	b538      	push	{r3, r4, r5, lr}
 8001b22:	4d07      	ldr	r5, [pc, #28]	@ (8001b40 <_read_r+0x20>)
 8001b24:	4604      	mov	r4, r0
 8001b26:	4608      	mov	r0, r1
 8001b28:	4611      	mov	r1, r2
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	602a      	str	r2, [r5, #0]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	f7ff f9c0 	bl	8000eb4 <_read>
 8001b34:	1c43      	adds	r3, r0, #1
 8001b36:	d102      	bne.n	8001b3e <_read_r+0x1e>
 8001b38:	682b      	ldr	r3, [r5, #0]
 8001b3a:	b103      	cbz	r3, 8001b3e <_read_r+0x1e>
 8001b3c:	6023      	str	r3, [r4, #0]
 8001b3e:	bd38      	pop	{r3, r4, r5, pc}
 8001b40:	2000030c 	.word	0x2000030c

08001b44 <_write_r>:
 8001b44:	b538      	push	{r3, r4, r5, lr}
 8001b46:	4d07      	ldr	r5, [pc, #28]	@ (8001b64 <_write_r+0x20>)
 8001b48:	4604      	mov	r4, r0
 8001b4a:	4608      	mov	r0, r1
 8001b4c:	4611      	mov	r1, r2
 8001b4e:	2200      	movs	r2, #0
 8001b50:	602a      	str	r2, [r5, #0]
 8001b52:	461a      	mov	r2, r3
 8001b54:	f7ff f9cb 	bl	8000eee <_write>
 8001b58:	1c43      	adds	r3, r0, #1
 8001b5a:	d102      	bne.n	8001b62 <_write_r+0x1e>
 8001b5c:	682b      	ldr	r3, [r5, #0]
 8001b5e:	b103      	cbz	r3, 8001b62 <_write_r+0x1e>
 8001b60:	6023      	str	r3, [r4, #0]
 8001b62:	bd38      	pop	{r3, r4, r5, pc}
 8001b64:	2000030c 	.word	0x2000030c

08001b68 <__errno>:
 8001b68:	4b01      	ldr	r3, [pc, #4]	@ (8001b70 <__errno+0x8>)
 8001b6a:	6818      	ldr	r0, [r3, #0]
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	20000020 	.word	0x20000020

08001b74 <__libc_init_array>:
 8001b74:	b570      	push	{r4, r5, r6, lr}
 8001b76:	4d0d      	ldr	r5, [pc, #52]	@ (8001bac <__libc_init_array+0x38>)
 8001b78:	4c0d      	ldr	r4, [pc, #52]	@ (8001bb0 <__libc_init_array+0x3c>)
 8001b7a:	1b64      	subs	r4, r4, r5
 8001b7c:	10a4      	asrs	r4, r4, #2
 8001b7e:	2600      	movs	r6, #0
 8001b80:	42a6      	cmp	r6, r4
 8001b82:	d109      	bne.n	8001b98 <__libc_init_array+0x24>
 8001b84:	4d0b      	ldr	r5, [pc, #44]	@ (8001bb4 <__libc_init_array+0x40>)
 8001b86:	4c0c      	ldr	r4, [pc, #48]	@ (8001bb8 <__libc_init_array+0x44>)
 8001b88:	f000 fd96 	bl	80026b8 <_init>
 8001b8c:	1b64      	subs	r4, r4, r5
 8001b8e:	10a4      	asrs	r4, r4, #2
 8001b90:	2600      	movs	r6, #0
 8001b92:	42a6      	cmp	r6, r4
 8001b94:	d105      	bne.n	8001ba2 <__libc_init_array+0x2e>
 8001b96:	bd70      	pop	{r4, r5, r6, pc}
 8001b98:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b9c:	4798      	blx	r3
 8001b9e:	3601      	adds	r6, #1
 8001ba0:	e7ee      	b.n	8001b80 <__libc_init_array+0xc>
 8001ba2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ba6:	4798      	blx	r3
 8001ba8:	3601      	adds	r6, #1
 8001baa:	e7f2      	b.n	8001b92 <__libc_init_array+0x1e>
 8001bac:	08002c90 	.word	0x08002c90
 8001bb0:	08002c90 	.word	0x08002c90
 8001bb4:	08002c90 	.word	0x08002c90
 8001bb8:	08002c94 	.word	0x08002c94

08001bbc <__retarget_lock_init_recursive>:
 8001bbc:	4770      	bx	lr

08001bbe <__retarget_lock_acquire_recursive>:
 8001bbe:	4770      	bx	lr

08001bc0 <__retarget_lock_release_recursive>:
 8001bc0:	4770      	bx	lr
	...

08001bc4 <_free_r>:
 8001bc4:	b538      	push	{r3, r4, r5, lr}
 8001bc6:	4605      	mov	r5, r0
 8001bc8:	2900      	cmp	r1, #0
 8001bca:	d041      	beq.n	8001c50 <_free_r+0x8c>
 8001bcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001bd0:	1f0c      	subs	r4, r1, #4
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	bfb8      	it	lt
 8001bd6:	18e4      	addlt	r4, r4, r3
 8001bd8:	f000 f8e0 	bl	8001d9c <__malloc_lock>
 8001bdc:	4a1d      	ldr	r2, [pc, #116]	@ (8001c54 <_free_r+0x90>)
 8001bde:	6813      	ldr	r3, [r2, #0]
 8001be0:	b933      	cbnz	r3, 8001bf0 <_free_r+0x2c>
 8001be2:	6063      	str	r3, [r4, #4]
 8001be4:	6014      	str	r4, [r2, #0]
 8001be6:	4628      	mov	r0, r5
 8001be8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001bec:	f000 b8dc 	b.w	8001da8 <__malloc_unlock>
 8001bf0:	42a3      	cmp	r3, r4
 8001bf2:	d908      	bls.n	8001c06 <_free_r+0x42>
 8001bf4:	6820      	ldr	r0, [r4, #0]
 8001bf6:	1821      	adds	r1, r4, r0
 8001bf8:	428b      	cmp	r3, r1
 8001bfa:	bf01      	itttt	eq
 8001bfc:	6819      	ldreq	r1, [r3, #0]
 8001bfe:	685b      	ldreq	r3, [r3, #4]
 8001c00:	1809      	addeq	r1, r1, r0
 8001c02:	6021      	streq	r1, [r4, #0]
 8001c04:	e7ed      	b.n	8001be2 <_free_r+0x1e>
 8001c06:	461a      	mov	r2, r3
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	b10b      	cbz	r3, 8001c10 <_free_r+0x4c>
 8001c0c:	42a3      	cmp	r3, r4
 8001c0e:	d9fa      	bls.n	8001c06 <_free_r+0x42>
 8001c10:	6811      	ldr	r1, [r2, #0]
 8001c12:	1850      	adds	r0, r2, r1
 8001c14:	42a0      	cmp	r0, r4
 8001c16:	d10b      	bne.n	8001c30 <_free_r+0x6c>
 8001c18:	6820      	ldr	r0, [r4, #0]
 8001c1a:	4401      	add	r1, r0
 8001c1c:	1850      	adds	r0, r2, r1
 8001c1e:	4283      	cmp	r3, r0
 8001c20:	6011      	str	r1, [r2, #0]
 8001c22:	d1e0      	bne.n	8001be6 <_free_r+0x22>
 8001c24:	6818      	ldr	r0, [r3, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	6053      	str	r3, [r2, #4]
 8001c2a:	4408      	add	r0, r1
 8001c2c:	6010      	str	r0, [r2, #0]
 8001c2e:	e7da      	b.n	8001be6 <_free_r+0x22>
 8001c30:	d902      	bls.n	8001c38 <_free_r+0x74>
 8001c32:	230c      	movs	r3, #12
 8001c34:	602b      	str	r3, [r5, #0]
 8001c36:	e7d6      	b.n	8001be6 <_free_r+0x22>
 8001c38:	6820      	ldr	r0, [r4, #0]
 8001c3a:	1821      	adds	r1, r4, r0
 8001c3c:	428b      	cmp	r3, r1
 8001c3e:	bf04      	itt	eq
 8001c40:	6819      	ldreq	r1, [r3, #0]
 8001c42:	685b      	ldreq	r3, [r3, #4]
 8001c44:	6063      	str	r3, [r4, #4]
 8001c46:	bf04      	itt	eq
 8001c48:	1809      	addeq	r1, r1, r0
 8001c4a:	6021      	streq	r1, [r4, #0]
 8001c4c:	6054      	str	r4, [r2, #4]
 8001c4e:	e7ca      	b.n	8001be6 <_free_r+0x22>
 8001c50:	bd38      	pop	{r3, r4, r5, pc}
 8001c52:	bf00      	nop
 8001c54:	20000318 	.word	0x20000318

08001c58 <sbrk_aligned>:
 8001c58:	b570      	push	{r4, r5, r6, lr}
 8001c5a:	4e0f      	ldr	r6, [pc, #60]	@ (8001c98 <sbrk_aligned+0x40>)
 8001c5c:	460c      	mov	r4, r1
 8001c5e:	6831      	ldr	r1, [r6, #0]
 8001c60:	4605      	mov	r5, r0
 8001c62:	b911      	cbnz	r1, 8001c6a <sbrk_aligned+0x12>
 8001c64:	f000 fcd4 	bl	8002610 <_sbrk_r>
 8001c68:	6030      	str	r0, [r6, #0]
 8001c6a:	4621      	mov	r1, r4
 8001c6c:	4628      	mov	r0, r5
 8001c6e:	f000 fccf 	bl	8002610 <_sbrk_r>
 8001c72:	1c43      	adds	r3, r0, #1
 8001c74:	d103      	bne.n	8001c7e <sbrk_aligned+0x26>
 8001c76:	f04f 34ff 	mov.w	r4, #4294967295
 8001c7a:	4620      	mov	r0, r4
 8001c7c:	bd70      	pop	{r4, r5, r6, pc}
 8001c7e:	1cc4      	adds	r4, r0, #3
 8001c80:	f024 0403 	bic.w	r4, r4, #3
 8001c84:	42a0      	cmp	r0, r4
 8001c86:	d0f8      	beq.n	8001c7a <sbrk_aligned+0x22>
 8001c88:	1a21      	subs	r1, r4, r0
 8001c8a:	4628      	mov	r0, r5
 8001c8c:	f000 fcc0 	bl	8002610 <_sbrk_r>
 8001c90:	3001      	adds	r0, #1
 8001c92:	d1f2      	bne.n	8001c7a <sbrk_aligned+0x22>
 8001c94:	e7ef      	b.n	8001c76 <sbrk_aligned+0x1e>
 8001c96:	bf00      	nop
 8001c98:	20000314 	.word	0x20000314

08001c9c <_malloc_r>:
 8001c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ca0:	1ccd      	adds	r5, r1, #3
 8001ca2:	f025 0503 	bic.w	r5, r5, #3
 8001ca6:	3508      	adds	r5, #8
 8001ca8:	2d0c      	cmp	r5, #12
 8001caa:	bf38      	it	cc
 8001cac:	250c      	movcc	r5, #12
 8001cae:	2d00      	cmp	r5, #0
 8001cb0:	4606      	mov	r6, r0
 8001cb2:	db01      	blt.n	8001cb8 <_malloc_r+0x1c>
 8001cb4:	42a9      	cmp	r1, r5
 8001cb6:	d904      	bls.n	8001cc2 <_malloc_r+0x26>
 8001cb8:	230c      	movs	r3, #12
 8001cba:	6033      	str	r3, [r6, #0]
 8001cbc:	2000      	movs	r0, #0
 8001cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001cc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001d98 <_malloc_r+0xfc>
 8001cc6:	f000 f869 	bl	8001d9c <__malloc_lock>
 8001cca:	f8d8 3000 	ldr.w	r3, [r8]
 8001cce:	461c      	mov	r4, r3
 8001cd0:	bb44      	cbnz	r4, 8001d24 <_malloc_r+0x88>
 8001cd2:	4629      	mov	r1, r5
 8001cd4:	4630      	mov	r0, r6
 8001cd6:	f7ff ffbf 	bl	8001c58 <sbrk_aligned>
 8001cda:	1c43      	adds	r3, r0, #1
 8001cdc:	4604      	mov	r4, r0
 8001cde:	d158      	bne.n	8001d92 <_malloc_r+0xf6>
 8001ce0:	f8d8 4000 	ldr.w	r4, [r8]
 8001ce4:	4627      	mov	r7, r4
 8001ce6:	2f00      	cmp	r7, #0
 8001ce8:	d143      	bne.n	8001d72 <_malloc_r+0xd6>
 8001cea:	2c00      	cmp	r4, #0
 8001cec:	d04b      	beq.n	8001d86 <_malloc_r+0xea>
 8001cee:	6823      	ldr	r3, [r4, #0]
 8001cf0:	4639      	mov	r1, r7
 8001cf2:	4630      	mov	r0, r6
 8001cf4:	eb04 0903 	add.w	r9, r4, r3
 8001cf8:	f000 fc8a 	bl	8002610 <_sbrk_r>
 8001cfc:	4581      	cmp	r9, r0
 8001cfe:	d142      	bne.n	8001d86 <_malloc_r+0xea>
 8001d00:	6821      	ldr	r1, [r4, #0]
 8001d02:	1a6d      	subs	r5, r5, r1
 8001d04:	4629      	mov	r1, r5
 8001d06:	4630      	mov	r0, r6
 8001d08:	f7ff ffa6 	bl	8001c58 <sbrk_aligned>
 8001d0c:	3001      	adds	r0, #1
 8001d0e:	d03a      	beq.n	8001d86 <_malloc_r+0xea>
 8001d10:	6823      	ldr	r3, [r4, #0]
 8001d12:	442b      	add	r3, r5
 8001d14:	6023      	str	r3, [r4, #0]
 8001d16:	f8d8 3000 	ldr.w	r3, [r8]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	bb62      	cbnz	r2, 8001d78 <_malloc_r+0xdc>
 8001d1e:	f8c8 7000 	str.w	r7, [r8]
 8001d22:	e00f      	b.n	8001d44 <_malloc_r+0xa8>
 8001d24:	6822      	ldr	r2, [r4, #0]
 8001d26:	1b52      	subs	r2, r2, r5
 8001d28:	d420      	bmi.n	8001d6c <_malloc_r+0xd0>
 8001d2a:	2a0b      	cmp	r2, #11
 8001d2c:	d917      	bls.n	8001d5e <_malloc_r+0xc2>
 8001d2e:	1961      	adds	r1, r4, r5
 8001d30:	42a3      	cmp	r3, r4
 8001d32:	6025      	str	r5, [r4, #0]
 8001d34:	bf18      	it	ne
 8001d36:	6059      	strne	r1, [r3, #4]
 8001d38:	6863      	ldr	r3, [r4, #4]
 8001d3a:	bf08      	it	eq
 8001d3c:	f8c8 1000 	streq.w	r1, [r8]
 8001d40:	5162      	str	r2, [r4, r5]
 8001d42:	604b      	str	r3, [r1, #4]
 8001d44:	4630      	mov	r0, r6
 8001d46:	f000 f82f 	bl	8001da8 <__malloc_unlock>
 8001d4a:	f104 000b 	add.w	r0, r4, #11
 8001d4e:	1d23      	adds	r3, r4, #4
 8001d50:	f020 0007 	bic.w	r0, r0, #7
 8001d54:	1ac2      	subs	r2, r0, r3
 8001d56:	bf1c      	itt	ne
 8001d58:	1a1b      	subne	r3, r3, r0
 8001d5a:	50a3      	strne	r3, [r4, r2]
 8001d5c:	e7af      	b.n	8001cbe <_malloc_r+0x22>
 8001d5e:	6862      	ldr	r2, [r4, #4]
 8001d60:	42a3      	cmp	r3, r4
 8001d62:	bf0c      	ite	eq
 8001d64:	f8c8 2000 	streq.w	r2, [r8]
 8001d68:	605a      	strne	r2, [r3, #4]
 8001d6a:	e7eb      	b.n	8001d44 <_malloc_r+0xa8>
 8001d6c:	4623      	mov	r3, r4
 8001d6e:	6864      	ldr	r4, [r4, #4]
 8001d70:	e7ae      	b.n	8001cd0 <_malloc_r+0x34>
 8001d72:	463c      	mov	r4, r7
 8001d74:	687f      	ldr	r7, [r7, #4]
 8001d76:	e7b6      	b.n	8001ce6 <_malloc_r+0x4a>
 8001d78:	461a      	mov	r2, r3
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	42a3      	cmp	r3, r4
 8001d7e:	d1fb      	bne.n	8001d78 <_malloc_r+0xdc>
 8001d80:	2300      	movs	r3, #0
 8001d82:	6053      	str	r3, [r2, #4]
 8001d84:	e7de      	b.n	8001d44 <_malloc_r+0xa8>
 8001d86:	230c      	movs	r3, #12
 8001d88:	6033      	str	r3, [r6, #0]
 8001d8a:	4630      	mov	r0, r6
 8001d8c:	f000 f80c 	bl	8001da8 <__malloc_unlock>
 8001d90:	e794      	b.n	8001cbc <_malloc_r+0x20>
 8001d92:	6005      	str	r5, [r0, #0]
 8001d94:	e7d6      	b.n	8001d44 <_malloc_r+0xa8>
 8001d96:	bf00      	nop
 8001d98:	20000318 	.word	0x20000318

08001d9c <__malloc_lock>:
 8001d9c:	4801      	ldr	r0, [pc, #4]	@ (8001da4 <__malloc_lock+0x8>)
 8001d9e:	f7ff bf0e 	b.w	8001bbe <__retarget_lock_acquire_recursive>
 8001da2:	bf00      	nop
 8001da4:	20000310 	.word	0x20000310

08001da8 <__malloc_unlock>:
 8001da8:	4801      	ldr	r0, [pc, #4]	@ (8001db0 <__malloc_unlock+0x8>)
 8001daa:	f7ff bf09 	b.w	8001bc0 <__retarget_lock_release_recursive>
 8001dae:	bf00      	nop
 8001db0:	20000310 	.word	0x20000310

08001db4 <__ssputs_r>:
 8001db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001db8:	688e      	ldr	r6, [r1, #8]
 8001dba:	461f      	mov	r7, r3
 8001dbc:	42be      	cmp	r6, r7
 8001dbe:	680b      	ldr	r3, [r1, #0]
 8001dc0:	4682      	mov	sl, r0
 8001dc2:	460c      	mov	r4, r1
 8001dc4:	4690      	mov	r8, r2
 8001dc6:	d82d      	bhi.n	8001e24 <__ssputs_r+0x70>
 8001dc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001dcc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8001dd0:	d026      	beq.n	8001e20 <__ssputs_r+0x6c>
 8001dd2:	6965      	ldr	r5, [r4, #20]
 8001dd4:	6909      	ldr	r1, [r1, #16]
 8001dd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001dda:	eba3 0901 	sub.w	r9, r3, r1
 8001dde:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001de2:	1c7b      	adds	r3, r7, #1
 8001de4:	444b      	add	r3, r9
 8001de6:	106d      	asrs	r5, r5, #1
 8001de8:	429d      	cmp	r5, r3
 8001dea:	bf38      	it	cc
 8001dec:	461d      	movcc	r5, r3
 8001dee:	0553      	lsls	r3, r2, #21
 8001df0:	d527      	bpl.n	8001e42 <__ssputs_r+0x8e>
 8001df2:	4629      	mov	r1, r5
 8001df4:	f7ff ff52 	bl	8001c9c <_malloc_r>
 8001df8:	4606      	mov	r6, r0
 8001dfa:	b360      	cbz	r0, 8001e56 <__ssputs_r+0xa2>
 8001dfc:	6921      	ldr	r1, [r4, #16]
 8001dfe:	464a      	mov	r2, r9
 8001e00:	f000 fc16 	bl	8002630 <memcpy>
 8001e04:	89a3      	ldrh	r3, [r4, #12]
 8001e06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001e0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e0e:	81a3      	strh	r3, [r4, #12]
 8001e10:	6126      	str	r6, [r4, #16]
 8001e12:	6165      	str	r5, [r4, #20]
 8001e14:	444e      	add	r6, r9
 8001e16:	eba5 0509 	sub.w	r5, r5, r9
 8001e1a:	6026      	str	r6, [r4, #0]
 8001e1c:	60a5      	str	r5, [r4, #8]
 8001e1e:	463e      	mov	r6, r7
 8001e20:	42be      	cmp	r6, r7
 8001e22:	d900      	bls.n	8001e26 <__ssputs_r+0x72>
 8001e24:	463e      	mov	r6, r7
 8001e26:	6820      	ldr	r0, [r4, #0]
 8001e28:	4632      	mov	r2, r6
 8001e2a:	4641      	mov	r1, r8
 8001e2c:	f000 fbb4 	bl	8002598 <memmove>
 8001e30:	68a3      	ldr	r3, [r4, #8]
 8001e32:	1b9b      	subs	r3, r3, r6
 8001e34:	60a3      	str	r3, [r4, #8]
 8001e36:	6823      	ldr	r3, [r4, #0]
 8001e38:	4433      	add	r3, r6
 8001e3a:	6023      	str	r3, [r4, #0]
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e42:	462a      	mov	r2, r5
 8001e44:	f000 fc02 	bl	800264c <_realloc_r>
 8001e48:	4606      	mov	r6, r0
 8001e4a:	2800      	cmp	r0, #0
 8001e4c:	d1e0      	bne.n	8001e10 <__ssputs_r+0x5c>
 8001e4e:	6921      	ldr	r1, [r4, #16]
 8001e50:	4650      	mov	r0, sl
 8001e52:	f7ff feb7 	bl	8001bc4 <_free_r>
 8001e56:	230c      	movs	r3, #12
 8001e58:	f8ca 3000 	str.w	r3, [sl]
 8001e5c:	89a3      	ldrh	r3, [r4, #12]
 8001e5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e62:	81a3      	strh	r3, [r4, #12]
 8001e64:	f04f 30ff 	mov.w	r0, #4294967295
 8001e68:	e7e9      	b.n	8001e3e <__ssputs_r+0x8a>
	...

08001e6c <_svfiprintf_r>:
 8001e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e70:	4698      	mov	r8, r3
 8001e72:	898b      	ldrh	r3, [r1, #12]
 8001e74:	061b      	lsls	r3, r3, #24
 8001e76:	b09d      	sub	sp, #116	@ 0x74
 8001e78:	4607      	mov	r7, r0
 8001e7a:	460d      	mov	r5, r1
 8001e7c:	4614      	mov	r4, r2
 8001e7e:	d510      	bpl.n	8001ea2 <_svfiprintf_r+0x36>
 8001e80:	690b      	ldr	r3, [r1, #16]
 8001e82:	b973      	cbnz	r3, 8001ea2 <_svfiprintf_r+0x36>
 8001e84:	2140      	movs	r1, #64	@ 0x40
 8001e86:	f7ff ff09 	bl	8001c9c <_malloc_r>
 8001e8a:	6028      	str	r0, [r5, #0]
 8001e8c:	6128      	str	r0, [r5, #16]
 8001e8e:	b930      	cbnz	r0, 8001e9e <_svfiprintf_r+0x32>
 8001e90:	230c      	movs	r3, #12
 8001e92:	603b      	str	r3, [r7, #0]
 8001e94:	f04f 30ff 	mov.w	r0, #4294967295
 8001e98:	b01d      	add	sp, #116	@ 0x74
 8001e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e9e:	2340      	movs	r3, #64	@ 0x40
 8001ea0:	616b      	str	r3, [r5, #20]
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	9309      	str	r3, [sp, #36]	@ 0x24
 8001ea6:	2320      	movs	r3, #32
 8001ea8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001eac:	f8cd 800c 	str.w	r8, [sp, #12]
 8001eb0:	2330      	movs	r3, #48	@ 0x30
 8001eb2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002050 <_svfiprintf_r+0x1e4>
 8001eb6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001eba:	f04f 0901 	mov.w	r9, #1
 8001ebe:	4623      	mov	r3, r4
 8001ec0:	469a      	mov	sl, r3
 8001ec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001ec6:	b10a      	cbz	r2, 8001ecc <_svfiprintf_r+0x60>
 8001ec8:	2a25      	cmp	r2, #37	@ 0x25
 8001eca:	d1f9      	bne.n	8001ec0 <_svfiprintf_r+0x54>
 8001ecc:	ebba 0b04 	subs.w	fp, sl, r4
 8001ed0:	d00b      	beq.n	8001eea <_svfiprintf_r+0x7e>
 8001ed2:	465b      	mov	r3, fp
 8001ed4:	4622      	mov	r2, r4
 8001ed6:	4629      	mov	r1, r5
 8001ed8:	4638      	mov	r0, r7
 8001eda:	f7ff ff6b 	bl	8001db4 <__ssputs_r>
 8001ede:	3001      	adds	r0, #1
 8001ee0:	f000 80a7 	beq.w	8002032 <_svfiprintf_r+0x1c6>
 8001ee4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001ee6:	445a      	add	r2, fp
 8001ee8:	9209      	str	r2, [sp, #36]	@ 0x24
 8001eea:	f89a 3000 	ldrb.w	r3, [sl]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 809f 	beq.w	8002032 <_svfiprintf_r+0x1c6>
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8001efa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001efe:	f10a 0a01 	add.w	sl, sl, #1
 8001f02:	9304      	str	r3, [sp, #16]
 8001f04:	9307      	str	r3, [sp, #28]
 8001f06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001f0a:	931a      	str	r3, [sp, #104]	@ 0x68
 8001f0c:	4654      	mov	r4, sl
 8001f0e:	2205      	movs	r2, #5
 8001f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f14:	484e      	ldr	r0, [pc, #312]	@ (8002050 <_svfiprintf_r+0x1e4>)
 8001f16:	f7fe f95b 	bl	80001d0 <memchr>
 8001f1a:	9a04      	ldr	r2, [sp, #16]
 8001f1c:	b9d8      	cbnz	r0, 8001f56 <_svfiprintf_r+0xea>
 8001f1e:	06d0      	lsls	r0, r2, #27
 8001f20:	bf44      	itt	mi
 8001f22:	2320      	movmi	r3, #32
 8001f24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001f28:	0711      	lsls	r1, r2, #28
 8001f2a:	bf44      	itt	mi
 8001f2c:	232b      	movmi	r3, #43	@ 0x2b
 8001f2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001f32:	f89a 3000 	ldrb.w	r3, [sl]
 8001f36:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f38:	d015      	beq.n	8001f66 <_svfiprintf_r+0xfa>
 8001f3a:	9a07      	ldr	r2, [sp, #28]
 8001f3c:	4654      	mov	r4, sl
 8001f3e:	2000      	movs	r0, #0
 8001f40:	f04f 0c0a 	mov.w	ip, #10
 8001f44:	4621      	mov	r1, r4
 8001f46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001f4a:	3b30      	subs	r3, #48	@ 0x30
 8001f4c:	2b09      	cmp	r3, #9
 8001f4e:	d94b      	bls.n	8001fe8 <_svfiprintf_r+0x17c>
 8001f50:	b1b0      	cbz	r0, 8001f80 <_svfiprintf_r+0x114>
 8001f52:	9207      	str	r2, [sp, #28]
 8001f54:	e014      	b.n	8001f80 <_svfiprintf_r+0x114>
 8001f56:	eba0 0308 	sub.w	r3, r0, r8
 8001f5a:	fa09 f303 	lsl.w	r3, r9, r3
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	9304      	str	r3, [sp, #16]
 8001f62:	46a2      	mov	sl, r4
 8001f64:	e7d2      	b.n	8001f0c <_svfiprintf_r+0xa0>
 8001f66:	9b03      	ldr	r3, [sp, #12]
 8001f68:	1d19      	adds	r1, r3, #4
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	9103      	str	r1, [sp, #12]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	bfbb      	ittet	lt
 8001f72:	425b      	neglt	r3, r3
 8001f74:	f042 0202 	orrlt.w	r2, r2, #2
 8001f78:	9307      	strge	r3, [sp, #28]
 8001f7a:	9307      	strlt	r3, [sp, #28]
 8001f7c:	bfb8      	it	lt
 8001f7e:	9204      	strlt	r2, [sp, #16]
 8001f80:	7823      	ldrb	r3, [r4, #0]
 8001f82:	2b2e      	cmp	r3, #46	@ 0x2e
 8001f84:	d10a      	bne.n	8001f9c <_svfiprintf_r+0x130>
 8001f86:	7863      	ldrb	r3, [r4, #1]
 8001f88:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f8a:	d132      	bne.n	8001ff2 <_svfiprintf_r+0x186>
 8001f8c:	9b03      	ldr	r3, [sp, #12]
 8001f8e:	1d1a      	adds	r2, r3, #4
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	9203      	str	r2, [sp, #12]
 8001f94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001f98:	3402      	adds	r4, #2
 8001f9a:	9305      	str	r3, [sp, #20]
 8001f9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002060 <_svfiprintf_r+0x1f4>
 8001fa0:	7821      	ldrb	r1, [r4, #0]
 8001fa2:	2203      	movs	r2, #3
 8001fa4:	4650      	mov	r0, sl
 8001fa6:	f7fe f913 	bl	80001d0 <memchr>
 8001faa:	b138      	cbz	r0, 8001fbc <_svfiprintf_r+0x150>
 8001fac:	9b04      	ldr	r3, [sp, #16]
 8001fae:	eba0 000a 	sub.w	r0, r0, sl
 8001fb2:	2240      	movs	r2, #64	@ 0x40
 8001fb4:	4082      	lsls	r2, r0
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	3401      	adds	r4, #1
 8001fba:	9304      	str	r3, [sp, #16]
 8001fbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001fc0:	4824      	ldr	r0, [pc, #144]	@ (8002054 <_svfiprintf_r+0x1e8>)
 8001fc2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001fc6:	2206      	movs	r2, #6
 8001fc8:	f7fe f902 	bl	80001d0 <memchr>
 8001fcc:	2800      	cmp	r0, #0
 8001fce:	d036      	beq.n	800203e <_svfiprintf_r+0x1d2>
 8001fd0:	4b21      	ldr	r3, [pc, #132]	@ (8002058 <_svfiprintf_r+0x1ec>)
 8001fd2:	bb1b      	cbnz	r3, 800201c <_svfiprintf_r+0x1b0>
 8001fd4:	9b03      	ldr	r3, [sp, #12]
 8001fd6:	3307      	adds	r3, #7
 8001fd8:	f023 0307 	bic.w	r3, r3, #7
 8001fdc:	3308      	adds	r3, #8
 8001fde:	9303      	str	r3, [sp, #12]
 8001fe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001fe2:	4433      	add	r3, r6
 8001fe4:	9309      	str	r3, [sp, #36]	@ 0x24
 8001fe6:	e76a      	b.n	8001ebe <_svfiprintf_r+0x52>
 8001fe8:	fb0c 3202 	mla	r2, ip, r2, r3
 8001fec:	460c      	mov	r4, r1
 8001fee:	2001      	movs	r0, #1
 8001ff0:	e7a8      	b.n	8001f44 <_svfiprintf_r+0xd8>
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	3401      	adds	r4, #1
 8001ff6:	9305      	str	r3, [sp, #20]
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	f04f 0c0a 	mov.w	ip, #10
 8001ffe:	4620      	mov	r0, r4
 8002000:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002004:	3a30      	subs	r2, #48	@ 0x30
 8002006:	2a09      	cmp	r2, #9
 8002008:	d903      	bls.n	8002012 <_svfiprintf_r+0x1a6>
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0c6      	beq.n	8001f9c <_svfiprintf_r+0x130>
 800200e:	9105      	str	r1, [sp, #20]
 8002010:	e7c4      	b.n	8001f9c <_svfiprintf_r+0x130>
 8002012:	fb0c 2101 	mla	r1, ip, r1, r2
 8002016:	4604      	mov	r4, r0
 8002018:	2301      	movs	r3, #1
 800201a:	e7f0      	b.n	8001ffe <_svfiprintf_r+0x192>
 800201c:	ab03      	add	r3, sp, #12
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	462a      	mov	r2, r5
 8002022:	4b0e      	ldr	r3, [pc, #56]	@ (800205c <_svfiprintf_r+0x1f0>)
 8002024:	a904      	add	r1, sp, #16
 8002026:	4638      	mov	r0, r7
 8002028:	f3af 8000 	nop.w
 800202c:	1c42      	adds	r2, r0, #1
 800202e:	4606      	mov	r6, r0
 8002030:	d1d6      	bne.n	8001fe0 <_svfiprintf_r+0x174>
 8002032:	89ab      	ldrh	r3, [r5, #12]
 8002034:	065b      	lsls	r3, r3, #25
 8002036:	f53f af2d 	bmi.w	8001e94 <_svfiprintf_r+0x28>
 800203a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800203c:	e72c      	b.n	8001e98 <_svfiprintf_r+0x2c>
 800203e:	ab03      	add	r3, sp, #12
 8002040:	9300      	str	r3, [sp, #0]
 8002042:	462a      	mov	r2, r5
 8002044:	4b05      	ldr	r3, [pc, #20]	@ (800205c <_svfiprintf_r+0x1f0>)
 8002046:	a904      	add	r1, sp, #16
 8002048:	4638      	mov	r0, r7
 800204a:	f000 f879 	bl	8002140 <_printf_i>
 800204e:	e7ed      	b.n	800202c <_svfiprintf_r+0x1c0>
 8002050:	08002c55 	.word	0x08002c55
 8002054:	08002c5f 	.word	0x08002c5f
 8002058:	00000000 	.word	0x00000000
 800205c:	08001db5 	.word	0x08001db5
 8002060:	08002c5b 	.word	0x08002c5b

08002064 <_printf_common>:
 8002064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002068:	4616      	mov	r6, r2
 800206a:	4698      	mov	r8, r3
 800206c:	688a      	ldr	r2, [r1, #8]
 800206e:	690b      	ldr	r3, [r1, #16]
 8002070:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002074:	4293      	cmp	r3, r2
 8002076:	bfb8      	it	lt
 8002078:	4613      	movlt	r3, r2
 800207a:	6033      	str	r3, [r6, #0]
 800207c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002080:	4607      	mov	r7, r0
 8002082:	460c      	mov	r4, r1
 8002084:	b10a      	cbz	r2, 800208a <_printf_common+0x26>
 8002086:	3301      	adds	r3, #1
 8002088:	6033      	str	r3, [r6, #0]
 800208a:	6823      	ldr	r3, [r4, #0]
 800208c:	0699      	lsls	r1, r3, #26
 800208e:	bf42      	ittt	mi
 8002090:	6833      	ldrmi	r3, [r6, #0]
 8002092:	3302      	addmi	r3, #2
 8002094:	6033      	strmi	r3, [r6, #0]
 8002096:	6825      	ldr	r5, [r4, #0]
 8002098:	f015 0506 	ands.w	r5, r5, #6
 800209c:	d106      	bne.n	80020ac <_printf_common+0x48>
 800209e:	f104 0a19 	add.w	sl, r4, #25
 80020a2:	68e3      	ldr	r3, [r4, #12]
 80020a4:	6832      	ldr	r2, [r6, #0]
 80020a6:	1a9b      	subs	r3, r3, r2
 80020a8:	42ab      	cmp	r3, r5
 80020aa:	dc26      	bgt.n	80020fa <_printf_common+0x96>
 80020ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80020b0:	6822      	ldr	r2, [r4, #0]
 80020b2:	3b00      	subs	r3, #0
 80020b4:	bf18      	it	ne
 80020b6:	2301      	movne	r3, #1
 80020b8:	0692      	lsls	r2, r2, #26
 80020ba:	d42b      	bmi.n	8002114 <_printf_common+0xb0>
 80020bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80020c0:	4641      	mov	r1, r8
 80020c2:	4638      	mov	r0, r7
 80020c4:	47c8      	blx	r9
 80020c6:	3001      	adds	r0, #1
 80020c8:	d01e      	beq.n	8002108 <_printf_common+0xa4>
 80020ca:	6823      	ldr	r3, [r4, #0]
 80020cc:	6922      	ldr	r2, [r4, #16]
 80020ce:	f003 0306 	and.w	r3, r3, #6
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	bf02      	ittt	eq
 80020d6:	68e5      	ldreq	r5, [r4, #12]
 80020d8:	6833      	ldreq	r3, [r6, #0]
 80020da:	1aed      	subeq	r5, r5, r3
 80020dc:	68a3      	ldr	r3, [r4, #8]
 80020de:	bf0c      	ite	eq
 80020e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80020e4:	2500      	movne	r5, #0
 80020e6:	4293      	cmp	r3, r2
 80020e8:	bfc4      	itt	gt
 80020ea:	1a9b      	subgt	r3, r3, r2
 80020ec:	18ed      	addgt	r5, r5, r3
 80020ee:	2600      	movs	r6, #0
 80020f0:	341a      	adds	r4, #26
 80020f2:	42b5      	cmp	r5, r6
 80020f4:	d11a      	bne.n	800212c <_printf_common+0xc8>
 80020f6:	2000      	movs	r0, #0
 80020f8:	e008      	b.n	800210c <_printf_common+0xa8>
 80020fa:	2301      	movs	r3, #1
 80020fc:	4652      	mov	r2, sl
 80020fe:	4641      	mov	r1, r8
 8002100:	4638      	mov	r0, r7
 8002102:	47c8      	blx	r9
 8002104:	3001      	adds	r0, #1
 8002106:	d103      	bne.n	8002110 <_printf_common+0xac>
 8002108:	f04f 30ff 	mov.w	r0, #4294967295
 800210c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002110:	3501      	adds	r5, #1
 8002112:	e7c6      	b.n	80020a2 <_printf_common+0x3e>
 8002114:	18e1      	adds	r1, r4, r3
 8002116:	1c5a      	adds	r2, r3, #1
 8002118:	2030      	movs	r0, #48	@ 0x30
 800211a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800211e:	4422      	add	r2, r4
 8002120:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002124:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002128:	3302      	adds	r3, #2
 800212a:	e7c7      	b.n	80020bc <_printf_common+0x58>
 800212c:	2301      	movs	r3, #1
 800212e:	4622      	mov	r2, r4
 8002130:	4641      	mov	r1, r8
 8002132:	4638      	mov	r0, r7
 8002134:	47c8      	blx	r9
 8002136:	3001      	adds	r0, #1
 8002138:	d0e6      	beq.n	8002108 <_printf_common+0xa4>
 800213a:	3601      	adds	r6, #1
 800213c:	e7d9      	b.n	80020f2 <_printf_common+0x8e>
	...

08002140 <_printf_i>:
 8002140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002144:	7e0f      	ldrb	r7, [r1, #24]
 8002146:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002148:	2f78      	cmp	r7, #120	@ 0x78
 800214a:	4691      	mov	r9, r2
 800214c:	4680      	mov	r8, r0
 800214e:	460c      	mov	r4, r1
 8002150:	469a      	mov	sl, r3
 8002152:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002156:	d807      	bhi.n	8002168 <_printf_i+0x28>
 8002158:	2f62      	cmp	r7, #98	@ 0x62
 800215a:	d80a      	bhi.n	8002172 <_printf_i+0x32>
 800215c:	2f00      	cmp	r7, #0
 800215e:	f000 80d1 	beq.w	8002304 <_printf_i+0x1c4>
 8002162:	2f58      	cmp	r7, #88	@ 0x58
 8002164:	f000 80b8 	beq.w	80022d8 <_printf_i+0x198>
 8002168:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800216c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002170:	e03a      	b.n	80021e8 <_printf_i+0xa8>
 8002172:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002176:	2b15      	cmp	r3, #21
 8002178:	d8f6      	bhi.n	8002168 <_printf_i+0x28>
 800217a:	a101      	add	r1, pc, #4	@ (adr r1, 8002180 <_printf_i+0x40>)
 800217c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002180:	080021d9 	.word	0x080021d9
 8002184:	080021ed 	.word	0x080021ed
 8002188:	08002169 	.word	0x08002169
 800218c:	08002169 	.word	0x08002169
 8002190:	08002169 	.word	0x08002169
 8002194:	08002169 	.word	0x08002169
 8002198:	080021ed 	.word	0x080021ed
 800219c:	08002169 	.word	0x08002169
 80021a0:	08002169 	.word	0x08002169
 80021a4:	08002169 	.word	0x08002169
 80021a8:	08002169 	.word	0x08002169
 80021ac:	080022eb 	.word	0x080022eb
 80021b0:	08002217 	.word	0x08002217
 80021b4:	080022a5 	.word	0x080022a5
 80021b8:	08002169 	.word	0x08002169
 80021bc:	08002169 	.word	0x08002169
 80021c0:	0800230d 	.word	0x0800230d
 80021c4:	08002169 	.word	0x08002169
 80021c8:	08002217 	.word	0x08002217
 80021cc:	08002169 	.word	0x08002169
 80021d0:	08002169 	.word	0x08002169
 80021d4:	080022ad 	.word	0x080022ad
 80021d8:	6833      	ldr	r3, [r6, #0]
 80021da:	1d1a      	adds	r2, r3, #4
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	6032      	str	r2, [r6, #0]
 80021e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80021e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80021e8:	2301      	movs	r3, #1
 80021ea:	e09c      	b.n	8002326 <_printf_i+0x1e6>
 80021ec:	6833      	ldr	r3, [r6, #0]
 80021ee:	6820      	ldr	r0, [r4, #0]
 80021f0:	1d19      	adds	r1, r3, #4
 80021f2:	6031      	str	r1, [r6, #0]
 80021f4:	0606      	lsls	r6, r0, #24
 80021f6:	d501      	bpl.n	80021fc <_printf_i+0xbc>
 80021f8:	681d      	ldr	r5, [r3, #0]
 80021fa:	e003      	b.n	8002204 <_printf_i+0xc4>
 80021fc:	0645      	lsls	r5, r0, #25
 80021fe:	d5fb      	bpl.n	80021f8 <_printf_i+0xb8>
 8002200:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002204:	2d00      	cmp	r5, #0
 8002206:	da03      	bge.n	8002210 <_printf_i+0xd0>
 8002208:	232d      	movs	r3, #45	@ 0x2d
 800220a:	426d      	negs	r5, r5
 800220c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002210:	4858      	ldr	r0, [pc, #352]	@ (8002374 <_printf_i+0x234>)
 8002212:	230a      	movs	r3, #10
 8002214:	e011      	b.n	800223a <_printf_i+0xfa>
 8002216:	6821      	ldr	r1, [r4, #0]
 8002218:	6833      	ldr	r3, [r6, #0]
 800221a:	0608      	lsls	r0, r1, #24
 800221c:	f853 5b04 	ldr.w	r5, [r3], #4
 8002220:	d402      	bmi.n	8002228 <_printf_i+0xe8>
 8002222:	0649      	lsls	r1, r1, #25
 8002224:	bf48      	it	mi
 8002226:	b2ad      	uxthmi	r5, r5
 8002228:	2f6f      	cmp	r7, #111	@ 0x6f
 800222a:	4852      	ldr	r0, [pc, #328]	@ (8002374 <_printf_i+0x234>)
 800222c:	6033      	str	r3, [r6, #0]
 800222e:	bf14      	ite	ne
 8002230:	230a      	movne	r3, #10
 8002232:	2308      	moveq	r3, #8
 8002234:	2100      	movs	r1, #0
 8002236:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800223a:	6866      	ldr	r6, [r4, #4]
 800223c:	60a6      	str	r6, [r4, #8]
 800223e:	2e00      	cmp	r6, #0
 8002240:	db05      	blt.n	800224e <_printf_i+0x10e>
 8002242:	6821      	ldr	r1, [r4, #0]
 8002244:	432e      	orrs	r6, r5
 8002246:	f021 0104 	bic.w	r1, r1, #4
 800224a:	6021      	str	r1, [r4, #0]
 800224c:	d04b      	beq.n	80022e6 <_printf_i+0x1a6>
 800224e:	4616      	mov	r6, r2
 8002250:	fbb5 f1f3 	udiv	r1, r5, r3
 8002254:	fb03 5711 	mls	r7, r3, r1, r5
 8002258:	5dc7      	ldrb	r7, [r0, r7]
 800225a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800225e:	462f      	mov	r7, r5
 8002260:	42bb      	cmp	r3, r7
 8002262:	460d      	mov	r5, r1
 8002264:	d9f4      	bls.n	8002250 <_printf_i+0x110>
 8002266:	2b08      	cmp	r3, #8
 8002268:	d10b      	bne.n	8002282 <_printf_i+0x142>
 800226a:	6823      	ldr	r3, [r4, #0]
 800226c:	07df      	lsls	r7, r3, #31
 800226e:	d508      	bpl.n	8002282 <_printf_i+0x142>
 8002270:	6923      	ldr	r3, [r4, #16]
 8002272:	6861      	ldr	r1, [r4, #4]
 8002274:	4299      	cmp	r1, r3
 8002276:	bfde      	ittt	le
 8002278:	2330      	movle	r3, #48	@ 0x30
 800227a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800227e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002282:	1b92      	subs	r2, r2, r6
 8002284:	6122      	str	r2, [r4, #16]
 8002286:	f8cd a000 	str.w	sl, [sp]
 800228a:	464b      	mov	r3, r9
 800228c:	aa03      	add	r2, sp, #12
 800228e:	4621      	mov	r1, r4
 8002290:	4640      	mov	r0, r8
 8002292:	f7ff fee7 	bl	8002064 <_printf_common>
 8002296:	3001      	adds	r0, #1
 8002298:	d14a      	bne.n	8002330 <_printf_i+0x1f0>
 800229a:	f04f 30ff 	mov.w	r0, #4294967295
 800229e:	b004      	add	sp, #16
 80022a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022a4:	6823      	ldr	r3, [r4, #0]
 80022a6:	f043 0320 	orr.w	r3, r3, #32
 80022aa:	6023      	str	r3, [r4, #0]
 80022ac:	4832      	ldr	r0, [pc, #200]	@ (8002378 <_printf_i+0x238>)
 80022ae:	2778      	movs	r7, #120	@ 0x78
 80022b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80022b4:	6823      	ldr	r3, [r4, #0]
 80022b6:	6831      	ldr	r1, [r6, #0]
 80022b8:	061f      	lsls	r7, r3, #24
 80022ba:	f851 5b04 	ldr.w	r5, [r1], #4
 80022be:	d402      	bmi.n	80022c6 <_printf_i+0x186>
 80022c0:	065f      	lsls	r7, r3, #25
 80022c2:	bf48      	it	mi
 80022c4:	b2ad      	uxthmi	r5, r5
 80022c6:	6031      	str	r1, [r6, #0]
 80022c8:	07d9      	lsls	r1, r3, #31
 80022ca:	bf44      	itt	mi
 80022cc:	f043 0320 	orrmi.w	r3, r3, #32
 80022d0:	6023      	strmi	r3, [r4, #0]
 80022d2:	b11d      	cbz	r5, 80022dc <_printf_i+0x19c>
 80022d4:	2310      	movs	r3, #16
 80022d6:	e7ad      	b.n	8002234 <_printf_i+0xf4>
 80022d8:	4826      	ldr	r0, [pc, #152]	@ (8002374 <_printf_i+0x234>)
 80022da:	e7e9      	b.n	80022b0 <_printf_i+0x170>
 80022dc:	6823      	ldr	r3, [r4, #0]
 80022de:	f023 0320 	bic.w	r3, r3, #32
 80022e2:	6023      	str	r3, [r4, #0]
 80022e4:	e7f6      	b.n	80022d4 <_printf_i+0x194>
 80022e6:	4616      	mov	r6, r2
 80022e8:	e7bd      	b.n	8002266 <_printf_i+0x126>
 80022ea:	6833      	ldr	r3, [r6, #0]
 80022ec:	6825      	ldr	r5, [r4, #0]
 80022ee:	6961      	ldr	r1, [r4, #20]
 80022f0:	1d18      	adds	r0, r3, #4
 80022f2:	6030      	str	r0, [r6, #0]
 80022f4:	062e      	lsls	r6, r5, #24
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	d501      	bpl.n	80022fe <_printf_i+0x1be>
 80022fa:	6019      	str	r1, [r3, #0]
 80022fc:	e002      	b.n	8002304 <_printf_i+0x1c4>
 80022fe:	0668      	lsls	r0, r5, #25
 8002300:	d5fb      	bpl.n	80022fa <_printf_i+0x1ba>
 8002302:	8019      	strh	r1, [r3, #0]
 8002304:	2300      	movs	r3, #0
 8002306:	6123      	str	r3, [r4, #16]
 8002308:	4616      	mov	r6, r2
 800230a:	e7bc      	b.n	8002286 <_printf_i+0x146>
 800230c:	6833      	ldr	r3, [r6, #0]
 800230e:	1d1a      	adds	r2, r3, #4
 8002310:	6032      	str	r2, [r6, #0]
 8002312:	681e      	ldr	r6, [r3, #0]
 8002314:	6862      	ldr	r2, [r4, #4]
 8002316:	2100      	movs	r1, #0
 8002318:	4630      	mov	r0, r6
 800231a:	f7fd ff59 	bl	80001d0 <memchr>
 800231e:	b108      	cbz	r0, 8002324 <_printf_i+0x1e4>
 8002320:	1b80      	subs	r0, r0, r6
 8002322:	6060      	str	r0, [r4, #4]
 8002324:	6863      	ldr	r3, [r4, #4]
 8002326:	6123      	str	r3, [r4, #16]
 8002328:	2300      	movs	r3, #0
 800232a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800232e:	e7aa      	b.n	8002286 <_printf_i+0x146>
 8002330:	6923      	ldr	r3, [r4, #16]
 8002332:	4632      	mov	r2, r6
 8002334:	4649      	mov	r1, r9
 8002336:	4640      	mov	r0, r8
 8002338:	47d0      	blx	sl
 800233a:	3001      	adds	r0, #1
 800233c:	d0ad      	beq.n	800229a <_printf_i+0x15a>
 800233e:	6823      	ldr	r3, [r4, #0]
 8002340:	079b      	lsls	r3, r3, #30
 8002342:	d413      	bmi.n	800236c <_printf_i+0x22c>
 8002344:	68e0      	ldr	r0, [r4, #12]
 8002346:	9b03      	ldr	r3, [sp, #12]
 8002348:	4298      	cmp	r0, r3
 800234a:	bfb8      	it	lt
 800234c:	4618      	movlt	r0, r3
 800234e:	e7a6      	b.n	800229e <_printf_i+0x15e>
 8002350:	2301      	movs	r3, #1
 8002352:	4632      	mov	r2, r6
 8002354:	4649      	mov	r1, r9
 8002356:	4640      	mov	r0, r8
 8002358:	47d0      	blx	sl
 800235a:	3001      	adds	r0, #1
 800235c:	d09d      	beq.n	800229a <_printf_i+0x15a>
 800235e:	3501      	adds	r5, #1
 8002360:	68e3      	ldr	r3, [r4, #12]
 8002362:	9903      	ldr	r1, [sp, #12]
 8002364:	1a5b      	subs	r3, r3, r1
 8002366:	42ab      	cmp	r3, r5
 8002368:	dcf2      	bgt.n	8002350 <_printf_i+0x210>
 800236a:	e7eb      	b.n	8002344 <_printf_i+0x204>
 800236c:	2500      	movs	r5, #0
 800236e:	f104 0619 	add.w	r6, r4, #25
 8002372:	e7f5      	b.n	8002360 <_printf_i+0x220>
 8002374:	08002c66 	.word	0x08002c66
 8002378:	08002c77 	.word	0x08002c77

0800237c <__sflush_r>:
 800237c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002384:	0716      	lsls	r6, r2, #28
 8002386:	4605      	mov	r5, r0
 8002388:	460c      	mov	r4, r1
 800238a:	d454      	bmi.n	8002436 <__sflush_r+0xba>
 800238c:	684b      	ldr	r3, [r1, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	dc02      	bgt.n	8002398 <__sflush_r+0x1c>
 8002392:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002394:	2b00      	cmp	r3, #0
 8002396:	dd48      	ble.n	800242a <__sflush_r+0xae>
 8002398:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800239a:	2e00      	cmp	r6, #0
 800239c:	d045      	beq.n	800242a <__sflush_r+0xae>
 800239e:	2300      	movs	r3, #0
 80023a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80023a4:	682f      	ldr	r7, [r5, #0]
 80023a6:	6a21      	ldr	r1, [r4, #32]
 80023a8:	602b      	str	r3, [r5, #0]
 80023aa:	d030      	beq.n	800240e <__sflush_r+0x92>
 80023ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80023ae:	89a3      	ldrh	r3, [r4, #12]
 80023b0:	0759      	lsls	r1, r3, #29
 80023b2:	d505      	bpl.n	80023c0 <__sflush_r+0x44>
 80023b4:	6863      	ldr	r3, [r4, #4]
 80023b6:	1ad2      	subs	r2, r2, r3
 80023b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80023ba:	b10b      	cbz	r3, 80023c0 <__sflush_r+0x44>
 80023bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80023be:	1ad2      	subs	r2, r2, r3
 80023c0:	2300      	movs	r3, #0
 80023c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80023c4:	6a21      	ldr	r1, [r4, #32]
 80023c6:	4628      	mov	r0, r5
 80023c8:	47b0      	blx	r6
 80023ca:	1c43      	adds	r3, r0, #1
 80023cc:	89a3      	ldrh	r3, [r4, #12]
 80023ce:	d106      	bne.n	80023de <__sflush_r+0x62>
 80023d0:	6829      	ldr	r1, [r5, #0]
 80023d2:	291d      	cmp	r1, #29
 80023d4:	d82b      	bhi.n	800242e <__sflush_r+0xb2>
 80023d6:	4a2a      	ldr	r2, [pc, #168]	@ (8002480 <__sflush_r+0x104>)
 80023d8:	40ca      	lsrs	r2, r1
 80023da:	07d6      	lsls	r6, r2, #31
 80023dc:	d527      	bpl.n	800242e <__sflush_r+0xb2>
 80023de:	2200      	movs	r2, #0
 80023e0:	6062      	str	r2, [r4, #4]
 80023e2:	04d9      	lsls	r1, r3, #19
 80023e4:	6922      	ldr	r2, [r4, #16]
 80023e6:	6022      	str	r2, [r4, #0]
 80023e8:	d504      	bpl.n	80023f4 <__sflush_r+0x78>
 80023ea:	1c42      	adds	r2, r0, #1
 80023ec:	d101      	bne.n	80023f2 <__sflush_r+0x76>
 80023ee:	682b      	ldr	r3, [r5, #0]
 80023f0:	b903      	cbnz	r3, 80023f4 <__sflush_r+0x78>
 80023f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80023f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80023f6:	602f      	str	r7, [r5, #0]
 80023f8:	b1b9      	cbz	r1, 800242a <__sflush_r+0xae>
 80023fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80023fe:	4299      	cmp	r1, r3
 8002400:	d002      	beq.n	8002408 <__sflush_r+0x8c>
 8002402:	4628      	mov	r0, r5
 8002404:	f7ff fbde 	bl	8001bc4 <_free_r>
 8002408:	2300      	movs	r3, #0
 800240a:	6363      	str	r3, [r4, #52]	@ 0x34
 800240c:	e00d      	b.n	800242a <__sflush_r+0xae>
 800240e:	2301      	movs	r3, #1
 8002410:	4628      	mov	r0, r5
 8002412:	47b0      	blx	r6
 8002414:	4602      	mov	r2, r0
 8002416:	1c50      	adds	r0, r2, #1
 8002418:	d1c9      	bne.n	80023ae <__sflush_r+0x32>
 800241a:	682b      	ldr	r3, [r5, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d0c6      	beq.n	80023ae <__sflush_r+0x32>
 8002420:	2b1d      	cmp	r3, #29
 8002422:	d001      	beq.n	8002428 <__sflush_r+0xac>
 8002424:	2b16      	cmp	r3, #22
 8002426:	d11e      	bne.n	8002466 <__sflush_r+0xea>
 8002428:	602f      	str	r7, [r5, #0]
 800242a:	2000      	movs	r0, #0
 800242c:	e022      	b.n	8002474 <__sflush_r+0xf8>
 800242e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002432:	b21b      	sxth	r3, r3
 8002434:	e01b      	b.n	800246e <__sflush_r+0xf2>
 8002436:	690f      	ldr	r7, [r1, #16]
 8002438:	2f00      	cmp	r7, #0
 800243a:	d0f6      	beq.n	800242a <__sflush_r+0xae>
 800243c:	0793      	lsls	r3, r2, #30
 800243e:	680e      	ldr	r6, [r1, #0]
 8002440:	bf08      	it	eq
 8002442:	694b      	ldreq	r3, [r1, #20]
 8002444:	600f      	str	r7, [r1, #0]
 8002446:	bf18      	it	ne
 8002448:	2300      	movne	r3, #0
 800244a:	eba6 0807 	sub.w	r8, r6, r7
 800244e:	608b      	str	r3, [r1, #8]
 8002450:	f1b8 0f00 	cmp.w	r8, #0
 8002454:	dde9      	ble.n	800242a <__sflush_r+0xae>
 8002456:	6a21      	ldr	r1, [r4, #32]
 8002458:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800245a:	4643      	mov	r3, r8
 800245c:	463a      	mov	r2, r7
 800245e:	4628      	mov	r0, r5
 8002460:	47b0      	blx	r6
 8002462:	2800      	cmp	r0, #0
 8002464:	dc08      	bgt.n	8002478 <__sflush_r+0xfc>
 8002466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800246a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800246e:	81a3      	strh	r3, [r4, #12]
 8002470:	f04f 30ff 	mov.w	r0, #4294967295
 8002474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002478:	4407      	add	r7, r0
 800247a:	eba8 0800 	sub.w	r8, r8, r0
 800247e:	e7e7      	b.n	8002450 <__sflush_r+0xd4>
 8002480:	20400001 	.word	0x20400001

08002484 <_fflush_r>:
 8002484:	b538      	push	{r3, r4, r5, lr}
 8002486:	690b      	ldr	r3, [r1, #16]
 8002488:	4605      	mov	r5, r0
 800248a:	460c      	mov	r4, r1
 800248c:	b913      	cbnz	r3, 8002494 <_fflush_r+0x10>
 800248e:	2500      	movs	r5, #0
 8002490:	4628      	mov	r0, r5
 8002492:	bd38      	pop	{r3, r4, r5, pc}
 8002494:	b118      	cbz	r0, 800249e <_fflush_r+0x1a>
 8002496:	6a03      	ldr	r3, [r0, #32]
 8002498:	b90b      	cbnz	r3, 800249e <_fflush_r+0x1a>
 800249a:	f7ff f98b 	bl	80017b4 <__sinit>
 800249e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0f3      	beq.n	800248e <_fflush_r+0xa>
 80024a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80024a8:	07d0      	lsls	r0, r2, #31
 80024aa:	d404      	bmi.n	80024b6 <_fflush_r+0x32>
 80024ac:	0599      	lsls	r1, r3, #22
 80024ae:	d402      	bmi.n	80024b6 <_fflush_r+0x32>
 80024b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80024b2:	f7ff fb84 	bl	8001bbe <__retarget_lock_acquire_recursive>
 80024b6:	4628      	mov	r0, r5
 80024b8:	4621      	mov	r1, r4
 80024ba:	f7ff ff5f 	bl	800237c <__sflush_r>
 80024be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80024c0:	07da      	lsls	r2, r3, #31
 80024c2:	4605      	mov	r5, r0
 80024c4:	d4e4      	bmi.n	8002490 <_fflush_r+0xc>
 80024c6:	89a3      	ldrh	r3, [r4, #12]
 80024c8:	059b      	lsls	r3, r3, #22
 80024ca:	d4e1      	bmi.n	8002490 <_fflush_r+0xc>
 80024cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80024ce:	f7ff fb77 	bl	8001bc0 <__retarget_lock_release_recursive>
 80024d2:	e7dd      	b.n	8002490 <_fflush_r+0xc>

080024d4 <__swhatbuf_r>:
 80024d4:	b570      	push	{r4, r5, r6, lr}
 80024d6:	460c      	mov	r4, r1
 80024d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024dc:	2900      	cmp	r1, #0
 80024de:	b096      	sub	sp, #88	@ 0x58
 80024e0:	4615      	mov	r5, r2
 80024e2:	461e      	mov	r6, r3
 80024e4:	da0d      	bge.n	8002502 <__swhatbuf_r+0x2e>
 80024e6:	89a3      	ldrh	r3, [r4, #12]
 80024e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80024ec:	f04f 0100 	mov.w	r1, #0
 80024f0:	bf14      	ite	ne
 80024f2:	2340      	movne	r3, #64	@ 0x40
 80024f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80024f8:	2000      	movs	r0, #0
 80024fa:	6031      	str	r1, [r6, #0]
 80024fc:	602b      	str	r3, [r5, #0]
 80024fe:	b016      	add	sp, #88	@ 0x58
 8002500:	bd70      	pop	{r4, r5, r6, pc}
 8002502:	466a      	mov	r2, sp
 8002504:	f000 f862 	bl	80025cc <_fstat_r>
 8002508:	2800      	cmp	r0, #0
 800250a:	dbec      	blt.n	80024e6 <__swhatbuf_r+0x12>
 800250c:	9901      	ldr	r1, [sp, #4]
 800250e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002512:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002516:	4259      	negs	r1, r3
 8002518:	4159      	adcs	r1, r3
 800251a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800251e:	e7eb      	b.n	80024f8 <__swhatbuf_r+0x24>

08002520 <__smakebuf_r>:
 8002520:	898b      	ldrh	r3, [r1, #12]
 8002522:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002524:	079d      	lsls	r5, r3, #30
 8002526:	4606      	mov	r6, r0
 8002528:	460c      	mov	r4, r1
 800252a:	d507      	bpl.n	800253c <__smakebuf_r+0x1c>
 800252c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002530:	6023      	str	r3, [r4, #0]
 8002532:	6123      	str	r3, [r4, #16]
 8002534:	2301      	movs	r3, #1
 8002536:	6163      	str	r3, [r4, #20]
 8002538:	b003      	add	sp, #12
 800253a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800253c:	ab01      	add	r3, sp, #4
 800253e:	466a      	mov	r2, sp
 8002540:	f7ff ffc8 	bl	80024d4 <__swhatbuf_r>
 8002544:	9f00      	ldr	r7, [sp, #0]
 8002546:	4605      	mov	r5, r0
 8002548:	4639      	mov	r1, r7
 800254a:	4630      	mov	r0, r6
 800254c:	f7ff fba6 	bl	8001c9c <_malloc_r>
 8002550:	b948      	cbnz	r0, 8002566 <__smakebuf_r+0x46>
 8002552:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002556:	059a      	lsls	r2, r3, #22
 8002558:	d4ee      	bmi.n	8002538 <__smakebuf_r+0x18>
 800255a:	f023 0303 	bic.w	r3, r3, #3
 800255e:	f043 0302 	orr.w	r3, r3, #2
 8002562:	81a3      	strh	r3, [r4, #12]
 8002564:	e7e2      	b.n	800252c <__smakebuf_r+0xc>
 8002566:	89a3      	ldrh	r3, [r4, #12]
 8002568:	6020      	str	r0, [r4, #0]
 800256a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800256e:	81a3      	strh	r3, [r4, #12]
 8002570:	9b01      	ldr	r3, [sp, #4]
 8002572:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002576:	b15b      	cbz	r3, 8002590 <__smakebuf_r+0x70>
 8002578:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800257c:	4630      	mov	r0, r6
 800257e:	f000 f837 	bl	80025f0 <_isatty_r>
 8002582:	b128      	cbz	r0, 8002590 <__smakebuf_r+0x70>
 8002584:	89a3      	ldrh	r3, [r4, #12]
 8002586:	f023 0303 	bic.w	r3, r3, #3
 800258a:	f043 0301 	orr.w	r3, r3, #1
 800258e:	81a3      	strh	r3, [r4, #12]
 8002590:	89a3      	ldrh	r3, [r4, #12]
 8002592:	431d      	orrs	r5, r3
 8002594:	81a5      	strh	r5, [r4, #12]
 8002596:	e7cf      	b.n	8002538 <__smakebuf_r+0x18>

08002598 <memmove>:
 8002598:	4288      	cmp	r0, r1
 800259a:	b510      	push	{r4, lr}
 800259c:	eb01 0402 	add.w	r4, r1, r2
 80025a0:	d902      	bls.n	80025a8 <memmove+0x10>
 80025a2:	4284      	cmp	r4, r0
 80025a4:	4623      	mov	r3, r4
 80025a6:	d807      	bhi.n	80025b8 <memmove+0x20>
 80025a8:	1e43      	subs	r3, r0, #1
 80025aa:	42a1      	cmp	r1, r4
 80025ac:	d008      	beq.n	80025c0 <memmove+0x28>
 80025ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80025b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80025b6:	e7f8      	b.n	80025aa <memmove+0x12>
 80025b8:	4402      	add	r2, r0
 80025ba:	4601      	mov	r1, r0
 80025bc:	428a      	cmp	r2, r1
 80025be:	d100      	bne.n	80025c2 <memmove+0x2a>
 80025c0:	bd10      	pop	{r4, pc}
 80025c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80025c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80025ca:	e7f7      	b.n	80025bc <memmove+0x24>

080025cc <_fstat_r>:
 80025cc:	b538      	push	{r3, r4, r5, lr}
 80025ce:	4d07      	ldr	r5, [pc, #28]	@ (80025ec <_fstat_r+0x20>)
 80025d0:	2300      	movs	r3, #0
 80025d2:	4604      	mov	r4, r0
 80025d4:	4608      	mov	r0, r1
 80025d6:	4611      	mov	r1, r2
 80025d8:	602b      	str	r3, [r5, #0]
 80025da:	f7fe fcb0 	bl	8000f3e <_fstat>
 80025de:	1c43      	adds	r3, r0, #1
 80025e0:	d102      	bne.n	80025e8 <_fstat_r+0x1c>
 80025e2:	682b      	ldr	r3, [r5, #0]
 80025e4:	b103      	cbz	r3, 80025e8 <_fstat_r+0x1c>
 80025e6:	6023      	str	r3, [r4, #0]
 80025e8:	bd38      	pop	{r3, r4, r5, pc}
 80025ea:	bf00      	nop
 80025ec:	2000030c 	.word	0x2000030c

080025f0 <_isatty_r>:
 80025f0:	b538      	push	{r3, r4, r5, lr}
 80025f2:	4d06      	ldr	r5, [pc, #24]	@ (800260c <_isatty_r+0x1c>)
 80025f4:	2300      	movs	r3, #0
 80025f6:	4604      	mov	r4, r0
 80025f8:	4608      	mov	r0, r1
 80025fa:	602b      	str	r3, [r5, #0]
 80025fc:	f7fe fcaf 	bl	8000f5e <_isatty>
 8002600:	1c43      	adds	r3, r0, #1
 8002602:	d102      	bne.n	800260a <_isatty_r+0x1a>
 8002604:	682b      	ldr	r3, [r5, #0]
 8002606:	b103      	cbz	r3, 800260a <_isatty_r+0x1a>
 8002608:	6023      	str	r3, [r4, #0]
 800260a:	bd38      	pop	{r3, r4, r5, pc}
 800260c:	2000030c 	.word	0x2000030c

08002610 <_sbrk_r>:
 8002610:	b538      	push	{r3, r4, r5, lr}
 8002612:	4d06      	ldr	r5, [pc, #24]	@ (800262c <_sbrk_r+0x1c>)
 8002614:	2300      	movs	r3, #0
 8002616:	4604      	mov	r4, r0
 8002618:	4608      	mov	r0, r1
 800261a:	602b      	str	r3, [r5, #0]
 800261c:	f7fe fcb8 	bl	8000f90 <_sbrk>
 8002620:	1c43      	adds	r3, r0, #1
 8002622:	d102      	bne.n	800262a <_sbrk_r+0x1a>
 8002624:	682b      	ldr	r3, [r5, #0]
 8002626:	b103      	cbz	r3, 800262a <_sbrk_r+0x1a>
 8002628:	6023      	str	r3, [r4, #0]
 800262a:	bd38      	pop	{r3, r4, r5, pc}
 800262c:	2000030c 	.word	0x2000030c

08002630 <memcpy>:
 8002630:	440a      	add	r2, r1
 8002632:	4291      	cmp	r1, r2
 8002634:	f100 33ff 	add.w	r3, r0, #4294967295
 8002638:	d100      	bne.n	800263c <memcpy+0xc>
 800263a:	4770      	bx	lr
 800263c:	b510      	push	{r4, lr}
 800263e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002642:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002646:	4291      	cmp	r1, r2
 8002648:	d1f9      	bne.n	800263e <memcpy+0xe>
 800264a:	bd10      	pop	{r4, pc}

0800264c <_realloc_r>:
 800264c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002650:	4607      	mov	r7, r0
 8002652:	4614      	mov	r4, r2
 8002654:	460d      	mov	r5, r1
 8002656:	b921      	cbnz	r1, 8002662 <_realloc_r+0x16>
 8002658:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800265c:	4611      	mov	r1, r2
 800265e:	f7ff bb1d 	b.w	8001c9c <_malloc_r>
 8002662:	b92a      	cbnz	r2, 8002670 <_realloc_r+0x24>
 8002664:	f7ff faae 	bl	8001bc4 <_free_r>
 8002668:	4625      	mov	r5, r4
 800266a:	4628      	mov	r0, r5
 800266c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002670:	f000 f81a 	bl	80026a8 <_malloc_usable_size_r>
 8002674:	4284      	cmp	r4, r0
 8002676:	4606      	mov	r6, r0
 8002678:	d802      	bhi.n	8002680 <_realloc_r+0x34>
 800267a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800267e:	d8f4      	bhi.n	800266a <_realloc_r+0x1e>
 8002680:	4621      	mov	r1, r4
 8002682:	4638      	mov	r0, r7
 8002684:	f7ff fb0a 	bl	8001c9c <_malloc_r>
 8002688:	4680      	mov	r8, r0
 800268a:	b908      	cbnz	r0, 8002690 <_realloc_r+0x44>
 800268c:	4645      	mov	r5, r8
 800268e:	e7ec      	b.n	800266a <_realloc_r+0x1e>
 8002690:	42b4      	cmp	r4, r6
 8002692:	4622      	mov	r2, r4
 8002694:	4629      	mov	r1, r5
 8002696:	bf28      	it	cs
 8002698:	4632      	movcs	r2, r6
 800269a:	f7ff ffc9 	bl	8002630 <memcpy>
 800269e:	4629      	mov	r1, r5
 80026a0:	4638      	mov	r0, r7
 80026a2:	f7ff fa8f 	bl	8001bc4 <_free_r>
 80026a6:	e7f1      	b.n	800268c <_realloc_r+0x40>

080026a8 <_malloc_usable_size_r>:
 80026a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80026ac:	1f18      	subs	r0, r3, #4
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	bfbc      	itt	lt
 80026b2:	580b      	ldrlt	r3, [r1, r0]
 80026b4:	18c0      	addlt	r0, r0, r3
 80026b6:	4770      	bx	lr

080026b8 <_init>:
 80026b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ba:	bf00      	nop
 80026bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026be:	bc08      	pop	{r3}
 80026c0:	469e      	mov	lr, r3
 80026c2:	4770      	bx	lr

080026c4 <_fini>:
 80026c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026c6:	bf00      	nop
 80026c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ca:	bc08      	pop	{r3}
 80026cc:	469e      	mov	lr, r3
 80026ce:	4770      	bx	lr
