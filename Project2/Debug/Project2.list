
Project2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018f4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08001a84  08001a84  00002a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b88  08001b88  00003058  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001b88  08001b88  00002b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001b90  08001b90  00003058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b90  08001b90  00002b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001b94  08001b94  00002b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000058  20000000  08001b98  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  20000058  08001bf0  00003058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08001bf0  0000329c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003058  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002ed6  00000000  00000000  00003088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c84  00000000  00000000  00005f5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000260  00000000  00000000  00006be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000019a  00000000  00000000  00006e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025c36  00000000  00000000  00006fe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004c58  00000000  00000000  0002cc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5bc8  00000000  00000000  00031870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00117438  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c70  00000000  00000000  0011747c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001180ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000058 	.word	0x20000058
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001a6c 	.word	0x08001a6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	08001a6c 	.word	0x08001a6c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <LED_Init>:
// User LED = LD2 Green LED = PA.5
//******************************************************************************************
#define LED_PIN 5

void LED_Init(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
	// Enable the peripheral clock of GPIO Port
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80005ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000664 <LED_Init+0x7c>)
 80005ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005f0:	4a1c      	ldr	r2, [pc, #112]	@ (8000664 <LED_Init+0x7c>)
 80005f2:	f043 0301 	orr.w	r3, r3, #1
 80005f6:	64d3      	str	r3, [r2, #76]	@ 0x4c

	// GPIO Mode: Input(00), Output(01), AlterFunc(10), Analog(11, reset)
	GPIOA->MODER &= ~(3U<<(2*LED_PIN));
 80005f8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000602:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000606:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 1U<<(2*LED_PIN);      //  Output(01)
 8000608:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000612:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000616:	6013      	str	r3, [r2, #0]

	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR &= ~(3U<<(2*LED_PIN));
 8000618:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800061c:	689b      	ldr	r3, [r3, #8]
 800061e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000622:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000626:	6093      	str	r3, [r2, #8]
	GPIOA->OSPEEDR |=   3U<<(2*LED_PIN);  // High speed
 8000628:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800062c:	689b      	ldr	r3, [r3, #8]
 800062e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000632:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000636:	6093      	str	r3, [r2, #8]

	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1)
	GPIOA->OTYPER &= ~(1U<<LED_PIN);       // Push-pull
 8000638:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800063c:	685b      	ldr	r3, [r3, #4]
 800063e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000642:	f023 0320 	bic.w	r3, r3, #32
 8000646:	6053      	str	r3, [r2, #4]

	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3U<<(2*LED_PIN));  // No pull-up, no pull-down
 8000648:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800064c:	68db      	ldr	r3, [r3, #12]
 800064e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000652:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000656:	60d3      	str	r3, [r2, #12]
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	40021000 	.word	0x40021000

08000668 <clock_init>:


#include "stm32l476xx.h"

void clock_init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	// 1. Enable HSI (16 MHz internal oscillator)
	RCC->CR |= ((uint32_t)RCC_CR_HSION);
 800066c:	4b34      	ldr	r3, [pc, #208]	@ (8000740 <clock_init+0xd8>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a33      	ldr	r2, [pc, #204]	@ (8000740 <clock_init+0xd8>)
 8000672:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000676:	6013      	str	r3, [r2, #0]

    // wait until HSI is ready
    while ( (RCC->CR & (uint32_t) RCC_CR_HSIRDY) == 0 ) {;}
 8000678:	bf00      	nop
 800067a:	4b31      	ldr	r3, [pc, #196]	@ (8000740 <clock_init+0xd8>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000682:	2b00      	cmp	r3, #0
 8000684:	d0f9      	beq.n	800067a <clock_init+0x12>

    // 2. Configure Flash latency for 80 MHz
    FLASH->ACR |= FLASH_ACR_LATENCY_4WS;
 8000686:	4b2f      	ldr	r3, [pc, #188]	@ (8000744 <clock_init+0xdc>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a2e      	ldr	r2, [pc, #184]	@ (8000744 <clock_init+0xdc>)
 800068c:	f043 0304 	orr.w	r3, r3, #4
 8000690:	6013      	str	r3, [r2, #0]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLASH_ACR_LATENCY_4WS);
 8000692:	bf00      	nop
 8000694:	4b2b      	ldr	r3, [pc, #172]	@ (8000744 <clock_init+0xdc>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f003 0307 	and.w	r3, r3, #7
 800069c:	2b04      	cmp	r3, #4
 800069e:	d1f9      	bne.n	8000694 <clock_init+0x2c>

    // MP-Sept-25:
    //    // 3. ***** USE this code for PLL clock (80MHz) *****
    //
    // Disable PLL before config
    RCC->CR &= ~RCC_CR_PLLON;
 80006a0:	4b27      	ldr	r3, [pc, #156]	@ (8000740 <clock_init+0xd8>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a26      	ldr	r2, [pc, #152]	@ (8000740 <clock_init+0xd8>)
 80006a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80006aa:	6013      	str	r3, [r2, #0]
    while (RCC->CR & RCC_CR_PLLRDY);  // wait until PLL fully stops
 80006ac:	bf00      	nop
 80006ae:	4b24      	ldr	r3, [pc, #144]	@ (8000740 <clock_init+0xd8>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d1f9      	bne.n	80006ae <clock_init+0x46>

    // Configure PLL
    RCC->PLLCFGR = 0;
 80006ba:	4b21      	ldr	r3, [pc, #132]	@ (8000740 <clock_init+0xd8>)
 80006bc:	2200      	movs	r2, #0
 80006be:	60da      	str	r2, [r3, #12]
    RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI;    // source HSI16
 80006c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000740 <clock_init+0xd8>)
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	4a1e      	ldr	r2, [pc, #120]	@ (8000740 <clock_init+0xd8>)
 80006c6:	f043 0302 	orr.w	r3, r3, #2
 80006ca:	60d3      	str	r3, [r2, #12]
    RCC->PLLCFGR |= (1 << RCC_PLLCFGR_PLLM_Pos); // PLLM = 2 (divide by 2)
 80006cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000740 <clock_init+0xd8>)
 80006ce:	68db      	ldr	r3, [r3, #12]
 80006d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000740 <clock_init+0xd8>)
 80006d2:	f043 0310 	orr.w	r3, r3, #16
 80006d6:	60d3      	str	r3, [r2, #12]
    RCC->PLLCFGR |= (20 << RCC_PLLCFGR_PLLN_Pos); // PLLN = 20 (multiply by 20)
 80006d8:	4b19      	ldr	r3, [pc, #100]	@ (8000740 <clock_init+0xd8>)
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	4a18      	ldr	r2, [pc, #96]	@ (8000740 <clock_init+0xd8>)
 80006de:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 80006e2:	60d3      	str	r3, [r2, #12]
    RCC->PLLCFGR |= (0 << RCC_PLLCFGR_PLLR_Pos);  // PLLR = 2 (divide by 2)
 80006e4:	4b16      	ldr	r3, [pc, #88]	@ (8000740 <clock_init+0xd8>)
 80006e6:	4a16      	ldr	r2, [pc, #88]	@ (8000740 <clock_init+0xd8>)
 80006e8:	68db      	ldr	r3, [r3, #12]
 80006ea:	60d3      	str	r3, [r2, #12]
    RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN;           // Enable PLLR output
 80006ec:	4b14      	ldr	r3, [pc, #80]	@ (8000740 <clock_init+0xd8>)
 80006ee:	68db      	ldr	r3, [r3, #12]
 80006f0:	4a13      	ldr	r2, [pc, #76]	@ (8000740 <clock_init+0xd8>)
 80006f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80006f6:	60d3      	str	r3, [r2, #12]

    // Enable PLL
    RCC->CR |= RCC_CR_PLLON;
 80006f8:	4b11      	ldr	r3, [pc, #68]	@ (8000740 <clock_init+0xd8>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a10      	ldr	r2, [pc, #64]	@ (8000740 <clock_init+0xd8>)
 80006fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000702:	6013      	str	r3, [r2, #0]
    while ((RCC->CR & RCC_CR_PLLRDY) == 0);  // wait until PLL ready
 8000704:	bf00      	nop
 8000706:	4b0e      	ldr	r3, [pc, #56]	@ (8000740 <clock_init+0xd8>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800070e:	2b00      	cmp	r3, #0
 8000710:	d0f9      	beq.n	8000706 <clock_init+0x9e>

    // Select PLL as system clock source
    RCC->CFGR &= ~RCC_CFGR_SW;
 8000712:	4b0b      	ldr	r3, [pc, #44]	@ (8000740 <clock_init+0xd8>)
 8000714:	689b      	ldr	r3, [r3, #8]
 8000716:	4a0a      	ldr	r2, [pc, #40]	@ (8000740 <clock_init+0xd8>)
 8000718:	f023 0303 	bic.w	r3, r3, #3
 800071c:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;    // select PLL as system clock
 800071e:	4b08      	ldr	r3, [pc, #32]	@ (8000740 <clock_init+0xd8>)
 8000720:	689b      	ldr	r3, [r3, #8]
 8000722:	4a07      	ldr	r2, [pc, #28]	@ (8000740 <clock_init+0xd8>)
 8000724:	f043 0303 	orr.w	r3, r3, #3
 8000728:	6093      	str	r3, [r2, #8]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);  // wait for switch
 800072a:	bf00      	nop
 800072c:	4b04      	ldr	r3, [pc, #16]	@ (8000740 <clock_init+0xd8>)
 800072e:	689b      	ldr	r3, [r3, #8]
 8000730:	f003 030c 	and.w	r3, r3, #12
 8000734:	2b0c      	cmp	r3, #12
 8000736:	d1f9      	bne.n	800072c <clock_init+0xc4>
//
//    // 3. ***** USE this code for HSI clock (16MHz) *****


    // 4. Update System Clock to ensure its set correctly
    SystemCoreClockUpdate();
 8000738:	f000 f9da 	bl	8000af0 <SystemCoreClockUpdate>
}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40021000 	.word	0x40021000
 8000744:	40022000 	.word	0x40022000

08000748 <delay_ms>:
static uint32_t B1_Switch_Press_time_ms = 0;
static uint32_t one_second_counter = 0;
static uint8_t one_second_elapsed = 0;

// crude delay for demos
static void delay_ms(uint32_t ms) {
 8000748:	b480      	push	{r7}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
    // use SysTick if you already set it; this is just a busy-wait fallback
    for (volatile uint32_t i = 0; i < (ms * 8000UL); ++i) __NOP(); // ~1ms @80MHz (rough)
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	e003      	b.n	800075e <delay_ms+0x16>
 8000756:	bf00      	nop
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	3301      	adds	r3, #1
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8000764:	fb03 f202 	mul.w	r2, r3, r2
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	429a      	cmp	r2, r3
 800076c:	d8f3      	bhi.n	8000756 <delay_ms+0xe>
}
 800076e:	bf00      	nop
 8000770:	bf00      	nop
 8000772:	3714      	adds	r7, #20
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <init_systick>:

// This function is to Initialize SysTick registers
void init_systick()
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
	// Use the SysTick global structure pointer to do the following in this
	// exact order with separate lines for each step:
	//
	// Disable SysTick by clearing the CTRL (CSR) register.
	SysTick->CTRL = 0UL;
 8000780:	4b10      	ldr	r3, [pc, #64]	@ (80007c4 <init_systick+0x48>)
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]

	// Set the LOAD (RVR) to 15,999 to give us a 1 millisecond timer
	// System clock is 16MHz
	SysTick->LOAD |= (SysTick_LOAD_RELOAD_Msk & 15999UL);
 8000786:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <init_systick+0x48>)
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	4a0e      	ldr	r2, [pc, #56]	@ (80007c4 <init_systick+0x48>)
 800078c:	f443 5379 	orr.w	r3, r3, #15936	@ 0x3e40
 8000790:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 8000794:	6053      	str	r3, [r2, #4]

	// Set the clock source bit in the CTRL (CSR) to the internal clock.
	SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 8000796:	4b0b      	ldr	r3, [pc, #44]	@ (80007c4 <init_systick+0x48>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a0a      	ldr	r2, [pc, #40]	@ (80007c4 <init_systick+0x48>)
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	6013      	str	r3, [r2, #0]

	// Enable the interrupt bit
	SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 80007a2:	4b08      	ldr	r3, [pc, #32]	@ (80007c4 <init_systick+0x48>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a07      	ldr	r2, [pc, #28]	@ (80007c4 <init_systick+0x48>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6013      	str	r3, [r2, #0]

	// Set the enable bit in the CTRL (CSR) to start the timer.
	SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk ;
 80007ae:	4b05      	ldr	r3, [pc, #20]	@ (80007c4 <init_systick+0x48>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a04      	ldr	r2, [pc, #16]	@ (80007c4 <init_systick+0x48>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6013      	str	r3, [r2, #0]
}
 80007ba:	bf00      	nop
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	e000e010 	.word	0xe000e010

080007c8 <SysTick_Handler>:

//******************************************************************************************
// This function is to handle SysTick Timer
//******************************************************************************************
void SysTick_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
	//In this example, we will have LED blinking at One second interval so first Update One Second Counter
	//three_second_counter++;
	one_second_counter++;
 80007cc:	4b0a      	ldr	r3, [pc, #40]	@ (80007f8 <SysTick_Handler+0x30>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	3301      	adds	r3, #1
 80007d2:	4a09      	ldr	r2, [pc, #36]	@ (80007f8 <SysTick_Handler+0x30>)
 80007d4:	6013      	str	r3, [r2, #0]

	// Set a global One second elapsed flag when the handler has been called 1000 times
	// Once flag is set, reset the counter
	if (one_second_counter == 1000)
 80007d6:	4b08      	ldr	r3, [pc, #32]	@ (80007f8 <SysTick_Handler+0x30>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80007de:	d105      	bne.n	80007ec <SysTick_Handler+0x24>
	{
		one_second_elapsed = true;
 80007e0:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <SysTick_Handler+0x34>)
 80007e2:	2201      	movs	r2, #1
 80007e4:	701a      	strb	r2, [r3, #0]
		one_second_counter = 0;
 80007e6:	4b04      	ldr	r3, [pc, #16]	@ (80007f8 <SysTick_Handler+0x30>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
	}
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	20000078 	.word	0x20000078
 80007fc:	2000007c 	.word	0x2000007c

08000800 <HAL_GPIO_EXTI_Callback>:

//******************************************************************************************
// This function is to handle interrupts generated because of pressing B1 switch
//******************************************************************************************
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 800080a:	88fb      	ldrh	r3, [r7, #6]
 800080c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000810:	d117      	bne.n	8000842 <HAL_GPIO_EXTI_Callback+0x42>
		// Add your code ---

		// If more than 3 second then Switch to Pattern Mode

		// Reset Switch time (in milliseconds)
		B1_Switch_Press_time_ms = 0;
 8000812:	4b0e      	ldr	r3, [pc, #56]	@ (800084c <HAL_GPIO_EXTI_Callback+0x4c>)
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]

		while(GPIO_PIN_RESET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 8000818:	e00b      	b.n	8000832 <HAL_GPIO_EXTI_Callback+0x32>
		{
			// Blocking code --

			// We can use SysTick Interrupt to keep track of time
			while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
 800081a:	bf00      	nop
 800081c:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <HAL_GPIO_EXTI_Callback+0x50>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000824:	2b00      	cmp	r3, #0
 8000826:	d0f9      	beq.n	800081c <HAL_GPIO_EXTI_Callback+0x1c>
			{
				// do nothing -- Blocking code -- 1ms timer
			}
			B1_Switch_Press_time_ms++;
 8000828:	4b08      	ldr	r3, [pc, #32]	@ (800084c <HAL_GPIO_EXTI_Callback+0x4c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	3301      	adds	r3, #1
 800082e:	4a07      	ldr	r2, [pc, #28]	@ (800084c <HAL_GPIO_EXTI_Callback+0x4c>)
 8000830:	6013      	str	r3, [r2, #0]
		while(GPIO_PIN_RESET == HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 8000832:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000836:	4807      	ldr	r0, [pc, #28]	@ (8000854 <HAL_GPIO_EXTI_Callback+0x54>)
 8000838:	f000 f8e2 	bl	8000a00 <HAL_GPIO_ReadPin>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d0eb      	beq.n	800081a <HAL_GPIO_EXTI_Callback+0x1a>

			// If we are in Auto mode and B1 Switch is Pressed for 3 Seconds or more then Switch to Pattern Mode
			// ---- Add your code
		}
	}
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000074 	.word	0x20000074
 8000850:	e000e010 	.word	0xe000e010
 8000854:	48000800 	.word	0x48000800

08000858 <run_demo>:

//******************************************************************************************
// Run Demo -- main function with forever loop
//******************************************************************************************
void run_demo( void )
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
	// Default mode is Auto Mode
	printf("%s\r\n", "*** AUTO MODE ***");
 800085e:	4911      	ldr	r1, [pc, #68]	@ (80008a4 <run_demo+0x4c>)
 8000860:	4811      	ldr	r0, [pc, #68]	@ (80008a8 <run_demo+0x50>)
 8000862:	f000 fc23 	bl	80010ac <printf>
			//			check whether received command start with "P" -> update current pattern with new Pattern
			//				Please ensure pattern is valid (4 digits, 0's and 1's)
			//			In case of bad pattern or invalid command.. inform user accordingly

		// MP-Sept-25: Revised code for Input Capture Info, showing Period and Freq
		uint32_t ticks = TIM2_GetPeriodTicks(); // copy volatile safely
 8000866:	f000 fb21 	bl	8000eac <TIM2_GetPeriodTicks>
 800086a:	6078      	str	r0, [r7, #4]
		if (ticks > 0)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d013      	beq.n	800089a <run_demo+0x42>
		{
			float freq = 1e6f / ticks;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	ee07 3a90 	vmov	s15, r3
 8000878:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800087c:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 80008ac <run_demo+0x54>
 8000880:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000884:	edc7 7a00 	vstr	s15, [r7]
			printf("Period = %lu us, Freq = %.2f Hz\r\n", ticks, freq);
 8000888:	6838      	ldr	r0, [r7, #0]
 800088a:	f7ff fe55 	bl	8000538 <__aeabi_f2d>
 800088e:	4602      	mov	r2, r0
 8000890:	460b      	mov	r3, r1
 8000892:	6879      	ldr	r1, [r7, #4]
 8000894:	4806      	ldr	r0, [pc, #24]	@ (80008b0 <run_demo+0x58>)
 8000896:	f000 fc09 	bl	80010ac <printf>
		}

		// MP-Sept-25: delay for demo only -- this is not required for Project as you will not be outputing anything until after
		// you have histogram is ready to display
		delay_ms(10);
 800089a:	200a      	movs	r0, #10
 800089c:	f7ff ff54 	bl	8000748 <delay_ms>
	{
 80008a0:	e7e1      	b.n	8000866 <run_demo+0xe>
 80008a2:	bf00      	nop
 80008a4:	08001a84 	.word	0x08001a84
 80008a8:	08001a98 	.word	0x08001a98
 80008ac:	49742400 	.word	0x49742400
 80008b0:	08001aa0 	.word	0x08001aa0

080008b4 <GPIO_Init>:

/*----------------------------------------------------------------------------*/
/* Configure GPIO                                                             */
/*----------------------------------------------------------------------------*/
void GPIO_Init(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
    // 1. Enable GPIO clocks
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;   // for LED (PA5), UART2 (PA2/PA3), TIM2_CH1 (PA0)
 80008b8:	4b3e      	ldr	r3, [pc, #248]	@ (80009b4 <GPIO_Init+0x100>)
 80008ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008bc:	4a3d      	ldr	r2, [pc, #244]	@ (80009b4 <GPIO_Init+0x100>)
 80008be:	f043 0301 	orr.w	r3, r3, #1
 80008c2:	64d3      	str	r3, [r2, #76]	@ 0x4c
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;   // for User Button (PC13)
 80008c4:	4b3b      	ldr	r3, [pc, #236]	@ (80009b4 <GPIO_Init+0x100>)
 80008c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c8:	4a3a      	ldr	r2, [pc, #232]	@ (80009b4 <GPIO_Init+0x100>)
 80008ca:	f043 0304 	orr.w	r3, r3, #4
 80008ce:	64d3      	str	r3, [r2, #76]	@ 0x4c

    // ----------------------------
    // Configure PA5: User LED
    // ----------------------------
    GPIOA->MODER &= ~(3u << (5*2));        // clear mode bits
 80008d0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80008da:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80008de:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (1u << (5*2));        // 01 = output
 80008e0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80008ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008ee:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER &= ~(1u << 5);           // 0 = push-pull
 80008f0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80008fa:	f023 0320 	bic.w	r3, r3, #32
 80008fe:	6053      	str	r3, [r2, #4]
    GPIOA->OSPEEDR |=  (3u << (5*2));      // very high speed
 8000900:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000904:	689b      	ldr	r3, [r3, #8]
 8000906:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800090a:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 800090e:	6093      	str	r3, [r2, #8]
    GPIOA->PUPDR &= ~(3u << (5*2));        // no pull
 8000910:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000914:	68db      	ldr	r3, [r3, #12]
 8000916:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800091a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800091e:	60d3      	str	r3, [r2, #12]

    // ----------------------------
    // Configure PC13: User Button
    // ----------------------------
    GPIOC->MODER &= ~(3u << (13*2));       // 00 = input
 8000920:	4b25      	ldr	r3, [pc, #148]	@ (80009b8 <GPIO_Init+0x104>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a24      	ldr	r2, [pc, #144]	@ (80009b8 <GPIO_Init+0x104>)
 8000926:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800092a:	6013      	str	r3, [r2, #0]
    GPIOC->PUPDR &= ~(3u << (13*2));       // no pull (Nucleo board already has ext pull-up)
 800092c:	4b22      	ldr	r3, [pc, #136]	@ (80009b8 <GPIO_Init+0x104>)
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	4a21      	ldr	r2, [pc, #132]	@ (80009b8 <GPIO_Init+0x104>)
 8000932:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000936:	60d3      	str	r3, [r2, #12]

    // ----------------------------
    // Configure PA0: TIM2_CH1 input capture
    // ----------------------------
    GPIOA->MODER &= ~(3u << (0*2));
 8000938:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000942:	f023 0303 	bic.w	r3, r3, #3
 8000946:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  (2u << (0*2));        					// 10 = alternate function
 8000948:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000952:	f043 0302 	orr.w	r3, r3, #2
 8000956:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~(0xFu << (0*4));
 8000958:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800095c:	6a1b      	ldr	r3, [r3, #32]
 800095e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000962:	f023 030f 	bic.w	r3, r3, #15
 8000966:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=  (0x1u << (0*4));     					// AF1 = TIM2_CH1
 8000968:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800096c:	6a1b      	ldr	r3, [r3, #32]
 800096e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000972:	f043 0301 	orr.w	r3, r3, #1
 8000976:	6213      	str	r3, [r2, #32]
    GPIOA->OSPEEDR |=  (3u << (0*2));      					// very high speed
 8000978:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800097c:	689b      	ldr	r3, [r3, #8]
 800097e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000982:	f043 0303 	orr.w	r3, r3, #3
 8000986:	6093      	str	r3, [r2, #8]
    GPIOA->PUPDR   &= ~(3u << (0*2));
 8000988:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800098c:	68db      	ldr	r3, [r3, #12]
 800098e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000992:	f023 0303 	bic.w	r3, r3, #3
 8000996:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (2u << (0*2));      					// pull-down → avoids floating input when no signal
 8000998:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800099c:	68db      	ldr	r3, [r3, #12]
 800099e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80009a2:	f043 0302 	orr.w	r3, r3, #2
 80009a6:	60d3      	str	r3, [r2, #12]
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	40021000 	.word	0x40021000
 80009b8:	48000800 	.word	0x48000800

080009bc <EXTI15_10_IRQHandler>:

//******************************************************************************************
// This function is to handle GPIO Extended Interrupt
//******************************************************************************************
void EXTI15_10_IRQHandler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80009c0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80009c4:	f000 f834 	bl	8000a30 <HAL_GPIO_EXTI_IRQHandler>
}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}

080009cc <main>:
#include "timer.h"			// Timer module

	
// Default Entry Point
int main(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
	// initialization Clock, LED, SysTick, USART and GPIO Modules
	clock_init();
 80009d0:	f7ff fe4a 	bl	8000668 <clock_init>
	GPIO_Init();
 80009d4:	f7ff ff6e 	bl	80008b4 <GPIO_Init>
	init_systick();
 80009d8:	f7ff fed0 	bl	800077c <init_systick>
	USART2_Init(115200);
 80009dc:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 80009e0:	f000 fa70 	bl	8000ec4 <USART2_Init>
	USART2_WriteString("Complete Clock, GPIO and UART config!\r\n");
 80009e4:	4805      	ldr	r0, [pc, #20]	@ (80009fc <main+0x30>)
 80009e6:	f000 fb4b 	bl	8001080 <USART2_WriteString>
	LED_Init();
 80009ea:	f7ff fdfd 	bl	80005e8 <LED_Init>
	// Timer Initialization for Project 2
    TIM2_Init();
 80009ee:	f000 f993 	bl	8000d18 <TIM2_Init>

	// Run Demo
	run_demo();
 80009f2:	f7ff ff31 	bl	8000858 <run_demo>
 80009f6:	2300      	movs	r3, #0
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	08001ac4 	.word	0x08001ac4

08000a00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	460b      	mov	r3, r1
 8000a0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	691a      	ldr	r2, [r3, #16]
 8000a10:	887b      	ldrh	r3, [r7, #2]
 8000a12:	4013      	ands	r3, r2
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d002      	beq.n	8000a1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	73fb      	strb	r3, [r7, #15]
 8000a1c:	e001      	b.n	8000a22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000a3a:	4b08      	ldr	r3, [pc, #32]	@ (8000a5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000a3c:	695a      	ldr	r2, [r3, #20]
 8000a3e:	88fb      	ldrh	r3, [r7, #6]
 8000a40:	4013      	ands	r3, r2
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d006      	beq.n	8000a54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000a46:	4a05      	ldr	r2, [pc, #20]	@ (8000a5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000a48:	88fb      	ldrh	r3, [r7, #6]
 8000a4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000a4c:	88fb      	ldrh	r3, [r7, #6]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fed6 	bl	8000800 <HAL_GPIO_EXTI_Callback>
  }
}
 8000a54:	bf00      	nop
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40010400 	.word	0x40010400

08000a60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a68:	4a14      	ldr	r2, [pc, #80]	@ (8000abc <_sbrk+0x5c>)
 8000a6a:	4b15      	ldr	r3, [pc, #84]	@ (8000ac0 <_sbrk+0x60>)
 8000a6c:	1ad3      	subs	r3, r2, r3
 8000a6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a74:	4b13      	ldr	r3, [pc, #76]	@ (8000ac4 <_sbrk+0x64>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d102      	bne.n	8000a82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	@ (8000ac4 <_sbrk+0x64>)
 8000a7e:	4a12      	ldr	r2, [pc, #72]	@ (8000ac8 <_sbrk+0x68>)
 8000a80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a82:	4b10      	ldr	r3, [pc, #64]	@ (8000ac4 <_sbrk+0x64>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4413      	add	r3, r2
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d207      	bcs.n	8000aa0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a90:	f000 fb76 	bl	8001180 <__errno>
 8000a94:	4603      	mov	r3, r0
 8000a96:	220c      	movs	r2, #12
 8000a98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9e:	e009      	b.n	8000ab4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aa0:	4b08      	ldr	r3, [pc, #32]	@ (8000ac4 <_sbrk+0x64>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aa6:	4b07      	ldr	r3, [pc, #28]	@ (8000ac4 <_sbrk+0x64>)
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	4413      	add	r3, r2
 8000aae:	4a05      	ldr	r2, [pc, #20]	@ (8000ac4 <_sbrk+0x64>)
 8000ab0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3718      	adds	r7, #24
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20018000 	.word	0x20018000
 8000ac0:	00000400 	.word	0x00000400
 8000ac4:	20000080 	.word	0x20000080
 8000ac8:	200002a0 	.word	0x200002a0

08000acc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ad0:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <SystemInit+0x20>)
 8000ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ad6:	4a05      	ldr	r2, [pc, #20]	@ (8000aec <SystemInit+0x20>)
 8000ad8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000adc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	e000ed00 	.word	0xe000ed00

08000af0 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b087      	sub	sp, #28
 8000af4:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if ((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8000af6:	4b4f      	ldr	r3, [pc, #316]	@ (8000c34 <SystemCoreClockUpdate+0x144>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f003 0308 	and.w	r3, r3, #8
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d107      	bne.n	8000b12 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8000b02:	4b4c      	ldr	r3, [pc, #304]	@ (8000c34 <SystemCoreClockUpdate+0x144>)
 8000b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b08:	0a1b      	lsrs	r3, r3, #8
 8000b0a:	f003 030f 	and.w	r3, r3, #15
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	e005      	b.n	8000b1e <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8000b12:	4b48      	ldr	r3, [pc, #288]	@ (8000c34 <SystemCoreClockUpdate+0x144>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	091b      	lsrs	r3, r3, #4
 8000b18:	f003 030f 	and.w	r3, r3, #15
 8000b1c:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8000b1e:	4a46      	ldr	r2, [pc, #280]	@ (8000c38 <SystemCoreClockUpdate+0x148>)
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b26:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b28:	4b42      	ldr	r3, [pc, #264]	@ (8000c34 <SystemCoreClockUpdate+0x144>)
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	f003 030c 	and.w	r3, r3, #12
 8000b30:	2b0c      	cmp	r3, #12
 8000b32:	d866      	bhi.n	8000c02 <SystemCoreClockUpdate+0x112>
 8000b34:	a201      	add	r2, pc, #4	@ (adr r2, 8000b3c <SystemCoreClockUpdate+0x4c>)
 8000b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b3a:	bf00      	nop
 8000b3c:	08000b71 	.word	0x08000b71
 8000b40:	08000c03 	.word	0x08000c03
 8000b44:	08000c03 	.word	0x08000c03
 8000b48:	08000c03 	.word	0x08000c03
 8000b4c:	08000b79 	.word	0x08000b79
 8000b50:	08000c03 	.word	0x08000c03
 8000b54:	08000c03 	.word	0x08000c03
 8000b58:	08000c03 	.word	0x08000c03
 8000b5c:	08000b81 	.word	0x08000b81
 8000b60:	08000c03 	.word	0x08000c03
 8000b64:	08000c03 	.word	0x08000c03
 8000b68:	08000c03 	.word	0x08000c03
 8000b6c:	08000b89 	.word	0x08000b89
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000b70:	4a32      	ldr	r2, [pc, #200]	@ (8000c3c <SystemCoreClockUpdate+0x14c>)
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	6013      	str	r3, [r2, #0]
      break;
 8000b76:	e048      	b.n	8000c0a <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000b78:	4b30      	ldr	r3, [pc, #192]	@ (8000c3c <SystemCoreClockUpdate+0x14c>)
 8000b7a:	4a31      	ldr	r2, [pc, #196]	@ (8000c40 <SystemCoreClockUpdate+0x150>)
 8000b7c:	601a      	str	r2, [r3, #0]
      break;
 8000b7e:	e044      	b.n	8000c0a <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000b80:	4b2e      	ldr	r3, [pc, #184]	@ (8000c3c <SystemCoreClockUpdate+0x14c>)
 8000b82:	4a30      	ldr	r2, [pc, #192]	@ (8000c44 <SystemCoreClockUpdate+0x154>)
 8000b84:	601a      	str	r2, [r3, #0]
      break;
 8000b86:	e040      	b.n	8000c0a <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000b88:	4b2a      	ldr	r3, [pc, #168]	@ (8000c34 <SystemCoreClockUpdate+0x144>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	f003 0303 	and.w	r3, r3, #3
 8000b90:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000b92:	4b28      	ldr	r3, [pc, #160]	@ (8000c34 <SystemCoreClockUpdate+0x144>)
 8000b94:	68db      	ldr	r3, [r3, #12]
 8000b96:	091b      	lsrs	r3, r3, #4
 8000b98:	f003 0307 	and.w	r3, r3, #7
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	60bb      	str	r3, [r7, #8]

      switch (pllsource)
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	2b02      	cmp	r3, #2
 8000ba4:	d003      	beq.n	8000bae <SystemCoreClockUpdate+0xbe>
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	2b03      	cmp	r3, #3
 8000baa:	d006      	beq.n	8000bba <SystemCoreClockUpdate+0xca>
 8000bac:	e00b      	b.n	8000bc6 <SystemCoreClockUpdate+0xd6>
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8000bae:	4a24      	ldr	r2, [pc, #144]	@ (8000c40 <SystemCoreClockUpdate+0x150>)
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bb6:	613b      	str	r3, [r7, #16]
          break;
 8000bb8:	e00b      	b.n	8000bd2 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8000bba:	4a22      	ldr	r2, [pc, #136]	@ (8000c44 <SystemCoreClockUpdate+0x154>)
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc2:	613b      	str	r3, [r7, #16]
          break;
 8000bc4:	e005      	b.n	8000bd2 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8000bc6:	697a      	ldr	r2, [r7, #20]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bce:	613b      	str	r3, [r7, #16]
          break;
 8000bd0:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8000bd2:	4b18      	ldr	r3, [pc, #96]	@ (8000c34 <SystemCoreClockUpdate+0x144>)
 8000bd4:	68db      	ldr	r3, [r3, #12]
 8000bd6:	0a1b      	lsrs	r3, r3, #8
 8000bd8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	fb02 f303 	mul.w	r3, r2, r3
 8000be2:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000be4:	4b13      	ldr	r3, [pc, #76]	@ (8000c34 <SystemCoreClockUpdate+0x144>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	0e5b      	lsrs	r3, r3, #25
 8000bea:	f003 0303 	and.w	r3, r3, #3
 8000bee:	3301      	adds	r3, #1
 8000bf0:	005b      	lsls	r3, r3, #1
 8000bf2:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bfc:	4a0f      	ldr	r2, [pc, #60]	@ (8000c3c <SystemCoreClockUpdate+0x14c>)
 8000bfe:	6013      	str	r3, [r2, #0]
      break;
 8000c00:	e003      	b.n	8000c0a <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8000c02:	4a0e      	ldr	r2, [pc, #56]	@ (8000c3c <SystemCoreClockUpdate+0x14c>)
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	6013      	str	r3, [r2, #0]
      break;
 8000c08:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c34 <SystemCoreClockUpdate+0x144>)
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	091b      	lsrs	r3, r3, #4
 8000c10:	f003 030f 	and.w	r3, r3, #15
 8000c14:	4a0c      	ldr	r2, [pc, #48]	@ (8000c48 <SystemCoreClockUpdate+0x158>)
 8000c16:	5cd3      	ldrb	r3, [r2, r3]
 8000c18:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000c1a:	4b08      	ldr	r3, [pc, #32]	@ (8000c3c <SystemCoreClockUpdate+0x14c>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	fa22 f303 	lsr.w	r3, r2, r3
 8000c24:	4a05      	ldr	r2, [pc, #20]	@ (8000c3c <SystemCoreClockUpdate+0x14c>)
 8000c26:	6013      	str	r3, [r2, #0]
}
 8000c28:	bf00      	nop
 8000c2a:	371c      	adds	r7, #28
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	40021000 	.word	0x40021000
 8000c38:	08001b24 	.word	0x08001b24
 8000c3c:	20000000 	.word	0x20000000
 8000c40:	00f42400 	.word	0x00f42400
 8000c44:	007a1200 	.word	0x007a1200
 8000c48:	08001b14 	.word	0x08001b14

08000c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	db0b      	blt.n	8000c76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	f003 021f 	and.w	r2, r3, #31
 8000c64:	4907      	ldr	r1, [pc, #28]	@ (8000c84 <__NVIC_EnableIRQ+0x38>)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	095b      	lsrs	r3, r3, #5
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000e100 	.word	0xe000e100

08000c88 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	db0c      	blt.n	8000cb4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c9a:	79fb      	ldrb	r3, [r7, #7]
 8000c9c:	f003 021f 	and.w	r2, r3, #31
 8000ca0:	4907      	ldr	r1, [pc, #28]	@ (8000cc0 <__NVIC_ClearPendingIRQ+0x38>)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	095b      	lsrs	r3, r3, #5
 8000ca8:	2001      	movs	r0, #1
 8000caa:	fa00 f202 	lsl.w	r2, r0, r2
 8000cae:	3360      	adds	r3, #96	@ 0x60
 8000cb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000e100 	.word	0xe000e100

08000cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	6039      	str	r1, [r7, #0]
 8000cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	db0a      	blt.n	8000cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	490c      	ldr	r1, [pc, #48]	@ (8000d10 <__NVIC_SetPriority+0x4c>)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	0112      	lsls	r2, r2, #4
 8000ce4:	b2d2      	uxtb	r2, r2
 8000ce6:	440b      	add	r3, r1
 8000ce8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cec:	e00a      	b.n	8000d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4908      	ldr	r1, [pc, #32]	@ (8000d14 <__NVIC_SetPriority+0x50>)
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	f003 030f 	and.w	r3, r3, #15
 8000cfa:	3b04      	subs	r3, #4
 8000cfc:	0112      	lsls	r2, r2, #4
 8000cfe:	b2d2      	uxtb	r2, r2
 8000d00:	440b      	add	r3, r1
 8000d02:	761a      	strb	r2, [r3, #24]
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000e100 	.word	0xe000e100
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <TIM2_Init>:

//******************************************************************************************
// This function is to Initialize Timer 2
//******************************************************************************************
void TIM2_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
	// reset TIM2 before configuration
	RCC->APB1RSTR1 |= RCC_APB1RSTR1_TIM2RST;
 8000d1e:	4b43      	ldr	r3, [pc, #268]	@ (8000e2c <TIM2_Init+0x114>)
 8000d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d22:	4a42      	ldr	r2, [pc, #264]	@ (8000e2c <TIM2_Init+0x114>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6393      	str	r3, [r2, #56]	@ 0x38
	RCC->APB1RSTR1 &= ~RCC_APB1RSTR1_TIM2RST;
 8000d2a:	4b40      	ldr	r3, [pc, #256]	@ (8000e2c <TIM2_Init+0x114>)
 8000d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d2e:	4a3f      	ldr	r2, [pc, #252]	@ (8000e2c <TIM2_Init+0x114>)
 8000d30:	f023 0301 	bic.w	r3, r3, #1
 8000d34:	6393      	str	r3, [r2, #56]	@ 0x38

	// 1) Enable TIM2 clock (APB1)
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 8000d36:	4b3d      	ldr	r3, [pc, #244]	@ (8000e2c <TIM2_Init+0x114>)
 8000d38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d3a:	4a3c      	ldr	r2, [pc, #240]	@ (8000e2c <TIM2_Init+0x114>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	6593      	str	r3, [r2, #88]	@ 0x58
	// When we write value to PSC register, it stored info in preload register (like shadow register).
	// New setting will take into effect only after an Update event. Since we were setting ARR as 0xFFFFFFFF,
	// we have to wait unit counter resets to see new PSC value applied. This is the reason why i was seeing
	// behavior where my Period/Frequency values were incorrect for 3-5 minutes. Once counter resets and
	// new PSC value takes into effect, i started to see correct period and freq values.
	uint32_t psc = (SystemCoreClock / 1000000UL) - 1UL;
 8000d42:	4b3b      	ldr	r3, [pc, #236]	@ (8000e30 <TIM2_Init+0x118>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a3b      	ldr	r2, [pc, #236]	@ (8000e34 <TIM2_Init+0x11c>)
 8000d48:	fba2 2303 	umull	r2, r3, r2, r3
 8000d4c:	0c9b      	lsrs	r3, r3, #18
 8000d4e:	3b01      	subs	r3, #1
 8000d50:	607b      	str	r3, [r7, #4]
	TIM2->PSC = psc;           // e.g., at 16 MHz, PSC = 15
 8000d52:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6293      	str	r3, [r2, #40]	@ 0x28
	TIM2->EGR |= TIM_EGR_UG;  // generate an update event to reload PSC immediately
 8000d5a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d5e:	695b      	ldr	r3, [r3, #20]
 8000d60:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6153      	str	r3, [r2, #20]
	TIM2->ARR = 0xFFFFFFFFUL;  // free-run 32-bit (TIM2 is 32-bit on L4)
 8000d6a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8000d72:	62da      	str	r2, [r3, #44]	@ 0x2c

	printf("SystemCoreClock = %lu, TIM2 PSC = %lu\r\n", SystemCoreClock, TIM2->PSC);
 8000d74:	4b2e      	ldr	r3, [pc, #184]	@ (8000e30 <TIM2_Init+0x118>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d7c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8000d7e:	4619      	mov	r1, r3
 8000d80:	482d      	ldr	r0, [pc, #180]	@ (8000e38 <TIM2_Init+0x120>)
 8000d82:	f000 f993 	bl	80010ac <printf>

	// 3) Configure CH1 as input, mapped to TI1
	//    CC1S = 01 (input on TI1)
	TIM2->CCMR1 &= ~(TIM_CCMR1_CC1S_Msk);
 8000d86:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d90:	f023 0303 	bic.w	r3, r3, #3
 8000d94:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |=  (1u << TIM_CCMR1_CC1S_Pos);   	// CC1S=01 = TI1 input
 8000d96:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000d9a:	699b      	ldr	r3, [r3, #24]
 8000d9c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6193      	str	r3, [r2, #24]

	// Optional digital filter (IC1F). 0 = no filter; choose >0 if you have a noisy signal
	TIM2->CCMR1 &= ~(TIM_CCMR1_IC1F_Msk);
 8000da6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000db0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000db4:	6193      	str	r3, [r2, #24]

	// Select rising edge (CC1P=0, CC1NP=0)
	TIM2->CCER &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000db6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000dba:	6a1b      	ldr	r3, [r3, #32]
 8000dbc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dc0:	f023 030a 	bic.w	r3, r3, #10
 8000dc4:	6213      	str	r3, [r2, #32]

	// No prescaler on capture (IC1PSC=00) => capture every edge (i.e. rising edge)
	TIM2->CCMR1 &= ~(TIM_CCMR1_IC1PSC_Msk);
 8000dc6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000dd0:	f023 030c 	bic.w	r3, r3, #12
 8000dd4:	6193      	str	r3, [r2, #24]

	// 4) Enable interrupt on capture
	TIM2->DIER |= TIM_DIER_CC1IE;
 8000dd6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000de0:	f043 0302 	orr.w	r3, r3, #2
 8000de4:	60d3      	str	r3, [r2, #12]

	// 5) Enable capture and counter
	TIM2->CCER |= TIM_CCER_CC1E;
 8000de6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000dea:	6a1b      	ldr	r3, [r3, #32]
 8000dec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6213      	str	r3, [r2, #32]
	TIM2->CR1  |= TIM_CR1_CEN;
 8000df6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6013      	str	r3, [r2, #0]

	// 6) Clear all interrupt flags before starting
	TIM2->SR = 0;
 8000e06:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	611a      	str	r2, [r3, #16]

	// 7) Enable NVIC Interrupt
	NVIC_ClearPendingIRQ(TIM2_IRQn);
 8000e0e:	201c      	movs	r0, #28
 8000e10:	f7ff ff3a 	bl	8000c88 <__NVIC_ClearPendingIRQ>
	NVIC_SetPriority(TIM2_IRQn, 1);
 8000e14:	2101      	movs	r1, #1
 8000e16:	201c      	movs	r0, #28
 8000e18:	f7ff ff54 	bl	8000cc4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn);
 8000e1c:	201c      	movs	r0, #28
 8000e1e:	f7ff ff15 	bl	8000c4c <__NVIC_EnableIRQ>
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	20000000 	.word	0x20000000
 8000e34:	431bde83 	.word	0x431bde83
 8000e38:	08001aec 	.word	0x08001aec

08000e3c <TIM2_IRQHandler>:

//******************************************************************************************
// This function is to handle Timer2 Interrupt, triggered when rising edge is detected
//******************************************************************************************
void TIM2_IRQHandler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
	// Capture event on CH1 only
	if (TIM2->SR & TIM_SR_CC1IF)
 8000e42:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e46:	691b      	ldr	r3, [r3, #16]
 8000e48:	f003 0302 	and.w	r3, r3, #2
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d020      	beq.n	8000e92 <TIM2_IRQHandler+0x56>
    {
		// Current captured counter
		uint32_t current_ticks = TIM2->CCR1;
 8000e50:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e56:	607b      	str	r3, [r7, #4]

        // MP-Sept-25: Revised and simplified code
        // Let's skip first reading to ensure we have valid signal to work with
        if (!first_capture)
 8000e58:	4b11      	ldr	r3, [pc, #68]	@ (8000ea0 <TIM2_IRQHandler+0x64>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	f083 0301 	eor.w	r3, r3, #1
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d006      	beq.n	8000e76 <TIM2_IRQHandler+0x3a>
        {
        	// Calculate period using current and last rising edge values
        	// This should handle overflow automatically
        	period_ticks = (current_ticks - last_capture);
 8000e68:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea4 <TIM2_IRQHandler+0x68>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	1ad3      	subs	r3, r2, r3
 8000e70:	4a0d      	ldr	r2, [pc, #52]	@ (8000ea8 <TIM2_IRQHandler+0x6c>)
 8000e72:	6013      	str	r3, [r2, #0]
 8000e74:	e002      	b.n	8000e7c <TIM2_IRQHandler+0x40>
        }
        else
        {
        	// Skip very first reading
        	first_capture = false;
 8000e76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea0 <TIM2_IRQHandler+0x64>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	701a      	strb	r2, [r3, #0]
        }
        // Save for next edge
        last_capture = current_ticks;
 8000e7c:	4a09      	ldr	r2, [pc, #36]	@ (8000ea4 <TIM2_IRQHandler+0x68>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6013      	str	r3, [r2, #0]

    	// Clear flag
    	TIM2->SR &= ~TIM_SR_CC1IF;
 8000e82:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000e86:	691b      	ldr	r3, [r3, #16]
 8000e88:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e8c:	f023 0302 	bic.w	r3, r3, #2
 8000e90:	6113      	str	r3, [r2, #16]
    }
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20000004 	.word	0x20000004
 8000ea4:	20000084 	.word	0x20000084
 8000ea8:	20000088 	.word	0x20000088

08000eac <TIM2_GetPeriodTicks>:

//******************************************************************************************
// This function is to get Period of input signal measured
//******************************************************************************************
uint32_t TIM2_GetPeriodTicks(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
	return period_ticks;	// already in µs since PSC is set accordingly
 8000eb0:	4b03      	ldr	r3, [pc, #12]	@ (8000ec0 <TIM2_GetPeriodTicks+0x14>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20000088 	.word	0x20000088

08000ec4 <USART2_Init>:
//	while ( (USART2->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
//	while ( (USART2->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
//}

void USART2_Init(int baudrate)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
    // Enable clocks
    RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;
 8000ecc:	4b44      	ldr	r3, [pc, #272]	@ (8000fe0 <USART2_Init+0x11c>)
 8000ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ed0:	4a43      	ldr	r2, [pc, #268]	@ (8000fe0 <USART2_Init+0x11c>)
 8000ed2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ed6:	6593      	str	r3, [r2, #88]	@ 0x58
    RCC->AHB2ENR  |= RCC_AHB2ENR_GPIOAEN;
 8000ed8:	4b41      	ldr	r3, [pc, #260]	@ (8000fe0 <USART2_Init+0x11c>)
 8000eda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000edc:	4a40      	ldr	r2, [pc, #256]	@ (8000fe0 <USART2_Init+0x11c>)
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	64d3      	str	r3, [r2, #76]	@ 0x4c

    // ----------------------------
    // Configure PA2 (USART2_TX), PA3 (USART2_RX)
    // ----------------------------
    GPIOA->MODER &= ~((3u << (2*2)) | (3u << (3*2)));
 8000ee4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000eee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000ef2:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  ((2u << (2*2)) | (2u << (3*2)));  		// 10 = alternate function
 8000ef4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000efe:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000f02:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] &= ~((0xFu << (2*4)) | (0xFu << (3*4)));
 8000f04:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f08:	6a1b      	ldr	r3, [r3, #32]
 8000f0a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f0e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000f12:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=  ((7u << (2*4)) | (7u << (3*4))); 		// AF7 = USART2
 8000f14:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f18:	6a1b      	ldr	r3, [r3, #32]
 8000f1a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f1e:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8000f22:	6213      	str	r3, [r2, #32]
    GPIOA->OTYPER &= ~((1u<<2) | (1u<<3));             		// push-pull
 8000f24:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f2e:	f023 030c 	bic.w	r3, r3, #12
 8000f32:	6053      	str	r3, [r2, #4]
    GPIOA->OSPEEDR |= ((3u << (2*2)) | (3u << (3*2))); 		// very high speed
 8000f34:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f3e:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8000f42:	6093      	str	r3, [r2, #8]
    GPIOA->PUPDR &= ~((3u << (2*2)) | (3u << (3*2)));  		// no pull
 8000f44:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000f4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000f52:	60d3      	str	r3, [r2, #12]

    // Disable USART before config
    USART2->CR1 &= ~USART_CR1_UE;
 8000f54:	4b23      	ldr	r3, [pc, #140]	@ (8000fe4 <USART2_Init+0x120>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a22      	ldr	r2, [pc, #136]	@ (8000fe4 <USART2_Init+0x120>)
 8000f5a:	f023 0301 	bic.w	r3, r3, #1
 8000f5e:	6013      	str	r3, [r2, #0]

    // Word length = 8, no parity, oversampling = 16
    USART2->CR1 &= ~(USART_CR1_M | USART_CR1_PCE | USART_CR1_OVER8);
 8000f60:	4b20      	ldr	r3, [pc, #128]	@ (8000fe4 <USART2_Init+0x120>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a1f      	ldr	r2, [pc, #124]	@ (8000fe4 <USART2_Init+0x120>)
 8000f66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000f6a:	f423 4314 	bic.w	r3, r3, #37888	@ 0x9400
 8000f6e:	6013      	str	r3, [r2, #0]

    // Stop bits = 1
    USART2->CR2 &= ~USART_CR2_STOP;
 8000f70:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe4 <USART2_Init+0x120>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	4a1b      	ldr	r2, [pc, #108]	@ (8000fe4 <USART2_Init+0x120>)
 8000f76:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000f7a:	6053      	str	r3, [r2, #4]

    // No flow control
    USART2->CR3 &= ~(USART_CR3_RTSE | USART_CR3_CTSE);
 8000f7c:	4b19      	ldr	r3, [pc, #100]	@ (8000fe4 <USART2_Init+0x120>)
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	4a18      	ldr	r2, [pc, #96]	@ (8000fe4 <USART2_Init+0x120>)
 8000f82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000f86:	6093      	str	r3, [r2, #8]

    // MP-Sept-25: Set Baud rate --- Update for 16MHz or 80MHz
    //uint32_t pclk1 = 16000000UL; /// if HSI at 16MHz, APB1 prescaler = 1
    uint32_t pclk1 = 80000000UL;  // if PLL at 80 MHz, APB1 prescaler = 1
 8000f88:	4b17      	ldr	r3, [pc, #92]	@ (8000fe8 <USART2_Init+0x124>)
 8000f8a:	60fb      	str	r3, [r7, #12]
    USART2->BRR = (pclk1 + (baudrate/2U)) / baudrate;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	085a      	lsrs	r2, r3, #1
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	441a      	add	r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4913      	ldr	r1, [pc, #76]	@ (8000fe4 <USART2_Init+0x120>)
 8000f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9c:	60cb      	str	r3, [r1, #12]

    // Enable transmitter and receiver
    USART2->CR1 |= USART_CR1_TE | USART_CR1_RE;
 8000f9e:	4b11      	ldr	r3, [pc, #68]	@ (8000fe4 <USART2_Init+0x120>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a10      	ldr	r2, [pc, #64]	@ (8000fe4 <USART2_Init+0x120>)
 8000fa4:	f043 030c 	orr.w	r3, r3, #12
 8000fa8:	6013      	str	r3, [r2, #0]

    // Enable USART
    USART2->CR1 |= USART_CR1_UE;
 8000faa:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe4 <USART2_Init+0x120>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe4 <USART2_Init+0x120>)
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	6013      	str	r3, [r2, #0]

    while (!(USART2->ISR & USART_ISR_TEACK));
 8000fb6:	bf00      	nop
 8000fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe4 <USART2_Init+0x120>)
 8000fba:	69db      	ldr	r3, [r3, #28]
 8000fbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d0f9      	beq.n	8000fb8 <USART2_Init+0xf4>
    while (!(USART2->ISR & USART_ISR_REACK));
 8000fc4:	bf00      	nop
 8000fc6:	4b07      	ldr	r3, [pc, #28]	@ (8000fe4 <USART2_Init+0x120>)
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d0f9      	beq.n	8000fc6 <USART2_Init+0x102>
}
 8000fd2:	bf00      	nop
 8000fd4:	bf00      	nop
 8000fd6:	3714      	adds	r7, #20
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	40004400 	.word	0x40004400
 8000fe8:	04c4b400 	.word	0x04c4b400

08000fec <USART_Write>:
    // Reading USART_DR automatically clears the RXNE flag
    }
}

void USART_Write(USART_TypeDef * USARTx, uint8_t *buffer, uint32_t nBytes)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b087      	sub	sp, #28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
	int i;
	// A byte to be transmitted is written to the TDR (transmit data register), and the TXE (transmit empty) bit is cleared.
	// The TDR is copied to an output shift register for serialization when that register is empty, and the TXE bit is set.
	for (i = 0; i < nBytes; i++) {
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	e010      	b.n	8001020 <USART_Write+0x34>
		while (!(USARTx->ISR & USART_ISR_TXE))
 8000ffe:	bf00      	nop
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	69db      	ldr	r3, [r3, #28]
 8001004:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001008:	2b00      	cmp	r3, #0
 800100a:	d0f9      	beq.n	8001000 <USART_Write+0x14>
			;   							// wait until TXE (TX empty) bit is set
		USARTx->TDR = buffer[i] & 0xFF;		// writing USART_TDR automatically clears the TXE flag
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	68ba      	ldr	r2, [r7, #8]
 8001010:	4413      	add	r3, r2
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	461a      	mov	r2, r3
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	851a      	strh	r2, [r3, #40]	@ 0x28
	for (i = 0; i < nBytes; i++) {
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	3301      	adds	r3, #1
 800101e:	617b      	str	r3, [r7, #20]
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	429a      	cmp	r2, r3
 8001026:	d8ea      	bhi.n	8000ffe <USART_Write+0x12>
	}
	while (!(USARTx->ISR & USART_ISR_TC))
 8001028:	bf00      	nop
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001032:	2b00      	cmp	r3, #0
 8001034:	d0f9      	beq.n	800102a <USART_Write+0x3e>
		;  									// wait until TC bit is set
	USARTx->ISR &= ~USART_ISR_TC;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	69db      	ldr	r3, [r3, #28]
 800103a:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	61da      	str	r2, [r3, #28]
}   
 8001042:	bf00      	nop
 8001044:	371c      	adds	r7, #28
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <USART2_WriteChar>:

//******************************************************************************************
// USART Write functions for testing
//******************************************************************************************
void USART2_WriteChar(char c)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->ISR & USART_ISR_TXE)); // wait until TX buffer empty - blocking
 800105a:	bf00      	nop
 800105c:	4b07      	ldr	r3, [pc, #28]	@ (800107c <USART2_WriteChar+0x2c>)
 800105e:	69db      	ldr	r3, [r3, #28]
 8001060:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001064:	2b00      	cmp	r3, #0
 8001066:	d0f9      	beq.n	800105c <USART2_WriteChar+0xc>
    USART2->TDR = c;
 8001068:	4b04      	ldr	r3, [pc, #16]	@ (800107c <USART2_WriteChar+0x2c>)
 800106a:	79fa      	ldrb	r2, [r7, #7]
 800106c:	b292      	uxth	r2, r2
 800106e:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	40004400 	.word	0x40004400

08001080 <USART2_WriteString>:

void USART2_WriteString(const char *s)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
    while (*s)
 8001088:	e006      	b.n	8001098 <USART2_WriteString+0x18>
    {
        USART2_WriteChar(*s++);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	1c5a      	adds	r2, r3, #1
 800108e:	607a      	str	r2, [r7, #4]
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff ffdc 	bl	8001050 <USART2_WriteChar>
    while (*s)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d1f4      	bne.n	800108a <USART2_WriteString+0xa>
    }
}
 80010a0:	bf00      	nop
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <printf>:
//******************************************************************************************
// For USART Print -- Could be moved to UART module
//******************************************************************************************
static uint8_t buffer[200];

int printf (const char *format, ...) {
 80010ac:	b40f      	push	{r0, r1, r2, r3}
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
    va_list aptr;
    int ret;

    va_start (aptr, format);
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	603b      	str	r3, [r7, #0]
    ret = vsprintf ((char*)buffer, format, aptr);
 80010ba:	683a      	ldr	r2, [r7, #0]
 80010bc:	6939      	ldr	r1, [r7, #16]
 80010be:	4809      	ldr	r0, [pc, #36]	@ (80010e4 <printf+0x38>)
 80010c0:	f000 f854 	bl	800116c <vsiprintf>
 80010c4:	6078      	str	r0, [r7, #4]
    va_end (aptr);

    USART_Write (USART2, buffer, ret);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	461a      	mov	r2, r3
 80010ca:	4906      	ldr	r1, [pc, #24]	@ (80010e4 <printf+0x38>)
 80010cc:	4806      	ldr	r0, [pc, #24]	@ (80010e8 <printf+0x3c>)
 80010ce:	f7ff ff8d 	bl	8000fec <USART_Write>

    return ret;
 80010d2:	687b      	ldr	r3, [r7, #4]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010de:	b004      	add	sp, #16
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	2000008c 	.word	0x2000008c
 80010e8:	40004400 	.word	0x40004400

080010ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001124 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010f0:	f7ff fcec 	bl	8000acc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010f4:	480c      	ldr	r0, [pc, #48]	@ (8001128 <LoopForever+0x6>)
  ldr r1, =_edata
 80010f6:	490d      	ldr	r1, [pc, #52]	@ (800112c <LoopForever+0xa>)
  ldr r2, =_sidata
 80010f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001130 <LoopForever+0xe>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010fc:	e002      	b.n	8001104 <LoopCopyDataInit>

080010fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001100:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001102:	3304      	adds	r3, #4

08001104 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001104:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001106:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001108:	d3f9      	bcc.n	80010fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800110a:	4a0a      	ldr	r2, [pc, #40]	@ (8001134 <LoopForever+0x12>)
  ldr r4, =_ebss
 800110c:	4c0a      	ldr	r4, [pc, #40]	@ (8001138 <LoopForever+0x16>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001110:	e001      	b.n	8001116 <LoopFillZerobss>

08001112 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001112:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001114:	3204      	adds	r2, #4

08001116 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001116:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001118:	d3fb      	bcc.n	8001112 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800111a:	f000 f837 	bl	800118c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800111e:	f7ff fc55 	bl	80009cc <main>

08001122 <LoopForever>:

LoopForever:
    b LoopForever
 8001122:	e7fe      	b.n	8001122 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001124:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001128:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800112c:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8001130:	08001b98 	.word	0x08001b98
  ldr r2, =_sbss
 8001134:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8001138:	2000029c 	.word	0x2000029c

0800113c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800113c:	e7fe      	b.n	800113c <ADC1_2_IRQHandler>
	...

08001140 <_vsiprintf_r>:
 8001140:	b510      	push	{r4, lr}
 8001142:	b09a      	sub	sp, #104	@ 0x68
 8001144:	2400      	movs	r4, #0
 8001146:	9100      	str	r1, [sp, #0]
 8001148:	9104      	str	r1, [sp, #16]
 800114a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800114e:	9105      	str	r1, [sp, #20]
 8001150:	9102      	str	r1, [sp, #8]
 8001152:	4905      	ldr	r1, [pc, #20]	@ (8001168 <_vsiprintf_r+0x28>)
 8001154:	9103      	str	r1, [sp, #12]
 8001156:	4669      	mov	r1, sp
 8001158:	9419      	str	r4, [sp, #100]	@ 0x64
 800115a:	f000 f991 	bl	8001480 <_svfiprintf_r>
 800115e:	9b00      	ldr	r3, [sp, #0]
 8001160:	701c      	strb	r4, [r3, #0]
 8001162:	b01a      	add	sp, #104	@ 0x68
 8001164:	bd10      	pop	{r4, pc}
 8001166:	bf00      	nop
 8001168:	ffff0208 	.word	0xffff0208

0800116c <vsiprintf>:
 800116c:	4613      	mov	r3, r2
 800116e:	460a      	mov	r2, r1
 8001170:	4601      	mov	r1, r0
 8001172:	4802      	ldr	r0, [pc, #8]	@ (800117c <vsiprintf+0x10>)
 8001174:	6800      	ldr	r0, [r0, #0]
 8001176:	f7ff bfe3 	b.w	8001140 <_vsiprintf_r>
 800117a:	bf00      	nop
 800117c:	20000008 	.word	0x20000008

08001180 <__errno>:
 8001180:	4b01      	ldr	r3, [pc, #4]	@ (8001188 <__errno+0x8>)
 8001182:	6818      	ldr	r0, [r3, #0]
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	20000008 	.word	0x20000008

0800118c <__libc_init_array>:
 800118c:	b570      	push	{r4, r5, r6, lr}
 800118e:	4d0d      	ldr	r5, [pc, #52]	@ (80011c4 <__libc_init_array+0x38>)
 8001190:	4c0d      	ldr	r4, [pc, #52]	@ (80011c8 <__libc_init_array+0x3c>)
 8001192:	1b64      	subs	r4, r4, r5
 8001194:	10a4      	asrs	r4, r4, #2
 8001196:	2600      	movs	r6, #0
 8001198:	42a6      	cmp	r6, r4
 800119a:	d109      	bne.n	80011b0 <__libc_init_array+0x24>
 800119c:	4d0b      	ldr	r5, [pc, #44]	@ (80011cc <__libc_init_array+0x40>)
 800119e:	4c0c      	ldr	r4, [pc, #48]	@ (80011d0 <__libc_init_array+0x44>)
 80011a0:	f000 fc64 	bl	8001a6c <_init>
 80011a4:	1b64      	subs	r4, r4, r5
 80011a6:	10a4      	asrs	r4, r4, #2
 80011a8:	2600      	movs	r6, #0
 80011aa:	42a6      	cmp	r6, r4
 80011ac:	d105      	bne.n	80011ba <__libc_init_array+0x2e>
 80011ae:	bd70      	pop	{r4, r5, r6, pc}
 80011b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80011b4:	4798      	blx	r3
 80011b6:	3601      	adds	r6, #1
 80011b8:	e7ee      	b.n	8001198 <__libc_init_array+0xc>
 80011ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80011be:	4798      	blx	r3
 80011c0:	3601      	adds	r6, #1
 80011c2:	e7f2      	b.n	80011aa <__libc_init_array+0x1e>
 80011c4:	08001b90 	.word	0x08001b90
 80011c8:	08001b90 	.word	0x08001b90
 80011cc:	08001b90 	.word	0x08001b90
 80011d0:	08001b94 	.word	0x08001b94

080011d4 <__retarget_lock_acquire_recursive>:
 80011d4:	4770      	bx	lr

080011d6 <__retarget_lock_release_recursive>:
 80011d6:	4770      	bx	lr

080011d8 <_free_r>:
 80011d8:	b538      	push	{r3, r4, r5, lr}
 80011da:	4605      	mov	r5, r0
 80011dc:	2900      	cmp	r1, #0
 80011de:	d041      	beq.n	8001264 <_free_r+0x8c>
 80011e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80011e4:	1f0c      	subs	r4, r1, #4
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	bfb8      	it	lt
 80011ea:	18e4      	addlt	r4, r4, r3
 80011ec:	f000 f8e0 	bl	80013b0 <__malloc_lock>
 80011f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001268 <_free_r+0x90>)
 80011f2:	6813      	ldr	r3, [r2, #0]
 80011f4:	b933      	cbnz	r3, 8001204 <_free_r+0x2c>
 80011f6:	6063      	str	r3, [r4, #4]
 80011f8:	6014      	str	r4, [r2, #0]
 80011fa:	4628      	mov	r0, r5
 80011fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001200:	f000 b8dc 	b.w	80013bc <__malloc_unlock>
 8001204:	42a3      	cmp	r3, r4
 8001206:	d908      	bls.n	800121a <_free_r+0x42>
 8001208:	6820      	ldr	r0, [r4, #0]
 800120a:	1821      	adds	r1, r4, r0
 800120c:	428b      	cmp	r3, r1
 800120e:	bf01      	itttt	eq
 8001210:	6819      	ldreq	r1, [r3, #0]
 8001212:	685b      	ldreq	r3, [r3, #4]
 8001214:	1809      	addeq	r1, r1, r0
 8001216:	6021      	streq	r1, [r4, #0]
 8001218:	e7ed      	b.n	80011f6 <_free_r+0x1e>
 800121a:	461a      	mov	r2, r3
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	b10b      	cbz	r3, 8001224 <_free_r+0x4c>
 8001220:	42a3      	cmp	r3, r4
 8001222:	d9fa      	bls.n	800121a <_free_r+0x42>
 8001224:	6811      	ldr	r1, [r2, #0]
 8001226:	1850      	adds	r0, r2, r1
 8001228:	42a0      	cmp	r0, r4
 800122a:	d10b      	bne.n	8001244 <_free_r+0x6c>
 800122c:	6820      	ldr	r0, [r4, #0]
 800122e:	4401      	add	r1, r0
 8001230:	1850      	adds	r0, r2, r1
 8001232:	4283      	cmp	r3, r0
 8001234:	6011      	str	r1, [r2, #0]
 8001236:	d1e0      	bne.n	80011fa <_free_r+0x22>
 8001238:	6818      	ldr	r0, [r3, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	6053      	str	r3, [r2, #4]
 800123e:	4408      	add	r0, r1
 8001240:	6010      	str	r0, [r2, #0]
 8001242:	e7da      	b.n	80011fa <_free_r+0x22>
 8001244:	d902      	bls.n	800124c <_free_r+0x74>
 8001246:	230c      	movs	r3, #12
 8001248:	602b      	str	r3, [r5, #0]
 800124a:	e7d6      	b.n	80011fa <_free_r+0x22>
 800124c:	6820      	ldr	r0, [r4, #0]
 800124e:	1821      	adds	r1, r4, r0
 8001250:	428b      	cmp	r3, r1
 8001252:	bf04      	itt	eq
 8001254:	6819      	ldreq	r1, [r3, #0]
 8001256:	685b      	ldreq	r3, [r3, #4]
 8001258:	6063      	str	r3, [r4, #4]
 800125a:	bf04      	itt	eq
 800125c:	1809      	addeq	r1, r1, r0
 800125e:	6021      	streq	r1, [r4, #0]
 8001260:	6054      	str	r4, [r2, #4]
 8001262:	e7ca      	b.n	80011fa <_free_r+0x22>
 8001264:	bd38      	pop	{r3, r4, r5, pc}
 8001266:	bf00      	nop
 8001268:	20000298 	.word	0x20000298

0800126c <sbrk_aligned>:
 800126c:	b570      	push	{r4, r5, r6, lr}
 800126e:	4e0f      	ldr	r6, [pc, #60]	@ (80012ac <sbrk_aligned+0x40>)
 8001270:	460c      	mov	r4, r1
 8001272:	6831      	ldr	r1, [r6, #0]
 8001274:	4605      	mov	r5, r0
 8001276:	b911      	cbnz	r1, 800127e <sbrk_aligned+0x12>
 8001278:	f000 fba4 	bl	80019c4 <_sbrk_r>
 800127c:	6030      	str	r0, [r6, #0]
 800127e:	4621      	mov	r1, r4
 8001280:	4628      	mov	r0, r5
 8001282:	f000 fb9f 	bl	80019c4 <_sbrk_r>
 8001286:	1c43      	adds	r3, r0, #1
 8001288:	d103      	bne.n	8001292 <sbrk_aligned+0x26>
 800128a:	f04f 34ff 	mov.w	r4, #4294967295
 800128e:	4620      	mov	r0, r4
 8001290:	bd70      	pop	{r4, r5, r6, pc}
 8001292:	1cc4      	adds	r4, r0, #3
 8001294:	f024 0403 	bic.w	r4, r4, #3
 8001298:	42a0      	cmp	r0, r4
 800129a:	d0f8      	beq.n	800128e <sbrk_aligned+0x22>
 800129c:	1a21      	subs	r1, r4, r0
 800129e:	4628      	mov	r0, r5
 80012a0:	f000 fb90 	bl	80019c4 <_sbrk_r>
 80012a4:	3001      	adds	r0, #1
 80012a6:	d1f2      	bne.n	800128e <sbrk_aligned+0x22>
 80012a8:	e7ef      	b.n	800128a <sbrk_aligned+0x1e>
 80012aa:	bf00      	nop
 80012ac:	20000294 	.word	0x20000294

080012b0 <_malloc_r>:
 80012b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80012b4:	1ccd      	adds	r5, r1, #3
 80012b6:	f025 0503 	bic.w	r5, r5, #3
 80012ba:	3508      	adds	r5, #8
 80012bc:	2d0c      	cmp	r5, #12
 80012be:	bf38      	it	cc
 80012c0:	250c      	movcc	r5, #12
 80012c2:	2d00      	cmp	r5, #0
 80012c4:	4606      	mov	r6, r0
 80012c6:	db01      	blt.n	80012cc <_malloc_r+0x1c>
 80012c8:	42a9      	cmp	r1, r5
 80012ca:	d904      	bls.n	80012d6 <_malloc_r+0x26>
 80012cc:	230c      	movs	r3, #12
 80012ce:	6033      	str	r3, [r6, #0]
 80012d0:	2000      	movs	r0, #0
 80012d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80012d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80013ac <_malloc_r+0xfc>
 80012da:	f000 f869 	bl	80013b0 <__malloc_lock>
 80012de:	f8d8 3000 	ldr.w	r3, [r8]
 80012e2:	461c      	mov	r4, r3
 80012e4:	bb44      	cbnz	r4, 8001338 <_malloc_r+0x88>
 80012e6:	4629      	mov	r1, r5
 80012e8:	4630      	mov	r0, r6
 80012ea:	f7ff ffbf 	bl	800126c <sbrk_aligned>
 80012ee:	1c43      	adds	r3, r0, #1
 80012f0:	4604      	mov	r4, r0
 80012f2:	d158      	bne.n	80013a6 <_malloc_r+0xf6>
 80012f4:	f8d8 4000 	ldr.w	r4, [r8]
 80012f8:	4627      	mov	r7, r4
 80012fa:	2f00      	cmp	r7, #0
 80012fc:	d143      	bne.n	8001386 <_malloc_r+0xd6>
 80012fe:	2c00      	cmp	r4, #0
 8001300:	d04b      	beq.n	800139a <_malloc_r+0xea>
 8001302:	6823      	ldr	r3, [r4, #0]
 8001304:	4639      	mov	r1, r7
 8001306:	4630      	mov	r0, r6
 8001308:	eb04 0903 	add.w	r9, r4, r3
 800130c:	f000 fb5a 	bl	80019c4 <_sbrk_r>
 8001310:	4581      	cmp	r9, r0
 8001312:	d142      	bne.n	800139a <_malloc_r+0xea>
 8001314:	6821      	ldr	r1, [r4, #0]
 8001316:	1a6d      	subs	r5, r5, r1
 8001318:	4629      	mov	r1, r5
 800131a:	4630      	mov	r0, r6
 800131c:	f7ff ffa6 	bl	800126c <sbrk_aligned>
 8001320:	3001      	adds	r0, #1
 8001322:	d03a      	beq.n	800139a <_malloc_r+0xea>
 8001324:	6823      	ldr	r3, [r4, #0]
 8001326:	442b      	add	r3, r5
 8001328:	6023      	str	r3, [r4, #0]
 800132a:	f8d8 3000 	ldr.w	r3, [r8]
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	bb62      	cbnz	r2, 800138c <_malloc_r+0xdc>
 8001332:	f8c8 7000 	str.w	r7, [r8]
 8001336:	e00f      	b.n	8001358 <_malloc_r+0xa8>
 8001338:	6822      	ldr	r2, [r4, #0]
 800133a:	1b52      	subs	r2, r2, r5
 800133c:	d420      	bmi.n	8001380 <_malloc_r+0xd0>
 800133e:	2a0b      	cmp	r2, #11
 8001340:	d917      	bls.n	8001372 <_malloc_r+0xc2>
 8001342:	1961      	adds	r1, r4, r5
 8001344:	42a3      	cmp	r3, r4
 8001346:	6025      	str	r5, [r4, #0]
 8001348:	bf18      	it	ne
 800134a:	6059      	strne	r1, [r3, #4]
 800134c:	6863      	ldr	r3, [r4, #4]
 800134e:	bf08      	it	eq
 8001350:	f8c8 1000 	streq.w	r1, [r8]
 8001354:	5162      	str	r2, [r4, r5]
 8001356:	604b      	str	r3, [r1, #4]
 8001358:	4630      	mov	r0, r6
 800135a:	f000 f82f 	bl	80013bc <__malloc_unlock>
 800135e:	f104 000b 	add.w	r0, r4, #11
 8001362:	1d23      	adds	r3, r4, #4
 8001364:	f020 0007 	bic.w	r0, r0, #7
 8001368:	1ac2      	subs	r2, r0, r3
 800136a:	bf1c      	itt	ne
 800136c:	1a1b      	subne	r3, r3, r0
 800136e:	50a3      	strne	r3, [r4, r2]
 8001370:	e7af      	b.n	80012d2 <_malloc_r+0x22>
 8001372:	6862      	ldr	r2, [r4, #4]
 8001374:	42a3      	cmp	r3, r4
 8001376:	bf0c      	ite	eq
 8001378:	f8c8 2000 	streq.w	r2, [r8]
 800137c:	605a      	strne	r2, [r3, #4]
 800137e:	e7eb      	b.n	8001358 <_malloc_r+0xa8>
 8001380:	4623      	mov	r3, r4
 8001382:	6864      	ldr	r4, [r4, #4]
 8001384:	e7ae      	b.n	80012e4 <_malloc_r+0x34>
 8001386:	463c      	mov	r4, r7
 8001388:	687f      	ldr	r7, [r7, #4]
 800138a:	e7b6      	b.n	80012fa <_malloc_r+0x4a>
 800138c:	461a      	mov	r2, r3
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	42a3      	cmp	r3, r4
 8001392:	d1fb      	bne.n	800138c <_malloc_r+0xdc>
 8001394:	2300      	movs	r3, #0
 8001396:	6053      	str	r3, [r2, #4]
 8001398:	e7de      	b.n	8001358 <_malloc_r+0xa8>
 800139a:	230c      	movs	r3, #12
 800139c:	6033      	str	r3, [r6, #0]
 800139e:	4630      	mov	r0, r6
 80013a0:	f000 f80c 	bl	80013bc <__malloc_unlock>
 80013a4:	e794      	b.n	80012d0 <_malloc_r+0x20>
 80013a6:	6005      	str	r5, [r0, #0]
 80013a8:	e7d6      	b.n	8001358 <_malloc_r+0xa8>
 80013aa:	bf00      	nop
 80013ac:	20000298 	.word	0x20000298

080013b0 <__malloc_lock>:
 80013b0:	4801      	ldr	r0, [pc, #4]	@ (80013b8 <__malloc_lock+0x8>)
 80013b2:	f7ff bf0f 	b.w	80011d4 <__retarget_lock_acquire_recursive>
 80013b6:	bf00      	nop
 80013b8:	20000290 	.word	0x20000290

080013bc <__malloc_unlock>:
 80013bc:	4801      	ldr	r0, [pc, #4]	@ (80013c4 <__malloc_unlock+0x8>)
 80013be:	f7ff bf0a 	b.w	80011d6 <__retarget_lock_release_recursive>
 80013c2:	bf00      	nop
 80013c4:	20000290 	.word	0x20000290

080013c8 <__ssputs_r>:
 80013c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80013cc:	688e      	ldr	r6, [r1, #8]
 80013ce:	461f      	mov	r7, r3
 80013d0:	42be      	cmp	r6, r7
 80013d2:	680b      	ldr	r3, [r1, #0]
 80013d4:	4682      	mov	sl, r0
 80013d6:	460c      	mov	r4, r1
 80013d8:	4690      	mov	r8, r2
 80013da:	d82d      	bhi.n	8001438 <__ssputs_r+0x70>
 80013dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80013e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80013e4:	d026      	beq.n	8001434 <__ssputs_r+0x6c>
 80013e6:	6965      	ldr	r5, [r4, #20]
 80013e8:	6909      	ldr	r1, [r1, #16]
 80013ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80013ee:	eba3 0901 	sub.w	r9, r3, r1
 80013f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80013f6:	1c7b      	adds	r3, r7, #1
 80013f8:	444b      	add	r3, r9
 80013fa:	106d      	asrs	r5, r5, #1
 80013fc:	429d      	cmp	r5, r3
 80013fe:	bf38      	it	cc
 8001400:	461d      	movcc	r5, r3
 8001402:	0553      	lsls	r3, r2, #21
 8001404:	d527      	bpl.n	8001456 <__ssputs_r+0x8e>
 8001406:	4629      	mov	r1, r5
 8001408:	f7ff ff52 	bl	80012b0 <_malloc_r>
 800140c:	4606      	mov	r6, r0
 800140e:	b360      	cbz	r0, 800146a <__ssputs_r+0xa2>
 8001410:	6921      	ldr	r1, [r4, #16]
 8001412:	464a      	mov	r2, r9
 8001414:	f000 fae6 	bl	80019e4 <memcpy>
 8001418:	89a3      	ldrh	r3, [r4, #12]
 800141a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800141e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001422:	81a3      	strh	r3, [r4, #12]
 8001424:	6126      	str	r6, [r4, #16]
 8001426:	6165      	str	r5, [r4, #20]
 8001428:	444e      	add	r6, r9
 800142a:	eba5 0509 	sub.w	r5, r5, r9
 800142e:	6026      	str	r6, [r4, #0]
 8001430:	60a5      	str	r5, [r4, #8]
 8001432:	463e      	mov	r6, r7
 8001434:	42be      	cmp	r6, r7
 8001436:	d900      	bls.n	800143a <__ssputs_r+0x72>
 8001438:	463e      	mov	r6, r7
 800143a:	6820      	ldr	r0, [r4, #0]
 800143c:	4632      	mov	r2, r6
 800143e:	4641      	mov	r1, r8
 8001440:	f000 faa6 	bl	8001990 <memmove>
 8001444:	68a3      	ldr	r3, [r4, #8]
 8001446:	1b9b      	subs	r3, r3, r6
 8001448:	60a3      	str	r3, [r4, #8]
 800144a:	6823      	ldr	r3, [r4, #0]
 800144c:	4433      	add	r3, r6
 800144e:	6023      	str	r3, [r4, #0]
 8001450:	2000      	movs	r0, #0
 8001452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001456:	462a      	mov	r2, r5
 8001458:	f000 fad2 	bl	8001a00 <_realloc_r>
 800145c:	4606      	mov	r6, r0
 800145e:	2800      	cmp	r0, #0
 8001460:	d1e0      	bne.n	8001424 <__ssputs_r+0x5c>
 8001462:	6921      	ldr	r1, [r4, #16]
 8001464:	4650      	mov	r0, sl
 8001466:	f7ff feb7 	bl	80011d8 <_free_r>
 800146a:	230c      	movs	r3, #12
 800146c:	f8ca 3000 	str.w	r3, [sl]
 8001470:	89a3      	ldrh	r3, [r4, #12]
 8001472:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001476:	81a3      	strh	r3, [r4, #12]
 8001478:	f04f 30ff 	mov.w	r0, #4294967295
 800147c:	e7e9      	b.n	8001452 <__ssputs_r+0x8a>
	...

08001480 <_svfiprintf_r>:
 8001480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001484:	4698      	mov	r8, r3
 8001486:	898b      	ldrh	r3, [r1, #12]
 8001488:	061b      	lsls	r3, r3, #24
 800148a:	b09d      	sub	sp, #116	@ 0x74
 800148c:	4607      	mov	r7, r0
 800148e:	460d      	mov	r5, r1
 8001490:	4614      	mov	r4, r2
 8001492:	d510      	bpl.n	80014b6 <_svfiprintf_r+0x36>
 8001494:	690b      	ldr	r3, [r1, #16]
 8001496:	b973      	cbnz	r3, 80014b6 <_svfiprintf_r+0x36>
 8001498:	2140      	movs	r1, #64	@ 0x40
 800149a:	f7ff ff09 	bl	80012b0 <_malloc_r>
 800149e:	6028      	str	r0, [r5, #0]
 80014a0:	6128      	str	r0, [r5, #16]
 80014a2:	b930      	cbnz	r0, 80014b2 <_svfiprintf_r+0x32>
 80014a4:	230c      	movs	r3, #12
 80014a6:	603b      	str	r3, [r7, #0]
 80014a8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ac:	b01d      	add	sp, #116	@ 0x74
 80014ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014b2:	2340      	movs	r3, #64	@ 0x40
 80014b4:	616b      	str	r3, [r5, #20]
 80014b6:	2300      	movs	r3, #0
 80014b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80014ba:	2320      	movs	r3, #32
 80014bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80014c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80014c4:	2330      	movs	r3, #48	@ 0x30
 80014c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001664 <_svfiprintf_r+0x1e4>
 80014ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80014ce:	f04f 0901 	mov.w	r9, #1
 80014d2:	4623      	mov	r3, r4
 80014d4:	469a      	mov	sl, r3
 80014d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80014da:	b10a      	cbz	r2, 80014e0 <_svfiprintf_r+0x60>
 80014dc:	2a25      	cmp	r2, #37	@ 0x25
 80014de:	d1f9      	bne.n	80014d4 <_svfiprintf_r+0x54>
 80014e0:	ebba 0b04 	subs.w	fp, sl, r4
 80014e4:	d00b      	beq.n	80014fe <_svfiprintf_r+0x7e>
 80014e6:	465b      	mov	r3, fp
 80014e8:	4622      	mov	r2, r4
 80014ea:	4629      	mov	r1, r5
 80014ec:	4638      	mov	r0, r7
 80014ee:	f7ff ff6b 	bl	80013c8 <__ssputs_r>
 80014f2:	3001      	adds	r0, #1
 80014f4:	f000 80a7 	beq.w	8001646 <_svfiprintf_r+0x1c6>
 80014f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80014fa:	445a      	add	r2, fp
 80014fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80014fe:	f89a 3000 	ldrb.w	r3, [sl]
 8001502:	2b00      	cmp	r3, #0
 8001504:	f000 809f 	beq.w	8001646 <_svfiprintf_r+0x1c6>
 8001508:	2300      	movs	r3, #0
 800150a:	f04f 32ff 	mov.w	r2, #4294967295
 800150e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001512:	f10a 0a01 	add.w	sl, sl, #1
 8001516:	9304      	str	r3, [sp, #16]
 8001518:	9307      	str	r3, [sp, #28]
 800151a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800151e:	931a      	str	r3, [sp, #104]	@ 0x68
 8001520:	4654      	mov	r4, sl
 8001522:	2205      	movs	r2, #5
 8001524:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001528:	484e      	ldr	r0, [pc, #312]	@ (8001664 <_svfiprintf_r+0x1e4>)
 800152a:	f7fe fe51 	bl	80001d0 <memchr>
 800152e:	9a04      	ldr	r2, [sp, #16]
 8001530:	b9d8      	cbnz	r0, 800156a <_svfiprintf_r+0xea>
 8001532:	06d0      	lsls	r0, r2, #27
 8001534:	bf44      	itt	mi
 8001536:	2320      	movmi	r3, #32
 8001538:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800153c:	0711      	lsls	r1, r2, #28
 800153e:	bf44      	itt	mi
 8001540:	232b      	movmi	r3, #43	@ 0x2b
 8001542:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001546:	f89a 3000 	ldrb.w	r3, [sl]
 800154a:	2b2a      	cmp	r3, #42	@ 0x2a
 800154c:	d015      	beq.n	800157a <_svfiprintf_r+0xfa>
 800154e:	9a07      	ldr	r2, [sp, #28]
 8001550:	4654      	mov	r4, sl
 8001552:	2000      	movs	r0, #0
 8001554:	f04f 0c0a 	mov.w	ip, #10
 8001558:	4621      	mov	r1, r4
 800155a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800155e:	3b30      	subs	r3, #48	@ 0x30
 8001560:	2b09      	cmp	r3, #9
 8001562:	d94b      	bls.n	80015fc <_svfiprintf_r+0x17c>
 8001564:	b1b0      	cbz	r0, 8001594 <_svfiprintf_r+0x114>
 8001566:	9207      	str	r2, [sp, #28]
 8001568:	e014      	b.n	8001594 <_svfiprintf_r+0x114>
 800156a:	eba0 0308 	sub.w	r3, r0, r8
 800156e:	fa09 f303 	lsl.w	r3, r9, r3
 8001572:	4313      	orrs	r3, r2
 8001574:	9304      	str	r3, [sp, #16]
 8001576:	46a2      	mov	sl, r4
 8001578:	e7d2      	b.n	8001520 <_svfiprintf_r+0xa0>
 800157a:	9b03      	ldr	r3, [sp, #12]
 800157c:	1d19      	adds	r1, r3, #4
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	9103      	str	r1, [sp, #12]
 8001582:	2b00      	cmp	r3, #0
 8001584:	bfbb      	ittet	lt
 8001586:	425b      	neglt	r3, r3
 8001588:	f042 0202 	orrlt.w	r2, r2, #2
 800158c:	9307      	strge	r3, [sp, #28]
 800158e:	9307      	strlt	r3, [sp, #28]
 8001590:	bfb8      	it	lt
 8001592:	9204      	strlt	r2, [sp, #16]
 8001594:	7823      	ldrb	r3, [r4, #0]
 8001596:	2b2e      	cmp	r3, #46	@ 0x2e
 8001598:	d10a      	bne.n	80015b0 <_svfiprintf_r+0x130>
 800159a:	7863      	ldrb	r3, [r4, #1]
 800159c:	2b2a      	cmp	r3, #42	@ 0x2a
 800159e:	d132      	bne.n	8001606 <_svfiprintf_r+0x186>
 80015a0:	9b03      	ldr	r3, [sp, #12]
 80015a2:	1d1a      	adds	r2, r3, #4
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	9203      	str	r2, [sp, #12]
 80015a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80015ac:	3402      	adds	r4, #2
 80015ae:	9305      	str	r3, [sp, #20]
 80015b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8001674 <_svfiprintf_r+0x1f4>
 80015b4:	7821      	ldrb	r1, [r4, #0]
 80015b6:	2203      	movs	r2, #3
 80015b8:	4650      	mov	r0, sl
 80015ba:	f7fe fe09 	bl	80001d0 <memchr>
 80015be:	b138      	cbz	r0, 80015d0 <_svfiprintf_r+0x150>
 80015c0:	9b04      	ldr	r3, [sp, #16]
 80015c2:	eba0 000a 	sub.w	r0, r0, sl
 80015c6:	2240      	movs	r2, #64	@ 0x40
 80015c8:	4082      	lsls	r2, r0
 80015ca:	4313      	orrs	r3, r2
 80015cc:	3401      	adds	r4, #1
 80015ce:	9304      	str	r3, [sp, #16]
 80015d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80015d4:	4824      	ldr	r0, [pc, #144]	@ (8001668 <_svfiprintf_r+0x1e8>)
 80015d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80015da:	2206      	movs	r2, #6
 80015dc:	f7fe fdf8 	bl	80001d0 <memchr>
 80015e0:	2800      	cmp	r0, #0
 80015e2:	d036      	beq.n	8001652 <_svfiprintf_r+0x1d2>
 80015e4:	4b21      	ldr	r3, [pc, #132]	@ (800166c <_svfiprintf_r+0x1ec>)
 80015e6:	bb1b      	cbnz	r3, 8001630 <_svfiprintf_r+0x1b0>
 80015e8:	9b03      	ldr	r3, [sp, #12]
 80015ea:	3307      	adds	r3, #7
 80015ec:	f023 0307 	bic.w	r3, r3, #7
 80015f0:	3308      	adds	r3, #8
 80015f2:	9303      	str	r3, [sp, #12]
 80015f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80015f6:	4433      	add	r3, r6
 80015f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80015fa:	e76a      	b.n	80014d2 <_svfiprintf_r+0x52>
 80015fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8001600:	460c      	mov	r4, r1
 8001602:	2001      	movs	r0, #1
 8001604:	e7a8      	b.n	8001558 <_svfiprintf_r+0xd8>
 8001606:	2300      	movs	r3, #0
 8001608:	3401      	adds	r4, #1
 800160a:	9305      	str	r3, [sp, #20]
 800160c:	4619      	mov	r1, r3
 800160e:	f04f 0c0a 	mov.w	ip, #10
 8001612:	4620      	mov	r0, r4
 8001614:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001618:	3a30      	subs	r2, #48	@ 0x30
 800161a:	2a09      	cmp	r2, #9
 800161c:	d903      	bls.n	8001626 <_svfiprintf_r+0x1a6>
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0c6      	beq.n	80015b0 <_svfiprintf_r+0x130>
 8001622:	9105      	str	r1, [sp, #20]
 8001624:	e7c4      	b.n	80015b0 <_svfiprintf_r+0x130>
 8001626:	fb0c 2101 	mla	r1, ip, r1, r2
 800162a:	4604      	mov	r4, r0
 800162c:	2301      	movs	r3, #1
 800162e:	e7f0      	b.n	8001612 <_svfiprintf_r+0x192>
 8001630:	ab03      	add	r3, sp, #12
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	462a      	mov	r2, r5
 8001636:	4b0e      	ldr	r3, [pc, #56]	@ (8001670 <_svfiprintf_r+0x1f0>)
 8001638:	a904      	add	r1, sp, #16
 800163a:	4638      	mov	r0, r7
 800163c:	f3af 8000 	nop.w
 8001640:	1c42      	adds	r2, r0, #1
 8001642:	4606      	mov	r6, r0
 8001644:	d1d6      	bne.n	80015f4 <_svfiprintf_r+0x174>
 8001646:	89ab      	ldrh	r3, [r5, #12]
 8001648:	065b      	lsls	r3, r3, #25
 800164a:	f53f af2d 	bmi.w	80014a8 <_svfiprintf_r+0x28>
 800164e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001650:	e72c      	b.n	80014ac <_svfiprintf_r+0x2c>
 8001652:	ab03      	add	r3, sp, #12
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	462a      	mov	r2, r5
 8001658:	4b05      	ldr	r3, [pc, #20]	@ (8001670 <_svfiprintf_r+0x1f0>)
 800165a:	a904      	add	r1, sp, #16
 800165c:	4638      	mov	r0, r7
 800165e:	f000 f879 	bl	8001754 <_printf_i>
 8001662:	e7ed      	b.n	8001640 <_svfiprintf_r+0x1c0>
 8001664:	08001b54 	.word	0x08001b54
 8001668:	08001b5e 	.word	0x08001b5e
 800166c:	00000000 	.word	0x00000000
 8001670:	080013c9 	.word	0x080013c9
 8001674:	08001b5a 	.word	0x08001b5a

08001678 <_printf_common>:
 8001678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800167c:	4616      	mov	r6, r2
 800167e:	4698      	mov	r8, r3
 8001680:	688a      	ldr	r2, [r1, #8]
 8001682:	690b      	ldr	r3, [r1, #16]
 8001684:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001688:	4293      	cmp	r3, r2
 800168a:	bfb8      	it	lt
 800168c:	4613      	movlt	r3, r2
 800168e:	6033      	str	r3, [r6, #0]
 8001690:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001694:	4607      	mov	r7, r0
 8001696:	460c      	mov	r4, r1
 8001698:	b10a      	cbz	r2, 800169e <_printf_common+0x26>
 800169a:	3301      	adds	r3, #1
 800169c:	6033      	str	r3, [r6, #0]
 800169e:	6823      	ldr	r3, [r4, #0]
 80016a0:	0699      	lsls	r1, r3, #26
 80016a2:	bf42      	ittt	mi
 80016a4:	6833      	ldrmi	r3, [r6, #0]
 80016a6:	3302      	addmi	r3, #2
 80016a8:	6033      	strmi	r3, [r6, #0]
 80016aa:	6825      	ldr	r5, [r4, #0]
 80016ac:	f015 0506 	ands.w	r5, r5, #6
 80016b0:	d106      	bne.n	80016c0 <_printf_common+0x48>
 80016b2:	f104 0a19 	add.w	sl, r4, #25
 80016b6:	68e3      	ldr	r3, [r4, #12]
 80016b8:	6832      	ldr	r2, [r6, #0]
 80016ba:	1a9b      	subs	r3, r3, r2
 80016bc:	42ab      	cmp	r3, r5
 80016be:	dc26      	bgt.n	800170e <_printf_common+0x96>
 80016c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80016c4:	6822      	ldr	r2, [r4, #0]
 80016c6:	3b00      	subs	r3, #0
 80016c8:	bf18      	it	ne
 80016ca:	2301      	movne	r3, #1
 80016cc:	0692      	lsls	r2, r2, #26
 80016ce:	d42b      	bmi.n	8001728 <_printf_common+0xb0>
 80016d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80016d4:	4641      	mov	r1, r8
 80016d6:	4638      	mov	r0, r7
 80016d8:	47c8      	blx	r9
 80016da:	3001      	adds	r0, #1
 80016dc:	d01e      	beq.n	800171c <_printf_common+0xa4>
 80016de:	6823      	ldr	r3, [r4, #0]
 80016e0:	6922      	ldr	r2, [r4, #16]
 80016e2:	f003 0306 	and.w	r3, r3, #6
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	bf02      	ittt	eq
 80016ea:	68e5      	ldreq	r5, [r4, #12]
 80016ec:	6833      	ldreq	r3, [r6, #0]
 80016ee:	1aed      	subeq	r5, r5, r3
 80016f0:	68a3      	ldr	r3, [r4, #8]
 80016f2:	bf0c      	ite	eq
 80016f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80016f8:	2500      	movne	r5, #0
 80016fa:	4293      	cmp	r3, r2
 80016fc:	bfc4      	itt	gt
 80016fe:	1a9b      	subgt	r3, r3, r2
 8001700:	18ed      	addgt	r5, r5, r3
 8001702:	2600      	movs	r6, #0
 8001704:	341a      	adds	r4, #26
 8001706:	42b5      	cmp	r5, r6
 8001708:	d11a      	bne.n	8001740 <_printf_common+0xc8>
 800170a:	2000      	movs	r0, #0
 800170c:	e008      	b.n	8001720 <_printf_common+0xa8>
 800170e:	2301      	movs	r3, #1
 8001710:	4652      	mov	r2, sl
 8001712:	4641      	mov	r1, r8
 8001714:	4638      	mov	r0, r7
 8001716:	47c8      	blx	r9
 8001718:	3001      	adds	r0, #1
 800171a:	d103      	bne.n	8001724 <_printf_common+0xac>
 800171c:	f04f 30ff 	mov.w	r0, #4294967295
 8001720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001724:	3501      	adds	r5, #1
 8001726:	e7c6      	b.n	80016b6 <_printf_common+0x3e>
 8001728:	18e1      	adds	r1, r4, r3
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	2030      	movs	r0, #48	@ 0x30
 800172e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001732:	4422      	add	r2, r4
 8001734:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001738:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800173c:	3302      	adds	r3, #2
 800173e:	e7c7      	b.n	80016d0 <_printf_common+0x58>
 8001740:	2301      	movs	r3, #1
 8001742:	4622      	mov	r2, r4
 8001744:	4641      	mov	r1, r8
 8001746:	4638      	mov	r0, r7
 8001748:	47c8      	blx	r9
 800174a:	3001      	adds	r0, #1
 800174c:	d0e6      	beq.n	800171c <_printf_common+0xa4>
 800174e:	3601      	adds	r6, #1
 8001750:	e7d9      	b.n	8001706 <_printf_common+0x8e>
	...

08001754 <_printf_i>:
 8001754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001758:	7e0f      	ldrb	r7, [r1, #24]
 800175a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800175c:	2f78      	cmp	r7, #120	@ 0x78
 800175e:	4691      	mov	r9, r2
 8001760:	4680      	mov	r8, r0
 8001762:	460c      	mov	r4, r1
 8001764:	469a      	mov	sl, r3
 8001766:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800176a:	d807      	bhi.n	800177c <_printf_i+0x28>
 800176c:	2f62      	cmp	r7, #98	@ 0x62
 800176e:	d80a      	bhi.n	8001786 <_printf_i+0x32>
 8001770:	2f00      	cmp	r7, #0
 8001772:	f000 80d1 	beq.w	8001918 <_printf_i+0x1c4>
 8001776:	2f58      	cmp	r7, #88	@ 0x58
 8001778:	f000 80b8 	beq.w	80018ec <_printf_i+0x198>
 800177c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001780:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001784:	e03a      	b.n	80017fc <_printf_i+0xa8>
 8001786:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800178a:	2b15      	cmp	r3, #21
 800178c:	d8f6      	bhi.n	800177c <_printf_i+0x28>
 800178e:	a101      	add	r1, pc, #4	@ (adr r1, 8001794 <_printf_i+0x40>)
 8001790:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001794:	080017ed 	.word	0x080017ed
 8001798:	08001801 	.word	0x08001801
 800179c:	0800177d 	.word	0x0800177d
 80017a0:	0800177d 	.word	0x0800177d
 80017a4:	0800177d 	.word	0x0800177d
 80017a8:	0800177d 	.word	0x0800177d
 80017ac:	08001801 	.word	0x08001801
 80017b0:	0800177d 	.word	0x0800177d
 80017b4:	0800177d 	.word	0x0800177d
 80017b8:	0800177d 	.word	0x0800177d
 80017bc:	0800177d 	.word	0x0800177d
 80017c0:	080018ff 	.word	0x080018ff
 80017c4:	0800182b 	.word	0x0800182b
 80017c8:	080018b9 	.word	0x080018b9
 80017cc:	0800177d 	.word	0x0800177d
 80017d0:	0800177d 	.word	0x0800177d
 80017d4:	08001921 	.word	0x08001921
 80017d8:	0800177d 	.word	0x0800177d
 80017dc:	0800182b 	.word	0x0800182b
 80017e0:	0800177d 	.word	0x0800177d
 80017e4:	0800177d 	.word	0x0800177d
 80017e8:	080018c1 	.word	0x080018c1
 80017ec:	6833      	ldr	r3, [r6, #0]
 80017ee:	1d1a      	adds	r2, r3, #4
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6032      	str	r2, [r6, #0]
 80017f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80017f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80017fc:	2301      	movs	r3, #1
 80017fe:	e09c      	b.n	800193a <_printf_i+0x1e6>
 8001800:	6833      	ldr	r3, [r6, #0]
 8001802:	6820      	ldr	r0, [r4, #0]
 8001804:	1d19      	adds	r1, r3, #4
 8001806:	6031      	str	r1, [r6, #0]
 8001808:	0606      	lsls	r6, r0, #24
 800180a:	d501      	bpl.n	8001810 <_printf_i+0xbc>
 800180c:	681d      	ldr	r5, [r3, #0]
 800180e:	e003      	b.n	8001818 <_printf_i+0xc4>
 8001810:	0645      	lsls	r5, r0, #25
 8001812:	d5fb      	bpl.n	800180c <_printf_i+0xb8>
 8001814:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001818:	2d00      	cmp	r5, #0
 800181a:	da03      	bge.n	8001824 <_printf_i+0xd0>
 800181c:	232d      	movs	r3, #45	@ 0x2d
 800181e:	426d      	negs	r5, r5
 8001820:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001824:	4858      	ldr	r0, [pc, #352]	@ (8001988 <_printf_i+0x234>)
 8001826:	230a      	movs	r3, #10
 8001828:	e011      	b.n	800184e <_printf_i+0xfa>
 800182a:	6821      	ldr	r1, [r4, #0]
 800182c:	6833      	ldr	r3, [r6, #0]
 800182e:	0608      	lsls	r0, r1, #24
 8001830:	f853 5b04 	ldr.w	r5, [r3], #4
 8001834:	d402      	bmi.n	800183c <_printf_i+0xe8>
 8001836:	0649      	lsls	r1, r1, #25
 8001838:	bf48      	it	mi
 800183a:	b2ad      	uxthmi	r5, r5
 800183c:	2f6f      	cmp	r7, #111	@ 0x6f
 800183e:	4852      	ldr	r0, [pc, #328]	@ (8001988 <_printf_i+0x234>)
 8001840:	6033      	str	r3, [r6, #0]
 8001842:	bf14      	ite	ne
 8001844:	230a      	movne	r3, #10
 8001846:	2308      	moveq	r3, #8
 8001848:	2100      	movs	r1, #0
 800184a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800184e:	6866      	ldr	r6, [r4, #4]
 8001850:	60a6      	str	r6, [r4, #8]
 8001852:	2e00      	cmp	r6, #0
 8001854:	db05      	blt.n	8001862 <_printf_i+0x10e>
 8001856:	6821      	ldr	r1, [r4, #0]
 8001858:	432e      	orrs	r6, r5
 800185a:	f021 0104 	bic.w	r1, r1, #4
 800185e:	6021      	str	r1, [r4, #0]
 8001860:	d04b      	beq.n	80018fa <_printf_i+0x1a6>
 8001862:	4616      	mov	r6, r2
 8001864:	fbb5 f1f3 	udiv	r1, r5, r3
 8001868:	fb03 5711 	mls	r7, r3, r1, r5
 800186c:	5dc7      	ldrb	r7, [r0, r7]
 800186e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001872:	462f      	mov	r7, r5
 8001874:	42bb      	cmp	r3, r7
 8001876:	460d      	mov	r5, r1
 8001878:	d9f4      	bls.n	8001864 <_printf_i+0x110>
 800187a:	2b08      	cmp	r3, #8
 800187c:	d10b      	bne.n	8001896 <_printf_i+0x142>
 800187e:	6823      	ldr	r3, [r4, #0]
 8001880:	07df      	lsls	r7, r3, #31
 8001882:	d508      	bpl.n	8001896 <_printf_i+0x142>
 8001884:	6923      	ldr	r3, [r4, #16]
 8001886:	6861      	ldr	r1, [r4, #4]
 8001888:	4299      	cmp	r1, r3
 800188a:	bfde      	ittt	le
 800188c:	2330      	movle	r3, #48	@ 0x30
 800188e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001892:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001896:	1b92      	subs	r2, r2, r6
 8001898:	6122      	str	r2, [r4, #16]
 800189a:	f8cd a000 	str.w	sl, [sp]
 800189e:	464b      	mov	r3, r9
 80018a0:	aa03      	add	r2, sp, #12
 80018a2:	4621      	mov	r1, r4
 80018a4:	4640      	mov	r0, r8
 80018a6:	f7ff fee7 	bl	8001678 <_printf_common>
 80018aa:	3001      	adds	r0, #1
 80018ac:	d14a      	bne.n	8001944 <_printf_i+0x1f0>
 80018ae:	f04f 30ff 	mov.w	r0, #4294967295
 80018b2:	b004      	add	sp, #16
 80018b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018b8:	6823      	ldr	r3, [r4, #0]
 80018ba:	f043 0320 	orr.w	r3, r3, #32
 80018be:	6023      	str	r3, [r4, #0]
 80018c0:	4832      	ldr	r0, [pc, #200]	@ (800198c <_printf_i+0x238>)
 80018c2:	2778      	movs	r7, #120	@ 0x78
 80018c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80018c8:	6823      	ldr	r3, [r4, #0]
 80018ca:	6831      	ldr	r1, [r6, #0]
 80018cc:	061f      	lsls	r7, r3, #24
 80018ce:	f851 5b04 	ldr.w	r5, [r1], #4
 80018d2:	d402      	bmi.n	80018da <_printf_i+0x186>
 80018d4:	065f      	lsls	r7, r3, #25
 80018d6:	bf48      	it	mi
 80018d8:	b2ad      	uxthmi	r5, r5
 80018da:	6031      	str	r1, [r6, #0]
 80018dc:	07d9      	lsls	r1, r3, #31
 80018de:	bf44      	itt	mi
 80018e0:	f043 0320 	orrmi.w	r3, r3, #32
 80018e4:	6023      	strmi	r3, [r4, #0]
 80018e6:	b11d      	cbz	r5, 80018f0 <_printf_i+0x19c>
 80018e8:	2310      	movs	r3, #16
 80018ea:	e7ad      	b.n	8001848 <_printf_i+0xf4>
 80018ec:	4826      	ldr	r0, [pc, #152]	@ (8001988 <_printf_i+0x234>)
 80018ee:	e7e9      	b.n	80018c4 <_printf_i+0x170>
 80018f0:	6823      	ldr	r3, [r4, #0]
 80018f2:	f023 0320 	bic.w	r3, r3, #32
 80018f6:	6023      	str	r3, [r4, #0]
 80018f8:	e7f6      	b.n	80018e8 <_printf_i+0x194>
 80018fa:	4616      	mov	r6, r2
 80018fc:	e7bd      	b.n	800187a <_printf_i+0x126>
 80018fe:	6833      	ldr	r3, [r6, #0]
 8001900:	6825      	ldr	r5, [r4, #0]
 8001902:	6961      	ldr	r1, [r4, #20]
 8001904:	1d18      	adds	r0, r3, #4
 8001906:	6030      	str	r0, [r6, #0]
 8001908:	062e      	lsls	r6, r5, #24
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	d501      	bpl.n	8001912 <_printf_i+0x1be>
 800190e:	6019      	str	r1, [r3, #0]
 8001910:	e002      	b.n	8001918 <_printf_i+0x1c4>
 8001912:	0668      	lsls	r0, r5, #25
 8001914:	d5fb      	bpl.n	800190e <_printf_i+0x1ba>
 8001916:	8019      	strh	r1, [r3, #0]
 8001918:	2300      	movs	r3, #0
 800191a:	6123      	str	r3, [r4, #16]
 800191c:	4616      	mov	r6, r2
 800191e:	e7bc      	b.n	800189a <_printf_i+0x146>
 8001920:	6833      	ldr	r3, [r6, #0]
 8001922:	1d1a      	adds	r2, r3, #4
 8001924:	6032      	str	r2, [r6, #0]
 8001926:	681e      	ldr	r6, [r3, #0]
 8001928:	6862      	ldr	r2, [r4, #4]
 800192a:	2100      	movs	r1, #0
 800192c:	4630      	mov	r0, r6
 800192e:	f7fe fc4f 	bl	80001d0 <memchr>
 8001932:	b108      	cbz	r0, 8001938 <_printf_i+0x1e4>
 8001934:	1b80      	subs	r0, r0, r6
 8001936:	6060      	str	r0, [r4, #4]
 8001938:	6863      	ldr	r3, [r4, #4]
 800193a:	6123      	str	r3, [r4, #16]
 800193c:	2300      	movs	r3, #0
 800193e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001942:	e7aa      	b.n	800189a <_printf_i+0x146>
 8001944:	6923      	ldr	r3, [r4, #16]
 8001946:	4632      	mov	r2, r6
 8001948:	4649      	mov	r1, r9
 800194a:	4640      	mov	r0, r8
 800194c:	47d0      	blx	sl
 800194e:	3001      	adds	r0, #1
 8001950:	d0ad      	beq.n	80018ae <_printf_i+0x15a>
 8001952:	6823      	ldr	r3, [r4, #0]
 8001954:	079b      	lsls	r3, r3, #30
 8001956:	d413      	bmi.n	8001980 <_printf_i+0x22c>
 8001958:	68e0      	ldr	r0, [r4, #12]
 800195a:	9b03      	ldr	r3, [sp, #12]
 800195c:	4298      	cmp	r0, r3
 800195e:	bfb8      	it	lt
 8001960:	4618      	movlt	r0, r3
 8001962:	e7a6      	b.n	80018b2 <_printf_i+0x15e>
 8001964:	2301      	movs	r3, #1
 8001966:	4632      	mov	r2, r6
 8001968:	4649      	mov	r1, r9
 800196a:	4640      	mov	r0, r8
 800196c:	47d0      	blx	sl
 800196e:	3001      	adds	r0, #1
 8001970:	d09d      	beq.n	80018ae <_printf_i+0x15a>
 8001972:	3501      	adds	r5, #1
 8001974:	68e3      	ldr	r3, [r4, #12]
 8001976:	9903      	ldr	r1, [sp, #12]
 8001978:	1a5b      	subs	r3, r3, r1
 800197a:	42ab      	cmp	r3, r5
 800197c:	dcf2      	bgt.n	8001964 <_printf_i+0x210>
 800197e:	e7eb      	b.n	8001958 <_printf_i+0x204>
 8001980:	2500      	movs	r5, #0
 8001982:	f104 0619 	add.w	r6, r4, #25
 8001986:	e7f5      	b.n	8001974 <_printf_i+0x220>
 8001988:	08001b65 	.word	0x08001b65
 800198c:	08001b76 	.word	0x08001b76

08001990 <memmove>:
 8001990:	4288      	cmp	r0, r1
 8001992:	b510      	push	{r4, lr}
 8001994:	eb01 0402 	add.w	r4, r1, r2
 8001998:	d902      	bls.n	80019a0 <memmove+0x10>
 800199a:	4284      	cmp	r4, r0
 800199c:	4623      	mov	r3, r4
 800199e:	d807      	bhi.n	80019b0 <memmove+0x20>
 80019a0:	1e43      	subs	r3, r0, #1
 80019a2:	42a1      	cmp	r1, r4
 80019a4:	d008      	beq.n	80019b8 <memmove+0x28>
 80019a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80019aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80019ae:	e7f8      	b.n	80019a2 <memmove+0x12>
 80019b0:	4402      	add	r2, r0
 80019b2:	4601      	mov	r1, r0
 80019b4:	428a      	cmp	r2, r1
 80019b6:	d100      	bne.n	80019ba <memmove+0x2a>
 80019b8:	bd10      	pop	{r4, pc}
 80019ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80019be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80019c2:	e7f7      	b.n	80019b4 <memmove+0x24>

080019c4 <_sbrk_r>:
 80019c4:	b538      	push	{r3, r4, r5, lr}
 80019c6:	4d06      	ldr	r5, [pc, #24]	@ (80019e0 <_sbrk_r+0x1c>)
 80019c8:	2300      	movs	r3, #0
 80019ca:	4604      	mov	r4, r0
 80019cc:	4608      	mov	r0, r1
 80019ce:	602b      	str	r3, [r5, #0]
 80019d0:	f7ff f846 	bl	8000a60 <_sbrk>
 80019d4:	1c43      	adds	r3, r0, #1
 80019d6:	d102      	bne.n	80019de <_sbrk_r+0x1a>
 80019d8:	682b      	ldr	r3, [r5, #0]
 80019da:	b103      	cbz	r3, 80019de <_sbrk_r+0x1a>
 80019dc:	6023      	str	r3, [r4, #0]
 80019de:	bd38      	pop	{r3, r4, r5, pc}
 80019e0:	2000028c 	.word	0x2000028c

080019e4 <memcpy>:
 80019e4:	440a      	add	r2, r1
 80019e6:	4291      	cmp	r1, r2
 80019e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80019ec:	d100      	bne.n	80019f0 <memcpy+0xc>
 80019ee:	4770      	bx	lr
 80019f0:	b510      	push	{r4, lr}
 80019f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80019f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80019fa:	4291      	cmp	r1, r2
 80019fc:	d1f9      	bne.n	80019f2 <memcpy+0xe>
 80019fe:	bd10      	pop	{r4, pc}

08001a00 <_realloc_r>:
 8001a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a04:	4607      	mov	r7, r0
 8001a06:	4614      	mov	r4, r2
 8001a08:	460d      	mov	r5, r1
 8001a0a:	b921      	cbnz	r1, 8001a16 <_realloc_r+0x16>
 8001a0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001a10:	4611      	mov	r1, r2
 8001a12:	f7ff bc4d 	b.w	80012b0 <_malloc_r>
 8001a16:	b92a      	cbnz	r2, 8001a24 <_realloc_r+0x24>
 8001a18:	f7ff fbde 	bl	80011d8 <_free_r>
 8001a1c:	4625      	mov	r5, r4
 8001a1e:	4628      	mov	r0, r5
 8001a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a24:	f000 f81a 	bl	8001a5c <_malloc_usable_size_r>
 8001a28:	4284      	cmp	r4, r0
 8001a2a:	4606      	mov	r6, r0
 8001a2c:	d802      	bhi.n	8001a34 <_realloc_r+0x34>
 8001a2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001a32:	d8f4      	bhi.n	8001a1e <_realloc_r+0x1e>
 8001a34:	4621      	mov	r1, r4
 8001a36:	4638      	mov	r0, r7
 8001a38:	f7ff fc3a 	bl	80012b0 <_malloc_r>
 8001a3c:	4680      	mov	r8, r0
 8001a3e:	b908      	cbnz	r0, 8001a44 <_realloc_r+0x44>
 8001a40:	4645      	mov	r5, r8
 8001a42:	e7ec      	b.n	8001a1e <_realloc_r+0x1e>
 8001a44:	42b4      	cmp	r4, r6
 8001a46:	4622      	mov	r2, r4
 8001a48:	4629      	mov	r1, r5
 8001a4a:	bf28      	it	cs
 8001a4c:	4632      	movcs	r2, r6
 8001a4e:	f7ff ffc9 	bl	80019e4 <memcpy>
 8001a52:	4629      	mov	r1, r5
 8001a54:	4638      	mov	r0, r7
 8001a56:	f7ff fbbf 	bl	80011d8 <_free_r>
 8001a5a:	e7f1      	b.n	8001a40 <_realloc_r+0x40>

08001a5c <_malloc_usable_size_r>:
 8001a5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a60:	1f18      	subs	r0, r3, #4
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	bfbc      	itt	lt
 8001a66:	580b      	ldrlt	r3, [r1, r0]
 8001a68:	18c0      	addlt	r0, r0, r3
 8001a6a:	4770      	bx	lr

08001a6c <_init>:
 8001a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a6e:	bf00      	nop
 8001a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a72:	bc08      	pop	{r3}
 8001a74:	469e      	mov	lr, r3
 8001a76:	4770      	bx	lr

08001a78 <_fini>:
 8001a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a7a:	bf00      	nop
 8001a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a7e:	bc08      	pop	{r3}
 8001a80:	469e      	mov	lr, r3
 8001a82:	4770      	bx	lr
