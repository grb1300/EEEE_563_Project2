
Project3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008d0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08000a58  08000a58  00001a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000be4  08000be4  00002054  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000be4  08000be4  00002054  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000be4  08000be4  00002054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000be4  08000be4  00001be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000be8  08000be8  00001be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08000bec  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000054  08000c40  00002054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08000c40  000021b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002054  2**0
                  CONTENTS, READONLY
 12 .debug_info   000024c9  00000000  00000000  00002084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000089e  00000000  00000000  0000454d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000190  00000000  00000000  00004df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000116  00000000  00000000  00004f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025037  00000000  00000000  00005096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002a91  00000000  00000000  0002a0cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5ef2  00000000  00000000  0002cb5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00112a50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006e0  00000000  00000000  00112a94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00113174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000054 	.word	0x20000054
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000a40 	.word	0x08000a40

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000058 	.word	0x20000058
 80001c4:	08000a40 	.word	0x08000a40

080001c8 <System_Clock_Init>:
#include "SysClock.h"

//******************************************************************************************
// Switch the PLL source from MSI to HSI, and select the PLL as SYSCLK source.
//******************************************************************************************
void System_Clock_Init(void){
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
	uint32_t HSITrim;

	// To correctly read data from FLASH memory, the number of wait states (LATENCY)
  // must be correctly programmed according to the frequency of the CPU clock
  // (HCLK) and the supply voltage of the device.
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
 80001ce:	4b6b      	ldr	r3, [pc, #428]	@ (800037c <System_Clock_Init+0x1b4>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a6a      	ldr	r2, [pc, #424]	@ (800037c <System_Clock_Init+0x1b4>)
 80001d4:	f023 0307 	bic.w	r3, r3, #7
 80001d8:	6013      	str	r3, [r2, #0]
	FLASH->ACR |=  FLASH_ACR_LATENCY_2WS;
 80001da:	4b68      	ldr	r3, [pc, #416]	@ (800037c <System_Clock_Init+0x1b4>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	4a67      	ldr	r2, [pc, #412]	@ (800037c <System_Clock_Init+0x1b4>)
 80001e0:	f043 0302 	orr.w	r3, r3, #2
 80001e4:	6013      	str	r3, [r2, #0]

	// Enable the Internal High Speed oscillator (HSI
	RCC->CR |= RCC_CR_HSION;
 80001e6:	4b66      	ldr	r3, [pc, #408]	@ (8000380 <System_Clock_Init+0x1b8>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4a65      	ldr	r2, [pc, #404]	@ (8000380 <System_Clock_Init+0x1b8>)
 80001ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80001f0:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_HSIRDY) == 0);
 80001f2:	bf00      	nop
 80001f4:	4b62      	ldr	r3, [pc, #392]	@ (8000380 <System_Clock_Init+0x1b8>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d0f9      	beq.n	80001f4 <System_Clock_Init+0x2c>
	// Adjusts the Internal High Speed oscillator (HSI) calibration value
	// RC oscillator frequencies are factory calibrated by ST for 1 % accuracy at 25oC
	// After reset, the factory calibration value is loaded in HSICAL[7:0] of RCC_ICSCR
	HSITrim = 16; // user-programmable trimming value that is added to HSICAL[7:0] in ICSCR.
 8000200:	2310      	movs	r3, #16
 8000202:	607b      	str	r3, [r7, #4]
	RCC->ICSCR &= ~RCC_ICSCR_HSITRIM;
 8000204:	4b5e      	ldr	r3, [pc, #376]	@ (8000380 <System_Clock_Init+0x1b8>)
 8000206:	685b      	ldr	r3, [r3, #4]
 8000208:	4a5d      	ldr	r2, [pc, #372]	@ (8000380 <System_Clock_Init+0x1b8>)
 800020a:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 800020e:	6053      	str	r3, [r2, #4]
	RCC->ICSCR |= HSITrim << 24;
 8000210:	4b5b      	ldr	r3, [pc, #364]	@ (8000380 <System_Clock_Init+0x1b8>)
 8000212:	685a      	ldr	r2, [r3, #4]
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	061b      	lsls	r3, r3, #24
 8000218:	4959      	ldr	r1, [pc, #356]	@ (8000380 <System_Clock_Init+0x1b8>)
 800021a:	4313      	orrs	r3, r2
 800021c:	604b      	str	r3, [r1, #4]

	RCC->CR    &= ~RCC_CR_PLLON;
 800021e:	4b58      	ldr	r3, [pc, #352]	@ (8000380 <System_Clock_Init+0x1b8>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	4a57      	ldr	r2, [pc, #348]	@ (8000380 <System_Clock_Init+0x1b8>)
 8000224:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000228:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == RCC_CR_PLLRDY);
 800022a:	bf00      	nop
 800022c:	4b54      	ldr	r3, [pc, #336]	@ (8000380 <System_Clock_Init+0x1b8>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000234:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000238:	d0f8      	beq.n	800022c <System_Clock_Init+0x64>

	// Select clock source to PLL
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLSRC;
 800023a:	4b51      	ldr	r3, [pc, #324]	@ (8000380 <System_Clock_Init+0x1b8>)
 800023c:	68db      	ldr	r3, [r3, #12]
 800023e:	4a50      	ldr	r2, [pc, #320]	@ (8000380 <System_Clock_Init+0x1b8>)
 8000240:	f023 0303 	bic.w	r3, r3, #3
 8000244:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSI; // 00 = No clock, 01 = MSI, 10 = HSI, 11 = HSE
 8000246:	4b4e      	ldr	r3, [pc, #312]	@ (8000380 <System_Clock_Init+0x1b8>)
 8000248:	68db      	ldr	r3, [r3, #12]
 800024a:	4a4d      	ldr	r2, [pc, #308]	@ (8000380 <System_Clock_Init+0x1b8>)
 800024c:	f043 0302 	orr.w	r3, r3, #2
 8000250:	60d3      	str	r3, [r2, #12]

	// Make PLL as 80 MHz
	// f(VCO clock) = f(PLL clock input) * (PLLN / PLLM) = 16MHz * 20/2 = 160 MHz
	// f(PLL_R) = f(VCO clock) / PLLR = 160MHz/2 = 80MHz
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLN) | 20U << 8;
 8000252:	4b4b      	ldr	r3, [pc, #300]	@ (8000380 <System_Clock_Init+0x1b8>)
 8000254:	68db      	ldr	r3, [r3, #12]
 8000256:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800025a:	4a49      	ldr	r2, [pc, #292]	@ (8000380 <System_Clock_Init+0x1b8>)
 800025c:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8000260:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR = (RCC->PLLCFGR & ~RCC_PLLCFGR_PLLM) | 1U << 4; // 000: PLLM = 1, 001: PLLM = 2, 010: PLLM = 3, 011: PLLM = 4, 100: PLLM = 5, 101: PLLM = 6, 110: PLLM = 7, 111: PLLM = 8
 8000262:	4b47      	ldr	r3, [pc, #284]	@ (8000380 <System_Clock_Init+0x1b8>)
 8000264:	68db      	ldr	r3, [r3, #12]
 8000266:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800026a:	4a45      	ldr	r2, [pc, #276]	@ (8000380 <System_Clock_Init+0x1b8>)
 800026c:	f043 0310 	orr.w	r3, r3, #16
 8000270:	60d3      	str	r3, [r2, #12]

	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLR;  // 00: PLLR = 2, 01: PLLR = 4, 10: PLLR = 6, 11: PLLR = 8
 8000272:	4b43      	ldr	r3, [pc, #268]	@ (8000380 <System_Clock_Init+0x1b8>)
 8000274:	68db      	ldr	r3, [r3, #12]
 8000276:	4a42      	ldr	r2, [pc, #264]	@ (8000380 <System_Clock_Init+0x1b8>)
 8000278:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800027c:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLREN; // Enable Main PLL PLLCLK output
 800027e:	4b40      	ldr	r3, [pc, #256]	@ (8000380 <System_Clock_Init+0x1b8>)
 8000280:	68db      	ldr	r3, [r3, #12]
 8000282:	4a3f      	ldr	r2, [pc, #252]	@ (8000380 <System_Clock_Init+0x1b8>)
 8000284:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000288:	60d3      	str	r3, [r2, #12]

	RCC->CR   |= RCC_CR_PLLON;
 800028a:	4b3d      	ldr	r3, [pc, #244]	@ (8000380 <System_Clock_Init+0x1b8>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4a3c      	ldr	r2, [pc, #240]	@ (8000380 <System_Clock_Init+0x1b8>)
 8000290:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000294:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);
 8000296:	bf00      	nop
 8000298:	4b39      	ldr	r3, [pc, #228]	@ (8000380 <System_Clock_Init+0x1b8>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d0f9      	beq.n	8000298 <System_Clock_Init+0xd0>

	// Select PLL selected as system clock
	RCC->CFGR &= ~RCC_CFGR_SW;
 80002a4:	4b36      	ldr	r3, [pc, #216]	@ (8000380 <System_Clock_Init+0x1b8>)
 80002a6:	689b      	ldr	r3, [r3, #8]
 80002a8:	4a35      	ldr	r2, [pc, #212]	@ (8000380 <System_Clock_Init+0x1b8>)
 80002aa:	f023 0303 	bic.w	r3, r3, #3
 80002ae:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_SW_PLL; // 00: MSI, 01:HSI, 10: HSE, 11: PLL
 80002b0:	4b33      	ldr	r3, [pc, #204]	@ (8000380 <System_Clock_Init+0x1b8>)
 80002b2:	689b      	ldr	r3, [r3, #8]
 80002b4:	4a32      	ldr	r2, [pc, #200]	@ (8000380 <System_Clock_Init+0x1b8>)
 80002b6:	f043 0303 	orr.w	r3, r3, #3
 80002ba:	6093      	str	r3, [r2, #8]

	// Wait until System Clock has been selected
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 80002bc:	bf00      	nop
 80002be:	4b30      	ldr	r3, [pc, #192]	@ (8000380 <System_Clock_Init+0x1b8>)
 80002c0:	689b      	ldr	r3, [r3, #8]
 80002c2:	f003 030c 	and.w	r3, r3, #12
 80002c6:	2b0c      	cmp	r3, #12
 80002c8:	d1f9      	bne.n	80002be <System_Clock_Init+0xf6>

	// The maximum frequency of the AHB, the APB1 and the APB2 domains is 80 MHz.
	RCC->CFGR &= ~RCC_CFGR_HPRE;  // AHB prescaler = 1; SYSCLK not divided
 80002ca:	4b2d      	ldr	r3, [pc, #180]	@ (8000380 <System_Clock_Init+0x1b8>)
 80002cc:	689b      	ldr	r3, [r3, #8]
 80002ce:	4a2c      	ldr	r2, [pc, #176]	@ (8000380 <System_Clock_Init+0x1b8>)
 80002d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80002d4:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE1; // APB high-speed prescaler (APB1) = 1, HCLK not divided
 80002d6:	4b2a      	ldr	r3, [pc, #168]	@ (8000380 <System_Clock_Init+0x1b8>)
 80002d8:	689b      	ldr	r3, [r3, #8]
 80002da:	4a29      	ldr	r2, [pc, #164]	@ (8000380 <System_Clock_Init+0x1b8>)
 80002dc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80002e0:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~RCC_CFGR_PPRE2; // APB high-speed prescaler (APB2) = 1, HCLK not divided
 80002e2:	4b27      	ldr	r3, [pc, #156]	@ (8000380 <System_Clock_Init+0x1b8>)
 80002e4:	689b      	ldr	r3, [r3, #8]
 80002e6:	4a26      	ldr	r2, [pc, #152]	@ (8000380 <System_Clock_Init+0x1b8>)
 80002e8:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80002ec:	6093      	str	r3, [r2, #8]
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP;
	// RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLQ;
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLPEN; // Enable Main PLL PLLSAI3CLK output enable
	// RCC->PLLCFGR |= RCC_PLLCFGR_PLLQEN; // Enable Main PLL PLL48M1CLK output enable

	RCC->CR &= ~RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 80002ee:	4b24      	ldr	r3, [pc, #144]	@ (8000380 <System_Clock_Init+0x1b8>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	4a23      	ldr	r2, [pc, #140]	@ (8000380 <System_Clock_Init+0x1b8>)
 80002f4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80002f8:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == RCC_CR_PLLSAI1ON );
 80002fa:	bf00      	nop
 80002fc:	4b20      	ldr	r3, [pc, #128]	@ (8000380 <System_Clock_Init+0x1b8>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000304:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8000308:	d0f8      	beq.n	80002fc <System_Clock_Init+0x134>
	// 8 MHz * 24 / 17 = 11.294MHz
	// f(VCOSAI1 clock) = f(PLL clock input) *  (PLLSAI1N / PLLM)
	// PLLSAI1CLK: f(PLLSAI1_P) = f(VCOSAI1 clock) / PLLSAI1P
	// PLLUSB2CLK: f(PLLSAI1_Q) = f(VCOSAI1 clock) / PLLSAI1Q
	// PLLADC1CLK: f(PLLSAI1_R) = f(VCOSAI1 clock) / PLLSAI1R
	RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1N;
 800030a:	4b1d      	ldr	r3, [pc, #116]	@ (8000380 <System_Clock_Init+0x1b8>)
 800030c:	691b      	ldr	r3, [r3, #16]
 800030e:	4a1c      	ldr	r2, [pc, #112]	@ (8000380 <System_Clock_Init+0x1b8>)
 8000310:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8000314:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= 24U<<8;
 8000316:	4b1a      	ldr	r3, [pc, #104]	@ (8000380 <System_Clock_Init+0x1b8>)
 8000318:	691b      	ldr	r3, [r3, #16]
 800031a:	4a19      	ldr	r2, [pc, #100]	@ (8000380 <System_Clock_Init+0x1b8>)
 800031c:	f443 53c0 	orr.w	r3, r3, #6144	@ 0x1800
 8000320:	6113      	str	r3, [r2, #16]

	// SAI1PLL division factor for PLLSAI1CLK
	// 0: PLLSAI1P = 7, 1: PLLSAI1P = 17
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1P;
 8000322:	4b17      	ldr	r3, [pc, #92]	@ (8000380 <System_Clock_Init+0x1b8>)
 8000324:	691b      	ldr	r3, [r3, #16]
 8000326:	4a16      	ldr	r2, [pc, #88]	@ (8000380 <System_Clock_Init+0x1b8>)
 8000328:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800032c:	6113      	str	r3, [r2, #16]
	RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1PEN;
 800032e:	4b14      	ldr	r3, [pc, #80]	@ (8000380 <System_Clock_Init+0x1b8>)
 8000330:	691b      	ldr	r3, [r3, #16]
 8000332:	4a13      	ldr	r2, [pc, #76]	@ (8000380 <System_Clock_Init+0x1b8>)
 8000334:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000338:	6113      	str	r3, [r2, #16]
	// 00: PLLSAI1R = 2, 01: PLLSAI1R = 4, 10: PLLSAI1R = 6, 11: PLLSAI1R = 8
	// RCC->PLLSAI1CFGR &= ~RCC_PLLSAI1CFGR_PLLSAI1R;
	// RCC->PLLSAI1CFGR |= U<<25;
	// RCC->PLLSAI1CFGR |= RCC_PLLSAI1CFGR_PLLSAI1REN;

	RCC->CR |= RCC_CR_PLLSAI1ON;  // SAI1 PLL enable
 800033a:	4b11      	ldr	r3, [pc, #68]	@ (8000380 <System_Clock_Init+0x1b8>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	4a10      	ldr	r2, [pc, #64]	@ (8000380 <System_Clock_Init+0x1b8>)
 8000340:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000344:	6013      	str	r3, [r2, #0]
	while ( (RCC->CR & RCC_CR_PLLSAI1ON) == 0);
 8000346:	bf00      	nop
 8000348:	4b0d      	ldr	r3, [pc, #52]	@ (8000380 <System_Clock_Init+0x1b8>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d0f9      	beq.n	8000348 <System_Clock_Init+0x180>
	// SAI1 clock source selection
	// 00: PLLSAI1 "P" clock (PLLSAI1CLK) selected as SAI1 clock
	// 01: PLLSAI2 "P" clock (PLLSAI2CLK) selected as SAI1 clock
	// 10: PLL "P" clock (PLLSAI3CLK) selected as SAI1 clock
	// 11: External input SAI1_EXTCLK selected as SAI1 clock
	RCC->CCIPR &= ~RCC_CCIPR_SAI1SEL;
 8000354:	4b0a      	ldr	r3, [pc, #40]	@ (8000380 <System_Clock_Init+0x1b8>)
 8000356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800035a:	4a09      	ldr	r2, [pc, #36]	@ (8000380 <System_Clock_Init+0x1b8>)
 800035c:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000360:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

	RCC->APB2ENR |= RCC_APB2ENR_SAI1EN;
 8000364:	4b06      	ldr	r3, [pc, #24]	@ (8000380 <System_Clock_Init+0x1b8>)
 8000366:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000368:	4a05      	ldr	r2, [pc, #20]	@ (8000380 <System_Clock_Init+0x1b8>)
 800036a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800036e:	6613      	str	r3, [r2, #96]	@ 0x60
}
 8000370:	bf00      	nop
 8000372:	370c      	adds	r7, #12
 8000374:	46bd      	mov	sp, r7
 8000376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037a:	4770      	bx	lr
 800037c:	40022000 	.word	0x40022000
 8000380:	40021000 	.word	0x40021000

08000384 <SysTick_Handler>:

//******************************************************************************************
// This function is to handle SysTick Timer
//******************************************************************************************
void SysTick_Handler(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
    if(start_timer == 1){
 8000388:	4b0d      	ldr	r3, [pc, #52]	@ (80003c0 <SysTick_Handler+0x3c>)
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	2b01      	cmp	r3, #1
 800038e:	d111      	bne.n	80003b4 <SysTick_Handler+0x30>
    	seventyFive_milisecond_counter++;
 8000390:	4b0c      	ldr	r3, [pc, #48]	@ (80003c4 <SysTick_Handler+0x40>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	3301      	adds	r3, #1
 8000396:	4a0b      	ldr	r2, [pc, #44]	@ (80003c4 <SysTick_Handler+0x40>)
 8000398:	6013      	str	r3, [r2, #0]

    	if (seventyFive_milisecond_counter >= 75)
 800039a:	4b0a      	ldr	r3, [pc, #40]	@ (80003c4 <SysTick_Handler+0x40>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	2b4a      	cmp	r3, #74	@ 0x4a
 80003a0:	d908      	bls.n	80003b4 <SysTick_Handler+0x30>
    	{

    		seventyFive_milisecond_elapsed = 1;
 80003a2:	4b09      	ldr	r3, [pc, #36]	@ (80003c8 <SysTick_Handler+0x44>)
 80003a4:	2201      	movs	r2, #1
 80003a6:	701a      	strb	r2, [r3, #0]
    		seventyFive_milisecond_counter = 0;
 80003a8:	4b06      	ldr	r3, [pc, #24]	@ (80003c4 <SysTick_Handler+0x40>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	601a      	str	r2, [r3, #0]
    		start_timer = 0;
 80003ae:	4b04      	ldr	r3, [pc, #16]	@ (80003c0 <SysTick_Handler+0x3c>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	701a      	strb	r2, [r3, #0]
    	}
    }
}
 80003b4:	bf00      	nop
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	20000075 	.word	0x20000075
 80003c4:	20000070 	.word	0x20000070
 80003c8:	20000074 	.word	0x20000074

080003cc <main>:
	}

}

int main(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b086      	sub	sp, #24
 80003d0:	af00      	add	r7, sp, #0

	//Couldnt get UART_SendString() working so swapped back to USART2_WriteString()
    // Initialize GPIO, Timer, and UART
	System_Clock_Init(); // set System Clock = 80 MHz
 80003d2:	f7ff fef9 	bl	80001c8 <System_Clock_Init>
	GPIO_Init();
 80003d6:	f000 f847 	bl	8000468 <GPIO_Init>
    TIM2_PWM_Init();
 80003da:	f000 f875 	bl	80004c8 <TIM2_PWM_Init>
//    init_systick();
//	USART2_Init(115200);
//	USART2_WriteString("Complete Clock, GPIO and UART config!\r\n");
    UART_Init();
 80003de:	f000 f8b9 	bl	8000554 <UART_Init>

    char buffer[10];
    int pulse_width = 1000;  // Default 1ms pulse width
 80003e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80003e6:	613b      	str	r3, [r7, #16]

    while (1) {
        // Prompt user for new pulse width

    	USART2_WriteString("Enter new pulse width (in microseconds, 10-200): ");
 80003e8:	481b      	ldr	r0, [pc, #108]	@ (8000458 <main+0x8c>)
 80003ea:	f000 fa37 	bl	800085c <USART2_WriteString>

        int i = 0;
 80003ee:	2300      	movs	r3, #0
 80003f0:	617b      	str	r3, [r7, #20]
        char c;

        // Read input from UART
        while ((c = UART_ReceiveChar()) != '\r') {
 80003f2:	e00b      	b.n	800040c <main+0x40>
            buffer[i++] = c;
 80003f4:	697b      	ldr	r3, [r7, #20]
 80003f6:	1c5a      	adds	r2, r3, #1
 80003f8:	617a      	str	r2, [r7, #20]
 80003fa:	3318      	adds	r3, #24
 80003fc:	443b      	add	r3, r7
 80003fe:	7bfa      	ldrb	r2, [r7, #15]
 8000400:	f803 2c14 	strb.w	r2, [r3, #-20]
            UART_SendChar(c);  // Echo back the character
 8000404:	7bfb      	ldrb	r3, [r7, #15]
 8000406:	4618      	mov	r0, r3
 8000408:	f000 f968 	bl	80006dc <UART_SendChar>
        while ((c = UART_ReceiveChar()) != '\r') {
 800040c:	f000 f952 	bl	80006b4 <UART_ReceiveChar>
 8000410:	4603      	mov	r3, r0
 8000412:	73fb      	strb	r3, [r7, #15]
 8000414:	7bfb      	ldrb	r3, [r7, #15]
 8000416:	2b0d      	cmp	r3, #13
 8000418:	d1ec      	bne.n	80003f4 <main+0x28>
        }
        buffer[i] = '\0';  // Null-terminate the string
 800041a:	1d3a      	adds	r2, r7, #4
 800041c:	697b      	ldr	r3, [r7, #20]
 800041e:	4413      	add	r3, r2
 8000420:	2200      	movs	r2, #0
 8000422:	701a      	strb	r2, [r3, #0]
        UART_SendString("\n\r");
 8000424:	480d      	ldr	r0, [pc, #52]	@ (800045c <main+0x90>)
 8000426:	f000 f981 	bl	800072c <UART_SendString>

        // Convert input to integer
        pulse_width = atoi(buffer);
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	4618      	mov	r0, r3
 800042e:	f000 fa54 	bl	80008da <atoi>
 8000432:	6138      	str	r0, [r7, #16]

        // Validate pulse width (ensure it's between 10 and 200 microseconds)
        if (pulse_width < 10 || pulse_width > 200) {
 8000434:	693b      	ldr	r3, [r7, #16]
 8000436:	2b09      	cmp	r3, #9
 8000438:	dd02      	ble.n	8000440 <main+0x74>
 800043a:	693b      	ldr	r3, [r7, #16]
 800043c:	2bc8      	cmp	r3, #200	@ 0xc8
 800043e:	dd03      	ble.n	8000448 <main+0x7c>
            UART_SendString("Invalid input! Please enter a value between 400 and 2000.\n\r");
 8000440:	4807      	ldr	r0, [pc, #28]	@ (8000460 <main+0x94>)
 8000442:	f000 f973 	bl	800072c <UART_SendString>
 8000446:	e006      	b.n	8000456 <main+0x8a>
        } else {
            // Adjust PWM duty cycle based on the user input
            TIM2->CCR1 = pulse_width;
 8000448:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800044c:	693b      	ldr	r3, [r7, #16]
 800044e:	6353      	str	r3, [r2, #52]	@ 0x34
            UART_SendString("Pulse width updated!\n\r");
 8000450:	4804      	ldr	r0, [pc, #16]	@ (8000464 <main+0x98>)
 8000452:	f000 f96b 	bl	800072c <UART_SendString>
    while (1) {
 8000456:	e7c7      	b.n	80003e8 <main+0x1c>
 8000458:	08000a58 	.word	0x08000a58
 800045c:	08000a8c 	.word	0x08000a8c
 8000460:	08000a90 	.word	0x08000a90
 8000464:	08000acc 	.word	0x08000acc

08000468 <GPIO_Init>:
    }

}

void GPIO_Init(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
    // Enable GPIOA clock
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 800046c:	4b15      	ldr	r3, [pc, #84]	@ (80004c4 <GPIO_Init+0x5c>)
 800046e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000470:	4a14      	ldr	r2, [pc, #80]	@ (80004c4 <GPIO_Init+0x5c>)
 8000472:	f043 0301 	orr.w	r3, r3, #1
 8000476:	64d3      	str	r3, [r2, #76]	@ 0x4c

    // Set PA5 to Alternate Function mode
    GPIOA->MODER &= ~(GPIO_MODER_MODE5);       // Clear PA5 mode bits
 8000478:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000482:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000486:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= GPIO_MODER_MODE5_1;        // Set PA5 to AF mode
 8000488:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000492:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000496:	6013      	str	r3, [r2, #0]

    // Select AF1 (TIM2_CH1) for PA5
    GPIOA->AFR[0] |= (1 << GPIO_AFRL_AFSEL5_Pos);  // Set AF1 (TIM2) for PA5
 8000498:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800049c:	6a1b      	ldr	r3, [r3, #32]
 800049e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80004a6:	6213      	str	r3, [r2, #32]

    // Set PA5 to Push-pull, No pull-up/down, High-speed
    GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR5;
 80004a8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004ac:	689b      	ldr	r3, [r3, #8]
 80004ae:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004b2:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 80004b6:	6093      	str	r3, [r2, #8]
}
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	40021000 	.word	0x40021000

080004c8 <TIM2_PWM_Init>:

void TIM2_PWM_Init(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
    // Enable TIM2 clock
    RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN;
 80004cc:	4b20      	ldr	r3, [pc, #128]	@ (8000550 <TIM2_PWM_Init+0x88>)
 80004ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004d0:	4a1f      	ldr	r2, [pc, #124]	@ (8000550 <TIM2_PWM_Init+0x88>)
 80004d2:	f043 0301 	orr.w	r3, r3, #1
 80004d6:	6593      	str	r3, [r2, #88]	@ 0x58

    // Configure the timer for PWM
    TIM2->PSC = 7999;   // Prescaler value for 80 MHz / (7999 + 1) = 10 kHz
 80004d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004dc:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80004e0:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 199;    // Auto-reload value for 10 kHz / (199 + 1) = 50 Hz
 80004e2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004e6:	22c7      	movs	r2, #199	@ 0xc7
 80004e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->CCR1 = 50;    // Initial duty cycle (adjust as necessary)
 80004ea:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004ee:	2232      	movs	r2, #50	@ 0x32
 80004f0:	635a      	str	r2, [r3, #52]	@ 0x34

    // Set PWM mode 1 on TIM2 CH1 (active until match, inactive otherwise)
    TIM2->CCMR1 &= ~(TIM_CCMR1_OC1M); // Clear OC1M bits
 80004f2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000500:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000504:	6193      	str	r3, [r2, #24]
    TIM2->CCMR1 |= (0x6 << TIM_CCMR1_OC1M_Pos); // Set PWM mode 1 (110)
 8000506:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000510:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000514:	6193      	str	r3, [r2, #24]
    TIM2->CCMR1 |= TIM_CCMR1_OC1PE; // Enable preload register on CCR1
 8000516:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000520:	f043 0308 	orr.w	r3, r3, #8
 8000524:	6193      	str	r3, [r2, #24]

    // Enable capture/compare for channel 1
    TIM2->CCER |= TIM_CCER_CC1E; // Enable TIM2 CH1 output
 8000526:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800052a:	6a1b      	ldr	r3, [r3, #32]
 800052c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	6213      	str	r3, [r2, #32]

    // Enable the counter
    TIM2->CR1 |= TIM_CR1_CEN; // Enable timer
 8000536:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6013      	str	r3, [r2, #0]
}
 8000546:	bf00      	nop
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr
 8000550:	40021000 	.word	0x40021000

08000554 <UART_Init>:

void UART_Init( void )
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0

	// Enable the clock of USART 1 & 2
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;  // Enable USART 2 clock
 800055a:	4b52      	ldr	r3, [pc, #328]	@ (80006a4 <UART_Init+0x150>)
 800055c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800055e:	4a51      	ldr	r2, [pc, #324]	@ (80006a4 <UART_Init+0x150>)
 8000560:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000564:	6593      	str	r3, [r2, #88]	@ 0x58
	// Select the USART1 clock source
	// 00: PCLK selected as USART2 clock
	// 01: System clock (SYSCLK) selected as USART2 clock
	// 10: HSI16 clock selected as USART2 clock
	// 11: LSE clock selected as USART2 clock
	RCC->CCIPR &= ~RCC_CCIPR_USART2SEL;
 8000566:	4b4f      	ldr	r3, [pc, #316]	@ (80006a4 <UART_Init+0x150>)
 8000568:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800056c:	4a4d      	ldr	r2, [pc, #308]	@ (80006a4 <UART_Init+0x150>)
 800056e:	f023 030c 	bic.w	r3, r3, #12
 8000572:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	RCC->CCIPR |=  RCC_CCIPR_USART2SEL_0;
 8000576:	4b4b      	ldr	r3, [pc, #300]	@ (80006a4 <UART_Init+0x150>)
 8000578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800057c:	4a49      	ldr	r2, [pc, #292]	@ (80006a4 <UART_Init+0x150>)
 800057e:	f043 0304 	orr.w	r3, r3, #4
 8000582:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88


	// Enable USART2 clock (assuming PA2 for TX and PA3 for RX)
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;
 8000586:	4b47      	ldr	r3, [pc, #284]	@ (80006a4 <UART_Init+0x150>)
 8000588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800058a:	4a46      	ldr	r2, [pc, #280]	@ (80006a4 <UART_Init+0x150>)
 800058c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000590:	6593      	str	r3, [r2, #88]	@ 0x58
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000592:	4b44      	ldr	r3, [pc, #272]	@ (80006a4 <UART_Init+0x150>)
 8000594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000596:	4a43      	ldr	r2, [pc, #268]	@ (80006a4 <UART_Init+0x150>)
 8000598:	f043 0301 	orr.w	r3, r3, #1
 800059c:	64d3      	str	r3, [r2, #76]	@ 0x4c
	// PA2 = USART2_TX (AF7)
	// PA3 = USART2_RX (AF7)
	// Alternate function, High Speed, Push pull, Pull up
	// **********************************************************
	// Input(00), Output(01), AlterFunc(10), Analog(11)
	GPIOA->MODER   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));	// Clear bits
 800059e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80005a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80005ac:	6013      	str	r3, [r2, #0]
	GPIOA->MODER   |=   2<<(2*TX_PIN) | 2<<(2*RX_PIN);
 80005ae:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80005b8:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80005bc:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0]  &= ~(0xF<<(4*TX_PIN) | 0xF<<(4*RX_PIN));
 80005be:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80005c2:	6a1b      	ldr	r3, [r3, #32]
 80005c4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80005c8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80005cc:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]  |=   7<<(4*TX_PIN) | 7<<(4*RX_PIN);
 80005ce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80005d2:	6a1b      	ldr	r3, [r3, #32]
 80005d4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80005d8:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80005dc:	6213      	str	r3, [r2, #32]
	// GPIO Speed: Low speed (00), Medium speed (01), Fast speed (10), High speed (11)
	GPIOA->OSPEEDR |=   3<<(2*TX_PIN) | 3<<(2*RX_PIN);
 80005de:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80005e2:	689b      	ldr	r3, [r3, #8]
 80005e4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80005e8:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 80005ec:	6093      	str	r3, [r2, #8]
	// GPIO Push-Pull: No pull-up, pull-down (00), Pull-up (01), Pull-down (10), Reserved (11)
	GPIOA->PUPDR   &= ~(3<<(2*TX_PIN) | 3<<(2*RX_PIN));
 80005ee:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80005f2:	68db      	ldr	r3, [r3, #12]
 80005f4:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80005f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80005fc:	60d3      	str	r3, [r2, #12]
	// GPIO Output Type: Output push-pull (0, reset), Output open drain (1)
	GPIOA->OTYPER  &=  ~(1<<TX_PIN | 1<<RX_PIN);
 80005fe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000602:	685b      	ldr	r3, [r3, #4]
 8000604:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000608:	f023 030c 	bic.w	r3, r3, #12
 800060c:	6053      	str	r3, [r2, #4]

	// Default setting:
	//     No hardware flow control, 8 data bits, no parity, 1 start bit and 1 stop bit
	USART2->CR1 &= ~USART_CR1_UE;  // Disable USART
 800060e:	4b26      	ldr	r3, [pc, #152]	@ (80006a8 <UART_Init+0x154>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a25      	ldr	r2, [pc, #148]	@ (80006a8 <UART_Init+0x154>)
 8000614:	f023 0301 	bic.w	r3, r3, #1
 8000618:	6013      	str	r3, [r2, #0]

	// Configure word length to 8 bit
	USART2->CR1 &= ~USART_CR1_M;   // M: 00 = 8 data bits, 01 = 9 data bits, 10 = 7 data bits
 800061a:	4b23      	ldr	r3, [pc, #140]	@ (80006a8 <UART_Init+0x154>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a22      	ldr	r2, [pc, #136]	@ (80006a8 <UART_Init+0x154>)
 8000620:	f023 2310 	bic.w	r3, r3, #268439552	@ 0x10001000
 8000624:	6013      	str	r3, [r2, #0]

	// Configure oversampling mode: Oversampling by 16
	USART2->CR1 &= ~USART_CR1_OVER8;  // 0 = oversampling by 16, 1 = oversampling by 8
 8000626:	4b20      	ldr	r3, [pc, #128]	@ (80006a8 <UART_Init+0x154>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a1f      	ldr	r2, [pc, #124]	@ (80006a8 <UART_Init+0x154>)
 800062c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000630:	6013      	str	r3, [r2, #0]

	// Configure stop bits to 1 stop bit
	//   00: 1 Stop bit;      01: 0.5 Stop bit
	//   10: 2 Stop bits;     11: 1.5 Stop bit
	USART2->CR2 &= ~USART_CR2_STOP;
 8000632:	4b1d      	ldr	r3, [pc, #116]	@ (80006a8 <UART_Init+0x154>)
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	4a1c      	ldr	r2, [pc, #112]	@ (80006a8 <UART_Init+0x154>)
 8000638:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800063c:	6053      	str	r3, [r2, #4]
	// If oversampling by 16, Tx/Rx baud = f_CK / USARTDIV,
	// If oversampling by 8,  Tx/Rx baud = 2*f_CK / USARTDIV
	// When OVER8 = 0, BRR = USARTDIV
	// USARTDIV = 80MHz/9600 = 8333 = 0x208D
	//USART2->BRR  = 0x208D; // Limited to 16 bits
    uint32_t pclk1 = 80000000UL;  // if PLL at 80 MHz, APB1 prescaler = 1
 800063e:	4b1b      	ldr	r3, [pc, #108]	@ (80006ac <UART_Init+0x158>)
 8000640:	607b      	str	r3, [r7, #4]
    USART2->BRR = (pclk1 + (115200/2U)) / 115200;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 8000648:	4a17      	ldr	r2, [pc, #92]	@ (80006a8 <UART_Init+0x154>)
 800064a:	4919      	ldr	r1, [pc, #100]	@ (80006b0 <UART_Init+0x15c>)
 800064c:	fba1 1303 	umull	r1, r3, r1, r3
 8000650:	0c1b      	lsrs	r3, r3, #16
 8000652:	60d3      	str	r3, [r2, #12]

	USART2->CR1  |= (USART_CR1_RE | USART_CR1_TE);  	// Transmitter and Receiver enable
 8000654:	4b14      	ldr	r3, [pc, #80]	@ (80006a8 <UART_Init+0x154>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a13      	ldr	r2, [pc, #76]	@ (80006a8 <UART_Init+0x154>)
 800065a:	f043 030c 	orr.w	r3, r3, #12
 800065e:	6013      	str	r3, [r2, #0]


	USART2->ICR |= USART_ICR_TCCF;
 8000660:	4b11      	ldr	r3, [pc, #68]	@ (80006a8 <UART_Init+0x154>)
 8000662:	6a1b      	ldr	r3, [r3, #32]
 8000664:	4a10      	ldr	r2, [pc, #64]	@ (80006a8 <UART_Init+0x154>)
 8000666:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800066a:	6213      	str	r3, [r2, #32]


	USART2->CR1  |= USART_CR1_UE; // USART enable
 800066c:	4b0e      	ldr	r3, [pc, #56]	@ (80006a8 <UART_Init+0x154>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a0d      	ldr	r2, [pc, #52]	@ (80006a8 <UART_Init+0x154>)
 8000672:	f043 0301 	orr.w	r3, r3, #1
 8000676:	6013      	str	r3, [r2, #0]

	while ( (USART2->ISR & USART_ISR_TEACK) == 0); // Verify that the USART is ready for reception
 8000678:	bf00      	nop
 800067a:	4b0b      	ldr	r3, [pc, #44]	@ (80006a8 <UART_Init+0x154>)
 800067c:	69db      	ldr	r3, [r3, #28]
 800067e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000682:	2b00      	cmp	r3, #0
 8000684:	d0f9      	beq.n	800067a <UART_Init+0x126>
	while ( (USART2->ISR & USART_ISR_REACK) == 0); // Verify that the USART is ready for transmission
 8000686:	bf00      	nop
 8000688:	4b07      	ldr	r3, [pc, #28]	@ (80006a8 <UART_Init+0x154>)
 800068a:	69db      	ldr	r3, [r3, #28]
 800068c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000690:	2b00      	cmp	r3, #0
 8000692:	d0f9      	beq.n	8000688 <UART_Init+0x134>
}
 8000694:	bf00      	nop
 8000696:	bf00      	nop
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	40021000 	.word	0x40021000
 80006a8:	40004400 	.word	0x40004400
 80006ac:	04c4b400 	.word	0x04c4b400
 80006b0:	91a2b3c5 	.word	0x91a2b3c5

080006b4 <UART_ReceiveChar>:

char UART_ReceiveChar()
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
    while (!(USART2->ISR & USART_ISR_RXNE)); // Wait until data is received
 80006b8:	bf00      	nop
 80006ba:	4b07      	ldr	r3, [pc, #28]	@ (80006d8 <UART_ReceiveChar+0x24>)
 80006bc:	69db      	ldr	r3, [r3, #28]
 80006be:	f003 0320 	and.w	r3, r3, #32
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d0f9      	beq.n	80006ba <UART_ReceiveChar+0x6>
    return ((char)(USART2->RDR & 0xFF));
 80006c6:	4b04      	ldr	r3, [pc, #16]	@ (80006d8 <UART_ReceiveChar+0x24>)
 80006c8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	b2db      	uxtb	r3, r3
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	40004400 	.word	0x40004400

080006dc <UART_SendChar>:
	USART2->ISR &= ~USART_ISR_TC;
}


void UART_SendChar(char c)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
    // Wait until the transmit data register is empty
    while (!(USART2->ISR & USART_ISR_TXE));
 80006e6:	bf00      	nop
 80006e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000728 <UART_SendChar+0x4c>)
 80006ea:	69db      	ldr	r3, [r3, #28]
 80006ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d0f9      	beq.n	80006e8 <UART_SendChar+0xc>
    USART2->TDR = c; // Transmit the character
 80006f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <UART_SendChar+0x4c>)
 80006f6:	79fa      	ldrb	r2, [r7, #7]
 80006f8:	b292      	uxth	r2, r2
 80006fa:	851a      	strh	r2, [r3, #40]	@ 0x28
	UART_Delay(300);
 80006fc:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000700:	f000 f82a 	bl	8000758 <UART_Delay>

    // Writing USART_DR automatically clears the TXE flag
	while (!(USART2->ISR & USART_ISR_TC));   		  // wait until TC bit is set
 8000704:	bf00      	nop
 8000706:	4b08      	ldr	r3, [pc, #32]	@ (8000728 <UART_SendChar+0x4c>)
 8000708:	69db      	ldr	r3, [r3, #28]
 800070a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800070e:	2b00      	cmp	r3, #0
 8000710:	d0f9      	beq.n	8000706 <UART_SendChar+0x2a>
	USART2->ISR &= ~USART_ISR_TC;
 8000712:	4b05      	ldr	r3, [pc, #20]	@ (8000728 <UART_SendChar+0x4c>)
 8000714:	69db      	ldr	r3, [r3, #28]
 8000716:	4a04      	ldr	r2, [pc, #16]	@ (8000728 <UART_SendChar+0x4c>)
 8000718:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800071c:	61d3      	str	r3, [r2, #28]
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40004400 	.word	0x40004400

0800072c <UART_SendString>:

void UART_SendString(char* str)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
    while (*str)
 8000734:	e006      	b.n	8000744 <UART_SendString+0x18>
    {
        UART_SendChar(*str++);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	1c5a      	adds	r2, r3, #1
 800073a:	607a      	str	r2, [r7, #4]
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff ffcc 	bl	80006dc <UART_SendChar>
    while (*str)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d1f4      	bne.n	8000736 <UART_SendString+0xa>
    }
}
 800074c:	bf00      	nop
 800074e:	bf00      	nop
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
	...

08000758 <UART_Delay>:

void UART_Delay(uint32_t us)
{
 8000758:	b480      	push	{r7}
 800075a:	b085      	sub	sp, #20
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	uint32_t time = 100*us/7;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	2264      	movs	r2, #100	@ 0x64
 8000764:	fb03 f202 	mul.w	r2, r3, r2
 8000768:	4b0a      	ldr	r3, [pc, #40]	@ (8000794 <UART_Delay+0x3c>)
 800076a:	fba3 1302 	umull	r1, r3, r3, r2
 800076e:	1ad2      	subs	r2, r2, r3
 8000770:	0852      	lsrs	r2, r2, #1
 8000772:	4413      	add	r3, r2
 8000774:	089b      	lsrs	r3, r3, #2
 8000776:	60fb      	str	r3, [r7, #12]
	while(--time);
 8000778:	bf00      	nop
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	3b01      	subs	r3, #1
 800077e:	60fb      	str	r3, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d1f9      	bne.n	800077a <UART_Delay+0x22>
}
 8000786:	bf00      	nop
 8000788:	bf00      	nop
 800078a:	3714      	adds	r7, #20
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	24924925 	.word	0x24924925

08000798 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800079c:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <SystemInit+0x20>)
 800079e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007a2:	4a05      	ldr	r2, [pc, #20]	@ (80007b8 <SystemInit+0x20>)
 80007a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	e000ed00 	.word	0xe000ed00

080007bc <TIM2_IRQHandler>:

//******************************************************************************************
// This function is to handle Timer2 Interrupt, triggered when rising edge is detected
//******************************************************************************************
void TIM2_IRQHandler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
	// Capture event on CH1 only
	if (TIM2->SR & TIM_SR_CC1IF)
 80007c2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007c6:	691b      	ldr	r3, [r3, #16]
 80007c8:	f003 0302 	and.w	r3, r3, #2
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d020      	beq.n	8000812 <TIM2_IRQHandler+0x56>
    {
		// Current captured counter
		uint32_t current_ticks = TIM2->CCR1;
 80007d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80007d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007d6:	607b      	str	r3, [r7, #4]

        // MP-Sept-25: Revised and simplified code
        // Let's skip first reading to ensure we have valid signal to work with
        if (!first_capture)
 80007d8:	4b11      	ldr	r3, [pc, #68]	@ (8000820 <TIM2_IRQHandler+0x64>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	f083 0301 	eor.w	r3, r3, #1
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d006      	beq.n	80007f6 <TIM2_IRQHandler+0x3a>
        {
        	// Calculate period using current and last rising edge values
        	// This should handle overflow automatically
        	period_ticks = (current_ticks - last_capture);
 80007e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000824 <TIM2_IRQHandler+0x68>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	1ad3      	subs	r3, r2, r3
 80007f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000828 <TIM2_IRQHandler+0x6c>)
 80007f2:	6013      	str	r3, [r2, #0]
 80007f4:	e002      	b.n	80007fc <TIM2_IRQHandler+0x40>
        }
        else
        {
        	// Skip very first reading
        	first_capture = false;
 80007f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000820 <TIM2_IRQHandler+0x64>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	701a      	strb	r2, [r3, #0]
        }
        // Save for next edge
        last_capture = current_ticks;
 80007fc:	4a09      	ldr	r2, [pc, #36]	@ (8000824 <TIM2_IRQHandler+0x68>)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	6013      	str	r3, [r2, #0]

    	// Clear flag
    	TIM2->SR &= ~TIM_SR_CC1IF;
 8000802:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000806:	691b      	ldr	r3, [r3, #16]
 8000808:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800080c:	f023 0302 	bic.w	r3, r3, #2
 8000810:	6113      	str	r3, [r2, #16]
    }
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	20000000 	.word	0x20000000
 8000824:	20000078 	.word	0x20000078
 8000828:	2000007c 	.word	0x2000007c

0800082c <USART2_WriteChar>:

//******************************************************************************************
// USART Write functions for testing
//******************************************************************************************
void USART2_WriteChar(char c)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->ISR & USART_ISR_TXE)); // wait until TX buffer empty - blocking
 8000836:	bf00      	nop
 8000838:	4b07      	ldr	r3, [pc, #28]	@ (8000858 <USART2_WriteChar+0x2c>)
 800083a:	69db      	ldr	r3, [r3, #28]
 800083c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000840:	2b00      	cmp	r3, #0
 8000842:	d0f9      	beq.n	8000838 <USART2_WriteChar+0xc>
    USART2->TDR = c;
 8000844:	4b04      	ldr	r3, [pc, #16]	@ (8000858 <USART2_WriteChar+0x2c>)
 8000846:	79fa      	ldrb	r2, [r7, #7]
 8000848:	b292      	uxth	r2, r2
 800084a:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 800084c:	bf00      	nop
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	40004400 	.word	0x40004400

0800085c <USART2_WriteString>:

void USART2_WriteString(const char *s)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
    while (*s)
 8000864:	e006      	b.n	8000874 <USART2_WriteString+0x18>
    {
        USART2_WriteChar(*s++);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	1c5a      	adds	r2, r3, #1
 800086a:	607a      	str	r2, [r7, #4]
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff ffdc 	bl	800082c <USART2_WriteChar>
    while (*s)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d1f4      	bne.n	8000866 <USART2_WriteString+0xa>
    }
}
 800087c:	bf00      	nop
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000888:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800088c:	f7ff ff84 	bl	8000798 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000890:	480c      	ldr	r0, [pc, #48]	@ (80008c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000892:	490d      	ldr	r1, [pc, #52]	@ (80008c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000894:	4a0d      	ldr	r2, [pc, #52]	@ (80008cc <LoopForever+0xe>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000898:	e002      	b.n	80008a0 <LoopCopyDataInit>

0800089a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800089a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800089c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800089e:	3304      	adds	r3, #4

080008a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a4:	d3f9      	bcc.n	800089a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008a6:	4a0a      	ldr	r2, [pc, #40]	@ (80008d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008a8:	4c0a      	ldr	r4, [pc, #40]	@ (80008d4 <LoopForever+0x16>)
  movs r3, #0
 80008aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ac:	e001      	b.n	80008b2 <LoopFillZerobss>

080008ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b0:	3204      	adds	r2, #4

080008b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b4:	d3fb      	bcc.n	80008ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008b6:	f000 f89f 	bl	80009f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008ba:	f7ff fd87 	bl	80003cc <main>

080008be <LoopForever>:

LoopForever:
    b LoopForever
 80008be:	e7fe      	b.n	80008be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80008c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80008c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c8:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 80008cc:	08000bec 	.word	0x08000bec
  ldr r2, =_sbss
 80008d0:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 80008d4:	200001b8 	.word	0x200001b8

080008d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008d8:	e7fe      	b.n	80008d8 <ADC1_2_IRQHandler>

080008da <atoi>:
 80008da:	220a      	movs	r2, #10
 80008dc:	2100      	movs	r1, #0
 80008de:	f000 b87b 	b.w	80009d8 <strtol>
	...

080008e4 <_strtol_l.isra.0>:
 80008e4:	2b24      	cmp	r3, #36	@ 0x24
 80008e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008ea:	4686      	mov	lr, r0
 80008ec:	4690      	mov	r8, r2
 80008ee:	d801      	bhi.n	80008f4 <_strtol_l.isra.0+0x10>
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d106      	bne.n	8000902 <_strtol_l.isra.0+0x1e>
 80008f4:	f000 f87a 	bl	80009ec <__errno>
 80008f8:	2316      	movs	r3, #22
 80008fa:	6003      	str	r3, [r0, #0]
 80008fc:	2000      	movs	r0, #0
 80008fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000902:	4834      	ldr	r0, [pc, #208]	@ (80009d4 <_strtol_l.isra.0+0xf0>)
 8000904:	460d      	mov	r5, r1
 8000906:	462a      	mov	r2, r5
 8000908:	f815 4b01 	ldrb.w	r4, [r5], #1
 800090c:	5d06      	ldrb	r6, [r0, r4]
 800090e:	f016 0608 	ands.w	r6, r6, #8
 8000912:	d1f8      	bne.n	8000906 <_strtol_l.isra.0+0x22>
 8000914:	2c2d      	cmp	r4, #45	@ 0x2d
 8000916:	d110      	bne.n	800093a <_strtol_l.isra.0+0x56>
 8000918:	782c      	ldrb	r4, [r5, #0]
 800091a:	2601      	movs	r6, #1
 800091c:	1c95      	adds	r5, r2, #2
 800091e:	f033 0210 	bics.w	r2, r3, #16
 8000922:	d115      	bne.n	8000950 <_strtol_l.isra.0+0x6c>
 8000924:	2c30      	cmp	r4, #48	@ 0x30
 8000926:	d10d      	bne.n	8000944 <_strtol_l.isra.0+0x60>
 8000928:	782a      	ldrb	r2, [r5, #0]
 800092a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800092e:	2a58      	cmp	r2, #88	@ 0x58
 8000930:	d108      	bne.n	8000944 <_strtol_l.isra.0+0x60>
 8000932:	786c      	ldrb	r4, [r5, #1]
 8000934:	3502      	adds	r5, #2
 8000936:	2310      	movs	r3, #16
 8000938:	e00a      	b.n	8000950 <_strtol_l.isra.0+0x6c>
 800093a:	2c2b      	cmp	r4, #43	@ 0x2b
 800093c:	bf04      	itt	eq
 800093e:	782c      	ldrbeq	r4, [r5, #0]
 8000940:	1c95      	addeq	r5, r2, #2
 8000942:	e7ec      	b.n	800091e <_strtol_l.isra.0+0x3a>
 8000944:	2b00      	cmp	r3, #0
 8000946:	d1f6      	bne.n	8000936 <_strtol_l.isra.0+0x52>
 8000948:	2c30      	cmp	r4, #48	@ 0x30
 800094a:	bf14      	ite	ne
 800094c:	230a      	movne	r3, #10
 800094e:	2308      	moveq	r3, #8
 8000950:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8000954:	f10c 3cff 	add.w	ip, ip, #4294967295
 8000958:	2200      	movs	r2, #0
 800095a:	fbbc f9f3 	udiv	r9, ip, r3
 800095e:	4610      	mov	r0, r2
 8000960:	fb03 ca19 	mls	sl, r3, r9, ip
 8000964:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8000968:	2f09      	cmp	r7, #9
 800096a:	d80f      	bhi.n	800098c <_strtol_l.isra.0+0xa8>
 800096c:	463c      	mov	r4, r7
 800096e:	42a3      	cmp	r3, r4
 8000970:	dd1b      	ble.n	80009aa <_strtol_l.isra.0+0xc6>
 8000972:	1c57      	adds	r7, r2, #1
 8000974:	d007      	beq.n	8000986 <_strtol_l.isra.0+0xa2>
 8000976:	4581      	cmp	r9, r0
 8000978:	d314      	bcc.n	80009a4 <_strtol_l.isra.0+0xc0>
 800097a:	d101      	bne.n	8000980 <_strtol_l.isra.0+0x9c>
 800097c:	45a2      	cmp	sl, r4
 800097e:	db11      	blt.n	80009a4 <_strtol_l.isra.0+0xc0>
 8000980:	fb00 4003 	mla	r0, r0, r3, r4
 8000984:	2201      	movs	r2, #1
 8000986:	f815 4b01 	ldrb.w	r4, [r5], #1
 800098a:	e7eb      	b.n	8000964 <_strtol_l.isra.0+0x80>
 800098c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8000990:	2f19      	cmp	r7, #25
 8000992:	d801      	bhi.n	8000998 <_strtol_l.isra.0+0xb4>
 8000994:	3c37      	subs	r4, #55	@ 0x37
 8000996:	e7ea      	b.n	800096e <_strtol_l.isra.0+0x8a>
 8000998:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800099c:	2f19      	cmp	r7, #25
 800099e:	d804      	bhi.n	80009aa <_strtol_l.isra.0+0xc6>
 80009a0:	3c57      	subs	r4, #87	@ 0x57
 80009a2:	e7e4      	b.n	800096e <_strtol_l.isra.0+0x8a>
 80009a4:	f04f 32ff 	mov.w	r2, #4294967295
 80009a8:	e7ed      	b.n	8000986 <_strtol_l.isra.0+0xa2>
 80009aa:	1c53      	adds	r3, r2, #1
 80009ac:	d108      	bne.n	80009c0 <_strtol_l.isra.0+0xdc>
 80009ae:	2322      	movs	r3, #34	@ 0x22
 80009b0:	f8ce 3000 	str.w	r3, [lr]
 80009b4:	4660      	mov	r0, ip
 80009b6:	f1b8 0f00 	cmp.w	r8, #0
 80009ba:	d0a0      	beq.n	80008fe <_strtol_l.isra.0+0x1a>
 80009bc:	1e69      	subs	r1, r5, #1
 80009be:	e006      	b.n	80009ce <_strtol_l.isra.0+0xea>
 80009c0:	b106      	cbz	r6, 80009c4 <_strtol_l.isra.0+0xe0>
 80009c2:	4240      	negs	r0, r0
 80009c4:	f1b8 0f00 	cmp.w	r8, #0
 80009c8:	d099      	beq.n	80008fe <_strtol_l.isra.0+0x1a>
 80009ca:	2a00      	cmp	r2, #0
 80009cc:	d1f6      	bne.n	80009bc <_strtol_l.isra.0+0xd8>
 80009ce:	f8c8 1000 	str.w	r1, [r8]
 80009d2:	e794      	b.n	80008fe <_strtol_l.isra.0+0x1a>
 80009d4:	08000ae4 	.word	0x08000ae4

080009d8 <strtol>:
 80009d8:	4613      	mov	r3, r2
 80009da:	460a      	mov	r2, r1
 80009dc:	4601      	mov	r1, r0
 80009de:	4802      	ldr	r0, [pc, #8]	@ (80009e8 <strtol+0x10>)
 80009e0:	6800      	ldr	r0, [r0, #0]
 80009e2:	f7ff bf7f 	b.w	80008e4 <_strtol_l.isra.0>
 80009e6:	bf00      	nop
 80009e8:	20000004 	.word	0x20000004

080009ec <__errno>:
 80009ec:	4b01      	ldr	r3, [pc, #4]	@ (80009f4 <__errno+0x8>)
 80009ee:	6818      	ldr	r0, [r3, #0]
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	20000004 	.word	0x20000004

080009f8 <__libc_init_array>:
 80009f8:	b570      	push	{r4, r5, r6, lr}
 80009fa:	4d0d      	ldr	r5, [pc, #52]	@ (8000a30 <__libc_init_array+0x38>)
 80009fc:	4c0d      	ldr	r4, [pc, #52]	@ (8000a34 <__libc_init_array+0x3c>)
 80009fe:	1b64      	subs	r4, r4, r5
 8000a00:	10a4      	asrs	r4, r4, #2
 8000a02:	2600      	movs	r6, #0
 8000a04:	42a6      	cmp	r6, r4
 8000a06:	d109      	bne.n	8000a1c <__libc_init_array+0x24>
 8000a08:	4d0b      	ldr	r5, [pc, #44]	@ (8000a38 <__libc_init_array+0x40>)
 8000a0a:	4c0c      	ldr	r4, [pc, #48]	@ (8000a3c <__libc_init_array+0x44>)
 8000a0c:	f000 f818 	bl	8000a40 <_init>
 8000a10:	1b64      	subs	r4, r4, r5
 8000a12:	10a4      	asrs	r4, r4, #2
 8000a14:	2600      	movs	r6, #0
 8000a16:	42a6      	cmp	r6, r4
 8000a18:	d105      	bne.n	8000a26 <__libc_init_array+0x2e>
 8000a1a:	bd70      	pop	{r4, r5, r6, pc}
 8000a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a20:	4798      	blx	r3
 8000a22:	3601      	adds	r6, #1
 8000a24:	e7ee      	b.n	8000a04 <__libc_init_array+0xc>
 8000a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a2a:	4798      	blx	r3
 8000a2c:	3601      	adds	r6, #1
 8000a2e:	e7f2      	b.n	8000a16 <__libc_init_array+0x1e>
 8000a30:	08000be4 	.word	0x08000be4
 8000a34:	08000be4 	.word	0x08000be4
 8000a38:	08000be4 	.word	0x08000be4
 8000a3c:	08000be8 	.word	0x08000be8

08000a40 <_init>:
 8000a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a42:	bf00      	nop
 8000a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a46:	bc08      	pop	{r3}
 8000a48:	469e      	mov	lr, r3
 8000a4a:	4770      	bx	lr

08000a4c <_fini>:
 8000a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a4e:	bf00      	nop
 8000a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a52:	bc08      	pop	{r3}
 8000a54:	469e      	mov	lr, r3
 8000a56:	4770      	bx	lr
